syntax = "proto3";

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH
package mycompany.simple;

import "google/protobuf/empty.proto";
import "temporal/v1/temporal.proto";

service Simple {
  option (temporal.v1.service) = {
    task_queue: 'my-task-queue'
  };

  // SomeWorkflow1 does some workflow thing.
  rpc SomeWorkflow1(SomeWorkflow1Request) returns (SomeWorkflow1Response) {
    option (temporal.v1.workflow) = {
      id: 'some-workflow-1/${! id }/${! uuid_v4() }'
      name: 'mycompany.simple.SomeWorkflow1'
      query : { ref: 'SomeQuery1' }
      query : { ref: 'SomeQuery2' }
      signal: { ref: 'SomeSignal1' }
      signal: { ref: 'SomeSignal2' }
    };
  }

  // SomeWorkflow2 does some workflow thing.
  rpc SomeWorkflow2(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      name: 'mycompany.simple.SomeWorkflow2'
      signal: { ref: 'SomeSignal1', start: true }
      update: { ref: 'SomeUpdate1' }
    };
  }

  // SomeWorkflow3 does some workflow thing.
  rpc SomeWorkflow3(SomeWorkflow3Request) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      id: 'some-workflow-3/${! id }/${! requestVal }'
      task_queue       : 'my-task-queue-2'
      id_reuse_policy  : WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
      execution_timeout: { seconds: 3600 }
      retry_policy {
        max_attempts: 2
      }
      signal: { ref: 'SomeSignal2', start: true }
    };
  }

  // SomeActivity1 does some activity thing.
  rpc SomeActivity1(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.activity) = {
      name: 'mycompany.simple.SomeActivity1'
    };
  }

  // SomeActivity2 does some activity thing.
  rpc SomeActivity2(SomeActivity2Request) returns (google.protobuf.Empty) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: { seconds: 10 }
      retry_policy {
        max_interval: { seconds: 30 }
      }
    };
  }

  // SomeActivity3 does some activity thing.
  rpc SomeActivity3(SomeActivity3Request) returns (SomeActivity3Response) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: { seconds: 10 }
      retry_policy {
        max_attempts: 5
      }
    };
  }

  // SomeQuery1 queries some thing.
  rpc SomeQuery1(google.protobuf.Empty) returns (SomeQuery1Response) {
    option (temporal.v1.query) = { };
  }

  // SomeQuery2 queries some thing.
  rpc SomeQuery2(SomeQuery2Request) returns (SomeQuery2Response) {
    option (temporal.v1.query) = { };
  }

  // SomeSignal1 is a signal.
  rpc SomeSignal1(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = { };
  }

  // SomeSignal2 is a signal.
  rpc SomeSignal2(SomeSignal2Request) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = { };
  }

  // SomeUpdate1 updates a SomeWorkflow2
  rpc SomeUpdate1(SomeUpdate1Request) returns (SomeUpdate1Response) {
    option (temporal.v1.update) = {
      id: 'some-update/${! requestVal.not_empty().catch("default").slug() }'
      validate: true
      wait_policy: WAIT_POLICY_COMPLETED
    };
  }
}

message SomeWorkflow1Request {
  string request_val = 1;
  string id = 2;
}

message SomeWorkflow1Response {
  string response_val = 1;
}

message SomeWorkflow3Request {
  string id          = 1;
  string request_val = 2;
}

message SomeActivity2Request {
  string request_val = 1;
}

message SomeActivity3Request {
  string request_val = 1;
}

message SomeActivity3Response {
  string response_val = 1;
}

message SomeQuery1Response {
  string response_val = 1;
}

message SomeQuery2Request {
  string request_val = 1;
}

message SomeQuery2Response {
  string response_val = 1;
}

message SomeSignal2Request {
  string request_val = 1;
}

message SomeUpdate1Request {
  string request_val = 1;
}

message SomeUpdate1Response {
  string response_val = 1;
}

service Other {
  option (temporal.v1.service) = {
    task_queue: 'other-task-queue'
  };

  rpc OtherWorkflow(OtherWorkflowRequest) returns (OtherWorkflowResponse) {
    option (temporal.v1.workflow) = {
      id: 'other-workflow/${!uuid_v4()}'
    };
    option (temporal.v1.activity) = {
      start_to_close_timeout: { seconds: 30 }
    };
  }

  rpc OtherQuery(google.protobuf.Empty) returns (OtherQueryResponse) {
    option (temporal.v1.query) = {};
  }

  rpc OtherSignal(OtherSignalRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
  }

  rpc OtherUpdate(OtherUpdateRequest) returns (OtherUpdateResponse) {
    option (temporal.v1.update) = {
      id: 'other-update/${!uuid_v4()}'
    };
  }
}

message OtherWorkflowRequest {
  string some_val = 1;
}

message OtherWorkflowResponse {}

message OtherQueryResponse {
  string filter = 1;
}

message OtherSignalRequest {
  string type = 1;
}

message OtherUpdateRequest {
  string mode = 1;
}

message OtherUpdateResponse {}