syntax = "proto3";

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH
package mycompany.simple;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "temporal/v1/temporal.proto";
import "test/simple/common/v1/common.proto";

service Simple {
  option (temporal.v1.service) = {task_queue: 'my-task-queue'};

  // SomeWorkflow1 does some workflow thing.
  rpc SomeWorkflow1(SomeWorkflow1Request) returns (SomeWorkflow1Response) {
    option (temporal.v1.workflow) = {
      id: 'some-workflow-1/${! id }/${! uuid_v4() }'
      name: 'mycompany.simple.SomeWorkflow1'
      aliases: ['mycompany.SomeWorkflow1']
      query: {ref: 'SomeQuery1'}
      query: {ref: 'SomeQuery2'}
      signal: {ref: 'SomeSignal1'}
      signal: {ref: 'SomeSignal2'}
    };
  }

  // SomeWorkflow2 does some workflow thing.
  rpc SomeWorkflow2(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      name: 'mycompany.simple.SomeWorkflow2'
      id: 'some-workflow-2/${! uuid_v4() }'
      signal: {
        ref: 'SomeSignal1'
        start: true
      }
      update: {ref: 'SomeUpdate1'}
      patches: [
        {
          version: PV_64
          mode: PVM_REMOVED
        }
      ]
    };
  }

  // SomeWorkflow3 does some workflow thing.
  // Deprecated: Use SomeWorkflow2 instead.
  rpc SomeWorkflow3(SomeWorkflow3Request) returns (google.protobuf.Empty) {
    option deprecated = true;
    option (temporal.v1.workflow) = {
      id: 'some-workflow-3/${! id }/${! requestVal }'
      task_queue: 'my-task-queue-2'
      id_reuse_policy: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
      execution_timeout: {seconds: 3600}
      retry_policy: {max_attempts: 2}
      signal: {
        ref: 'SomeSignal2'
        start: true
      }
      patches: [
        {
          version: PV_64
          mode: PVM_DISABLED
        }
      ]
    };
  }

  // SomeWorkflow4 retrieves a paginated list of items
  rpc SomeWorkflow4(common.v1.PaginatedRequest) returns (common.v1.PaginatedResponse) {
    option (temporal.v1.workflow) = {id: 'some-workflow-4/${! uuid_v4() }'};
  }

  // SomeActivity1 does some activity thing.
  rpc SomeActivity1(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.activity) = {name: 'mycompany.simple.SomeActivity1'};
  }

  // SomeActivity2 does some activity thing.
  rpc SomeActivity2(SomeActivity2Request) returns (google.protobuf.Empty) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 10}
      wait_for_cancellation: true
      retry_policy: {
        max_interval: {seconds: 30}
      }
    };
  }

  // SomeActivity3 does some activity thing.
  rpc SomeActivity3(SomeActivity3Request) returns (SomeActivity3Response) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 10}
      task_queue: 'some-other-task-queue'
      retry_policy: {max_attempts: 5}
    };
  }

  // SomeActivity4 does some activity thing.
  rpc SomeActivity4(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.activity) = {
      heartbeat_timeout: {seconds: 30}
      retry_policy: {max_attempts: 5}
      schedule_to_close_timeout: {seconds: 300}
      schedule_to_start_timeout: {seconds: 5}
      start_to_close_timeout: {seconds: 60}
      task_queue: 'some-other-task-queue'
      wait_for_cancellation: true
    };
  }

  // SomeQuery1 queries some thing.
  rpc SomeQuery1(google.protobuf.Empty) returns (SomeQuery1Response) {
    option (temporal.v1.query) = {};
  }

  // SomeQuery2 queries some thing.
  rpc SomeQuery2(SomeQuery2Request) returns (SomeQuery2Response) {
    option (temporal.v1.query) = {};
  }

  // SomeSignal1 is a signal.
  rpc SomeSignal1(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 10}
    };
  }

  // SomeSignal2 is a signal.
  rpc SomeSignal2(SomeSignal2Request) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 10}
    };
  }

  // SomeSignal3 is a signal.
  rpc SomeSignal3(SomeSignal3Request) returns (SomeSignal3Response) {
    option (temporal.v1.signal) = {};
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 10}
    };
  }

  // SomeUpdate1 updates a SomeWorkflow2
  rpc SomeUpdate1(SomeUpdate1Request) returns (SomeUpdate1Response) {
    option (temporal.v1.update) = {
      id: 'some-update/${! requestVal.not_empty().catch("default").slug() }'
      validate: true
      wait_policy: WAIT_POLICY_COMPLETED
    };
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 10}
      retry_policy: {
        max_attempts: 3
        non_retryable_error_types: ["something"]
      }
    };
  }
}

message SomeWorkflow1Request {
  string request_val = 1;
  string id = 2;
}

message SomeWorkflow1Response {
  string response_val = 1;
}

message SomeWorkflow3Request {
  string id = 1;
  string request_val = 2;
}

message SomeActivity2Request {
  string request_val = 1;
}

message SomeActivity3Request {
  string request_val = 1;
}

message SomeActivity3Response {
  string response_val = 1;
}

message SomeQuery1Response {
  string response_val = 1;
}

message SomeQuery2Request {
  string request_val = 1;
}

message SomeQuery2Response {
  string response_val = 1;
}

message SomeSignal2Request {
  string request_val = 1;
}

message SomeSignal3Request {
  string request_val = 1;
}

message SomeSignal3Response {
  string response_val = 1;
}

message SomeUpdate1Request {
  string request_val = 1;
}

message SomeUpdate1Response {
  string response_val = 1;
}

service Other {
  option (temporal.v1.service) = {
    task_queue: 'other-task-queue'
    patches: [
      {
        version: PV_64
        mode: PVM_MARKER
      }
    ]
  };

  rpc OtherWorkflow(OtherWorkflowRequest) returns (OtherWorkflowResponse) {
    option (temporal.v1.workflow) = {id: 'other-workflow/${!uuid_v4()}'};
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 30}
    };
  }

  rpc OtherQuery(google.protobuf.Empty) returns (OtherQueryResponse) {
    option (temporal.v1.query) = {};
  }

  rpc OtherSignal(OtherSignalRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.command) = {ignore: true};
    option (temporal.v1.signal) = {};
  }

  rpc OtherUpdate(OtherUpdateRequest) returns (OtherUpdateResponse) {
    option (temporal.v1.update) = {id: 'other-update/${!uuid_v4()}'};
  }
}

message OtherWorkflowRequest {
  string some_val = 1;
  Baz baz = 2;
  Qux qux = 3;
  oneof example_oneof {
    Foo foo = 4;
    Bar bar = 5;
    bytes example_bytes = 6;
    double example_double = 7;
    float example_float = 8;
    int32 example_int32 = 9;
    int64 example_int64 = 10;
    uint32 example_uint32 = 11;
    uint64 example_uint64 = 12;
    sint32 example_sint32 = 13;
    sint64 example_sint64 = 14;
    fixed32 example_fixed32 = 15;
    fixed64 example_fixed64 = 16;
    sfixed32 example_sfixed32 = 17;
    sfixed64 example_sfixed64 = 18;
    bool example_bool = 19;
    string quux = 20;
    google.protobuf.Duration example_duration = 21;
    google.protobuf.Empty example_empty = 22;
    google.protobuf.Timestamp example_timestamp = 23;
    OtherEnum example_enum = 24;
    common.v1.Example common_enum = 25;
  }
  message Bar {
    string bar = 1;
  }
  message Baz {
    string baz = 1;
  }
}

message OtherWorkflowResponse {}

message OtherQueryResponse {
  string filter = 1;
}

message OtherSignalRequest {
  string type = 1;
}

message OtherUpdateRequest {
  string mode = 1;
}

message OtherUpdateResponse {}

enum OtherEnum {
  OTHER_UNSPECIFIED = 0;
  OTHER_FOO = 1;
  OTHER_BAR = 2;
}

message Foo {
  string foo = 1;
}
message Qux {
  string qux = 1;
}

service Nothing {
  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty);
}

service Ignored {
  option (temporal.v1.cli) = {ignore: true};

  rpc What(WhatRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {id: 'what/${!ksuid()}'};
  }
}

message WhatRequest {
  string blah = 1;
}

service OnlyActivities {
  rpc LonelyActivity1(LonelyActivity1Request) returns (LonelyActivity1Response) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 5}
    };
  }
}

message LonelyActivity1Request {}

message LonelyActivity1Response {}

service Deprecated {
  // SomeDeprecatedWorkflow1 does something
  rpc SomeDeprecatedWorkflow1(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.workflow) = {
      query: {ref: 'SomeDeprecatedQuery1'}
      signal: {
        ref: 'SomeDeprecatedSignal1'
        start: true
      }
      update: {ref: 'SomeDeprecatedUpdate1'}
    };
  }

  // SomeDeprecatedWorkflow2 does something else
  //
  // Deprecated: a custom workflow deprecation message.
  rpc SomeDeprecatedWorkflow2(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.workflow) = {
      query: {ref: 'SomeDeprecatedQuery2'}
      signal: {
        ref: 'SomeDeprecatedSignal2'
        start: true
      }
      update: {ref: 'SomeDeprecatedUpdate2'}
    };
  }

  // SomeDeprecatedActivity1 does something
  rpc SomeDeprecatedActivity1(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 5}
    };
  }

  // SomeDeprecatedActivity2 does something else
  //
  // Deprecated: a custom activity deprecation message.
  rpc SomeDeprecatedActivity2(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 5}
    };
  }

  // SomeDeprecatedQuery1 does something else
  rpc SomeDeprecatedQuery1(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.query) = {};
  }

  // SomeDeprecatedQuery2 does something else
  //
  // Deprecated: a custom query deprecation message.
  rpc SomeDeprecatedQuery2(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.query) = {};
  }

  // SomeDeprecatedSignal1 does something else
  rpc SomeDeprecatedSignal1(SomeDeprecatedMessage) returns (google.protobuf.Empty) {
    option deprecated = true;
    option (temporal.v1.signal) = {};
  }

  // SomeDeprecatedSignal2 does something else
  //
  // Deprecated: a custom signal deprecation message.
  rpc SomeDeprecatedSignal2(SomeDeprecatedMessage) returns (google.protobuf.Empty) {
    option deprecated = true;
    option (temporal.v1.signal) = {};
  }

  // SomeDeprecatedUpdate1 does something else
  rpc SomeDeprecatedUpdate1(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.update) = {};
  }

  // SomeDeprecatedUpdate2 does something else
  //
  // Deprecated: a custom signal deprecation message.
  rpc SomeDeprecatedUpdate2(SomeDeprecatedMessage) returns (SomeDeprecatedMessage) {
    option deprecated = true;
    option (temporal.v1.update) = {};
  }
}

message SomeDeprecatedMessage {}
