syntax = "proto3";

package test.option.v1;

import "google/protobuf/empty.proto";
import "temporal/v1/temporal.proto";

service Test {
  option (temporal.v1.service).task_queue = "option-v1";

  rpc ActivityWithInput(ActivityWithInputRequest) returns (ActivityWithInputResponse) {
    option (temporal.v1.activity) = {
      heartbeat_timeout: {seconds: 30}
      retry_policy: {
        max_interval: {seconds: 5}
      }
      schedule_to_close_timeout: {seconds: 120}
      schedule_to_start_timeout: {seconds: 10}
      start_to_close_timeout: {seconds: 60}
      task_queue: "option-v2"
      wait_for_cancellation: true
    };
  }

  rpc UpdateWithInput(UpdateWithInputRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.update) = {
      id: 'update-with-input:${! name.or(throw("name is required")) }'
      wait_policy: WAIT_POLICY_ADMITTED
      wait_for_stage: WAIT_POLICY_COMPLETED
    };
  }

  rpc WorkflowWithInput(WorkflowWithInputRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      execution_timeout: {seconds: 600}
      id: 'workflow-with-input:${! name.or(throw("name is required")) }'
      id_reuse_policy: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY
      parent_close_policy: PARENT_CLOSE_POLICY_REQUEST_CANCEL
      retry_policy: {max_attempts: 5}
      run_timeout: {seconds: 300}
      search_attributes: 'name = name \n'
      task_queue: "option-v2"
      task_timeout: {seconds: 10}
      wait_for_cancellation: true

      update: {ref: 'UpdateWithInput'}
    };
  }
}

message ActivityWithInputRequest {
  string name = 1;
}

message ActivityWithInputResponse {
  string result = 1;
}

message UpdateWithInputRequest {
  string name = 1;
}

message WorkflowWithInputRequest {
  string name = 1;
}
