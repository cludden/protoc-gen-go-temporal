package plugin

import (
	"fmt"
	"runtime"
	"strings"

	g "github.com/dave/jennifer/jen"
	"github.com/spf13/pflag"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

const (
	deprecatedComment = "Deprecated: Do not use."
)

type Config struct {
	CliCategories              bool
	CliEnabled                 bool
	DisableWorkflowInputRename bool
	DocsOut                    string
	DocsTemplate               string
	EnableCodec                bool
	EnablePatchSupport         bool
	EnableXNS                  bool
	Patches                    string
	WorkflowUpdateEnabled      bool
}

// Plugin provides a protoc plugin for generating temporal workers and clients in go
type Plugin struct {
	*protogen.Plugin

	Commit  string
	Version string
	cfg     *Config
	flags   *pflag.FlagSet
}

func New(commit, version string) *Plugin {
	var cfg Config

	flags := pflag.NewFlagSet("plugin", pflag.ExitOnError)
	flags.BoolVar(&cfg.CliEnabled, "cli-enabled", false, "enable cli generation")
	flags.BoolVar(&cfg.CliCategories, "cli-categories", true, "enable cli categories")
	flags.BoolVar(&cfg.DisableWorkflowInputRename, "disable-workflow-input-rename", false, "disable renaming of \"<Workflow>WorkflowInput\"")
	flags.StringVar(&cfg.DocsOut, "docs-out", "", "docs output path")
	flags.StringVar(&cfg.DocsTemplate, "docs-template", "basic", "built-in template name or path to custom template file")
	flags.BoolVar(&cfg.EnableCodec, "enable-codec", false, "enables experimental codec support")
	flags.BoolVar(&cfg.EnablePatchSupport, "enable-patch-support", false, "enables support for alta/protopatch renaming")
	flags.BoolVar(&cfg.EnableXNS, "enable-xns", false, "enable experimental cross-namespace workflow client")
	flags.StringVar(&cfg.Patches, "patches", "", "comma-delimited string of <PATCH_VERSION>[_<MODE>] (e.g. --patches=64_MARKER,65_REMOVED)")
	flags.BoolVar(&cfg.WorkflowUpdateEnabled, "workflow-update-enabled", false, "enable experimental workflow update")

	return &Plugin{
		Commit:  commit,
		Version: version,
		cfg:     &cfg,
		flags:   flags,
	}
}

// Param provides a protogen ParamFunc handler
func (p *Plugin) Param(key, value string) error {
	return p.flags.Set(key, value)
}

// Run defines the plugin entrypoint
func (p *Plugin) Run(plugin *protogen.Plugin) (err error) {
	p.Plugin = plugin
	services, err := parse(p)
	if err != nil {
		return err
	}
	plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_SUPPORTS_EDITIONS | pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
	plugin.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_PROTO3
	plugin.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_2023
	return services.render()
}

func commentf[T any, PT interface {
	*T
	Comment(string) *g.Statement
	Commentf(string, ...any) *g.Statement
}](c PT, methods []*protogen.Method, defaultMsg string, a ...any) {
	var deprecated bool
	for _, method := range methods {
		deprecated = isDeprecated(method)
		if deprecated {
			break
		}
	}
	c.Commentf(defaultMsg, a...)
	if deprecated {
		c.Comment(" ")
		c.Comment(deprecatedComment)
	}
}

func commentWithDefaultf[T any, PT interface {
	*T
	Comment(string) *g.Statement
	Commentf(string, ...any) *g.Statement
}](c PT, methods []*protogen.Method, defaultMsg string, a ...any) {
	var deprecated bool
	for _, method := range methods {
		deprecated = isDeprecated(method)
		if deprecated {
			break
		}
	}
	if len(methods) == 1 && methods[0].Comments.Leading.String() != "" {
		comment := strings.TrimSuffix(methods[0].Comments.Leading.String(), "\n")
		c.Comment(comment)
		if deprecated && !strings.Contains(comment, "Deprecated:") {
			c.Comment(" ")
			c.Comment(deprecatedComment)
		}
	} else {
		c.Commentf(defaultMsg, a...)
		if deprecated {
			c.Comment(" ")
			c.Comment(deprecatedComment)
		}
	}
}

func genCodeGenerationHeader(p *Plugin, f *g.File, target *protogen.File) {
	f.PackageComment("Code generated by protoc-gen-go_temporal. DO NOT EDIT.")
	f.PackageComment("versions: ")
	f.PackageComment(fmt.Sprintf("    protoc-gen-go_temporal %s (%s)", p.Version, p.Commit))
	f.PackageComment(fmt.Sprintf("    go %s", runtime.Version()))
	compilerVersion := p.Plugin.Request.CompilerVersion
	if compilerVersion != nil {
		f.PackageComment(fmt.Sprintf("    protoc %s", compilerVersion.String()))
	} else {
		f.PackageComment("    protoc (unknown)")
	}

	f.PackageComment(fmt.Sprintf("source: %s", target.Desc.Path()))
}

func isDeprecated(method *protogen.Method) bool {
	return method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated()
}

// isEmpty checks if the message is a google.protobuf.Empty message
func isEmpty(m *protogen.Message) bool {
	return m.Desc.FullName() == "google.protobuf.Empty"
}

func isGenuineOneOf(field *protogen.Field) bool {
	return field.Oneof != nil && !field.Desc.HasOptionalKeyword()
}

func methodSet(methods ...*protogen.Method) []*protogen.Method {
	return methods
}
