// Code generated by mockery v2.42.2. DO NOT EDIT.

package examplev1

import (
	context "context"

	examplev1 "github.com/cludden/protoc-gen-go-temporal/gen/example/v1"
	internal "go.temporal.io/sdk/client"

	mock "github.com/stretchr/testify/mock"
)

// MockExampleClient is an autogenerated mock type for the ExampleClient type
type MockExampleClient struct {
	mock.Mock
}

type MockExampleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExampleClient) EXPECT() *MockExampleClient_Expecter {
	return &MockExampleClient_Expecter{mock: &_m.Mock}
}

// CancelWorkflow provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockExampleClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	ret := _m.Called(ctx, workflowID, runID)

	if len(ret) == 0 {
		panic("no return value specified for CancelWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleClient_CancelWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkflow'
type MockExampleClient_CancelWorkflow_Call struct {
	*mock.Call
}

// CancelWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockExampleClient_Expecter) CancelWorkflow(ctx interface{}, workflowID interface{}, runID interface{}) *MockExampleClient_CancelWorkflow_Call {
	return &MockExampleClient_CancelWorkflow_Call{Call: _e.mock.On("CancelWorkflow", ctx, workflowID, runID)}
}

func (_c *MockExampleClient_CancelWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockExampleClient_CancelWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockExampleClient_CancelWorkflow_Call) Return(_a0 error) *MockExampleClient_CancelWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleClient_CancelWorkflow_Call) RunAndReturn(run func(context.Context, string, string) error) *MockExampleClient_CancelWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFoo provides a mock function with given fields: ctx, req, opts
func (_m *MockExampleClient) CreateFoo(ctx context.Context, req *examplev1.CreateFooRequest, opts ...*examplev1.CreateFooOptions) (*examplev1.CreateFooResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFoo")
	}

	var r0 *examplev1.CreateFooResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) (*examplev1.CreateFooResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) *examplev1.CreateFooResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*examplev1.CreateFooResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_CreateFoo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFoo'
type MockExampleClient_CreateFoo_Call struct {
	*mock.Call
}

// CreateFoo is a helper method to define mock.On call
//   - ctx context.Context
//   - req *examplev1.CreateFooRequest
//   - opts ...*examplev1.CreateFooOptions
func (_e *MockExampleClient_Expecter) CreateFoo(ctx interface{}, req interface{}, opts ...interface{}) *MockExampleClient_CreateFoo_Call {
	return &MockExampleClient_CreateFoo_Call{Call: _e.mock.On("CreateFoo",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockExampleClient_CreateFoo_Call) Run(run func(ctx context.Context, req *examplev1.CreateFooRequest, opts ...*examplev1.CreateFooOptions)) *MockExampleClient_CreateFoo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*examplev1.CreateFooOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*examplev1.CreateFooOptions)
			}
		}
		run(args[0].(context.Context), args[1].(*examplev1.CreateFooRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExampleClient_CreateFoo_Call) Return(_a0 *examplev1.CreateFooResponse, _a1 error) *MockExampleClient_CreateFoo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_CreateFoo_Call) RunAndReturn(run func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) (*examplev1.CreateFooResponse, error)) *MockExampleClient_CreateFoo_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFooAsync provides a mock function with given fields: ctx, req, opts
func (_m *MockExampleClient) CreateFooAsync(ctx context.Context, req *examplev1.CreateFooRequest, opts ...*examplev1.CreateFooOptions) (examplev1.CreateFooRun, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFooAsync")
	}

	var r0 examplev1.CreateFooRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) (examplev1.CreateFooRun, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) examplev1.CreateFooRun); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(examplev1.CreateFooRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_CreateFooAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFooAsync'
type MockExampleClient_CreateFooAsync_Call struct {
	*mock.Call
}

// CreateFooAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - req *examplev1.CreateFooRequest
//   - opts ...*examplev1.CreateFooOptions
func (_e *MockExampleClient_Expecter) CreateFooAsync(ctx interface{}, req interface{}, opts ...interface{}) *MockExampleClient_CreateFooAsync_Call {
	return &MockExampleClient_CreateFooAsync_Call{Call: _e.mock.On("CreateFooAsync",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockExampleClient_CreateFooAsync_Call) Run(run func(ctx context.Context, req *examplev1.CreateFooRequest, opts ...*examplev1.CreateFooOptions)) *MockExampleClient_CreateFooAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*examplev1.CreateFooOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*examplev1.CreateFooOptions)
			}
		}
		run(args[0].(context.Context), args[1].(*examplev1.CreateFooRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExampleClient_CreateFooAsync_Call) Return(_a0 examplev1.CreateFooRun, _a1 error) *MockExampleClient_CreateFooAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_CreateFooAsync_Call) RunAndReturn(run func(context.Context, *examplev1.CreateFooRequest, ...*examplev1.CreateFooOptions) (examplev1.CreateFooRun, error)) *MockExampleClient_CreateFooAsync_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFooWithSetFooProgress provides a mock function with given fields: ctx, req, signal, opts
func (_m *MockExampleClient) CreateFooWithSetFooProgress(ctx context.Context, req *examplev1.CreateFooRequest, signal *examplev1.SetFooProgressRequest, opts ...*examplev1.CreateFooOptions) (*examplev1.CreateFooResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req, signal)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFooWithSetFooProgress")
	}

	var r0 *examplev1.CreateFooResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) (*examplev1.CreateFooResponse, error)); ok {
		return rf(ctx, req, signal, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) *examplev1.CreateFooResponse); ok {
		r0 = rf(ctx, req, signal, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*examplev1.CreateFooResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) error); ok {
		r1 = rf(ctx, req, signal, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_CreateFooWithSetFooProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFooWithSetFooProgress'
type MockExampleClient_CreateFooWithSetFooProgress_Call struct {
	*mock.Call
}

// CreateFooWithSetFooProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - req *examplev1.CreateFooRequest
//   - signal *examplev1.SetFooProgressRequest
//   - opts ...*examplev1.CreateFooOptions
func (_e *MockExampleClient_Expecter) CreateFooWithSetFooProgress(ctx interface{}, req interface{}, signal interface{}, opts ...interface{}) *MockExampleClient_CreateFooWithSetFooProgress_Call {
	return &MockExampleClient_CreateFooWithSetFooProgress_Call{Call: _e.mock.On("CreateFooWithSetFooProgress",
		append([]interface{}{ctx, req, signal}, opts...)...)}
}

func (_c *MockExampleClient_CreateFooWithSetFooProgress_Call) Run(run func(ctx context.Context, req *examplev1.CreateFooRequest, signal *examplev1.SetFooProgressRequest, opts ...*examplev1.CreateFooOptions)) *MockExampleClient_CreateFooWithSetFooProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*examplev1.CreateFooOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*examplev1.CreateFooOptions)
			}
		}
		run(args[0].(context.Context), args[1].(*examplev1.CreateFooRequest), args[2].(*examplev1.SetFooProgressRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExampleClient_CreateFooWithSetFooProgress_Call) Return(_a0 *examplev1.CreateFooResponse, _a1 error) *MockExampleClient_CreateFooWithSetFooProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_CreateFooWithSetFooProgress_Call) RunAndReturn(run func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) (*examplev1.CreateFooResponse, error)) *MockExampleClient_CreateFooWithSetFooProgress_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFooWithSetFooProgressAsync provides a mock function with given fields: ctx, req, signal, opts
func (_m *MockExampleClient) CreateFooWithSetFooProgressAsync(ctx context.Context, req *examplev1.CreateFooRequest, signal *examplev1.SetFooProgressRequest, opts ...*examplev1.CreateFooOptions) (examplev1.CreateFooRun, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req, signal)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFooWithSetFooProgressAsync")
	}

	var r0 examplev1.CreateFooRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) (examplev1.CreateFooRun, error)); ok {
		return rf(ctx, req, signal, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) examplev1.CreateFooRun); ok {
		r0 = rf(ctx, req, signal, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(examplev1.CreateFooRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) error); ok {
		r1 = rf(ctx, req, signal, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_CreateFooWithSetFooProgressAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFooWithSetFooProgressAsync'
type MockExampleClient_CreateFooWithSetFooProgressAsync_Call struct {
	*mock.Call
}

// CreateFooWithSetFooProgressAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - req *examplev1.CreateFooRequest
//   - signal *examplev1.SetFooProgressRequest
//   - opts ...*examplev1.CreateFooOptions
func (_e *MockExampleClient_Expecter) CreateFooWithSetFooProgressAsync(ctx interface{}, req interface{}, signal interface{}, opts ...interface{}) *MockExampleClient_CreateFooWithSetFooProgressAsync_Call {
	return &MockExampleClient_CreateFooWithSetFooProgressAsync_Call{Call: _e.mock.On("CreateFooWithSetFooProgressAsync",
		append([]interface{}{ctx, req, signal}, opts...)...)}
}

func (_c *MockExampleClient_CreateFooWithSetFooProgressAsync_Call) Run(run func(ctx context.Context, req *examplev1.CreateFooRequest, signal *examplev1.SetFooProgressRequest, opts ...*examplev1.CreateFooOptions)) *MockExampleClient_CreateFooWithSetFooProgressAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*examplev1.CreateFooOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*examplev1.CreateFooOptions)
			}
		}
		run(args[0].(context.Context), args[1].(*examplev1.CreateFooRequest), args[2].(*examplev1.SetFooProgressRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExampleClient_CreateFooWithSetFooProgressAsync_Call) Return(_a0 examplev1.CreateFooRun, _a1 error) *MockExampleClient_CreateFooWithSetFooProgressAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_CreateFooWithSetFooProgressAsync_Call) RunAndReturn(run func(context.Context, *examplev1.CreateFooRequest, *examplev1.SetFooProgressRequest, ...*examplev1.CreateFooOptions) (examplev1.CreateFooRun, error)) *MockExampleClient_CreateFooWithSetFooProgressAsync_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreateFoo provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockExampleClient) GetCreateFoo(ctx context.Context, workflowID string, runID string) examplev1.CreateFooRun {
	ret := _m.Called(ctx, workflowID, runID)

	if len(ret) == 0 {
		panic("no return value specified for GetCreateFoo")
	}

	var r0 examplev1.CreateFooRun
	if rf, ok := ret.Get(0).(func(context.Context, string, string) examplev1.CreateFooRun); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(examplev1.CreateFooRun)
		}
	}

	return r0
}

// MockExampleClient_GetCreateFoo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreateFoo'
type MockExampleClient_GetCreateFoo_Call struct {
	*mock.Call
}

// GetCreateFoo is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockExampleClient_Expecter) GetCreateFoo(ctx interface{}, workflowID interface{}, runID interface{}) *MockExampleClient_GetCreateFoo_Call {
	return &MockExampleClient_GetCreateFoo_Call{Call: _e.mock.On("GetCreateFoo", ctx, workflowID, runID)}
}

func (_c *MockExampleClient_GetCreateFoo_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockExampleClient_GetCreateFoo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockExampleClient_GetCreateFoo_Call) Return(_a0 examplev1.CreateFooRun) *MockExampleClient_GetCreateFoo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleClient_GetCreateFoo_Call) RunAndReturn(run func(context.Context, string, string) examplev1.CreateFooRun) *MockExampleClient_GetCreateFoo_Call {
	_c.Call.Return(run)
	return _c
}

// GetFooProgress provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockExampleClient) GetFooProgress(ctx context.Context, workflowID string, runID string) (*examplev1.GetFooProgressResponse, error) {
	ret := _m.Called(ctx, workflowID, runID)

	if len(ret) == 0 {
		panic("no return value specified for GetFooProgress")
	}

	var r0 *examplev1.GetFooProgressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*examplev1.GetFooProgressResponse, error)); ok {
		return rf(ctx, workflowID, runID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *examplev1.GetFooProgressResponse); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*examplev1.GetFooProgressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workflowID, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_GetFooProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFooProgress'
type MockExampleClient_GetFooProgress_Call struct {
	*mock.Call
}

// GetFooProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockExampleClient_Expecter) GetFooProgress(ctx interface{}, workflowID interface{}, runID interface{}) *MockExampleClient_GetFooProgress_Call {
	return &MockExampleClient_GetFooProgress_Call{Call: _e.mock.On("GetFooProgress", ctx, workflowID, runID)}
}

func (_c *MockExampleClient_GetFooProgress_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockExampleClient_GetFooProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockExampleClient_GetFooProgress_Call) Return(_a0 *examplev1.GetFooProgressResponse, _a1 error) *MockExampleClient_GetFooProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_GetFooProgress_Call) RunAndReturn(run func(context.Context, string, string) (*examplev1.GetFooProgressResponse, error)) *MockExampleClient_GetFooProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdateFooProgress provides a mock function with given fields: ctx, req
func (_m *MockExampleClient) GetUpdateFooProgress(ctx context.Context, req internal.GetWorkflowUpdateHandleOptions) (examplev1.UpdateFooProgressHandle, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdateFooProgress")
	}

	var r0 examplev1.UpdateFooProgressHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.GetWorkflowUpdateHandleOptions) (examplev1.UpdateFooProgressHandle, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.GetWorkflowUpdateHandleOptions) examplev1.UpdateFooProgressHandle); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(examplev1.UpdateFooProgressHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.GetWorkflowUpdateHandleOptions) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_GetUpdateFooProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdateFooProgress'
type MockExampleClient_GetUpdateFooProgress_Call struct {
	*mock.Call
}

// GetUpdateFooProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - req internal.GetWorkflowUpdateHandleOptions
func (_e *MockExampleClient_Expecter) GetUpdateFooProgress(ctx interface{}, req interface{}) *MockExampleClient_GetUpdateFooProgress_Call {
	return &MockExampleClient_GetUpdateFooProgress_Call{Call: _e.mock.On("GetUpdateFooProgress", ctx, req)}
}

func (_c *MockExampleClient_GetUpdateFooProgress_Call) Run(run func(ctx context.Context, req internal.GetWorkflowUpdateHandleOptions)) *MockExampleClient_GetUpdateFooProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(internal.GetWorkflowUpdateHandleOptions))
	})
	return _c
}

func (_c *MockExampleClient_GetUpdateFooProgress_Call) Return(_a0 examplev1.UpdateFooProgressHandle, _a1 error) *MockExampleClient_GetUpdateFooProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_GetUpdateFooProgress_Call) RunAndReturn(run func(context.Context, internal.GetWorkflowUpdateHandleOptions) (examplev1.UpdateFooProgressHandle, error)) *MockExampleClient_GetUpdateFooProgress_Call {
	_c.Call.Return(run)
	return _c
}

// SetFooProgress provides a mock function with given fields: ctx, workflowID, runID, signal
func (_m *MockExampleClient) SetFooProgress(ctx context.Context, workflowID string, runID string, signal *examplev1.SetFooProgressRequest) error {
	ret := _m.Called(ctx, workflowID, runID, signal)

	if len(ret) == 0 {
		panic("no return value specified for SetFooProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *examplev1.SetFooProgressRequest) error); ok {
		r0 = rf(ctx, workflowID, runID, signal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleClient_SetFooProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFooProgress'
type MockExampleClient_SetFooProgress_Call struct {
	*mock.Call
}

// SetFooProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - signal *examplev1.SetFooProgressRequest
func (_e *MockExampleClient_Expecter) SetFooProgress(ctx interface{}, workflowID interface{}, runID interface{}, signal interface{}) *MockExampleClient_SetFooProgress_Call {
	return &MockExampleClient_SetFooProgress_Call{Call: _e.mock.On("SetFooProgress", ctx, workflowID, runID, signal)}
}

func (_c *MockExampleClient_SetFooProgress_Call) Run(run func(ctx context.Context, workflowID string, runID string, signal *examplev1.SetFooProgressRequest)) *MockExampleClient_SetFooProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*examplev1.SetFooProgressRequest))
	})
	return _c
}

func (_c *MockExampleClient_SetFooProgress_Call) Return(_a0 error) *MockExampleClient_SetFooProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleClient_SetFooProgress_Call) RunAndReturn(run func(context.Context, string, string, *examplev1.SetFooProgressRequest) error) *MockExampleClient_SetFooProgress_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateWorkflow provides a mock function with given fields: ctx, workflowID, runID, reason, details
func (_m *MockExampleClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, runID, reason)
	_ca = append(_ca, details...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) error); ok {
		r0 = rf(ctx, workflowID, runID, reason, details...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleClient_TerminateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateWorkflow'
type MockExampleClient_TerminateWorkflow_Call struct {
	*mock.Call
}

// TerminateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - reason string
//   - details ...interface{}
func (_e *MockExampleClient_Expecter) TerminateWorkflow(ctx interface{}, workflowID interface{}, runID interface{}, reason interface{}, details ...interface{}) *MockExampleClient_TerminateWorkflow_Call {
	return &MockExampleClient_TerminateWorkflow_Call{Call: _e.mock.On("TerminateWorkflow",
		append([]interface{}{ctx, workflowID, runID, reason}, details...)...)}
}

func (_c *MockExampleClient_TerminateWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string, reason string, details ...interface{})) *MockExampleClient_TerminateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockExampleClient_TerminateWorkflow_Call) Return(_a0 error) *MockExampleClient_TerminateWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleClient_TerminateWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, ...interface{}) error) *MockExampleClient_TerminateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFooProgress provides a mock function with given fields: ctx, workflowID, runID, req, opts
func (_m *MockExampleClient) UpdateFooProgress(ctx context.Context, workflowID string, runID string, req *examplev1.SetFooProgressRequest, opts ...*examplev1.UpdateFooProgressOptions) (*examplev1.GetFooProgressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, runID, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFooProgress")
	}

	var r0 *examplev1.GetFooProgressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) (*examplev1.GetFooProgressResponse, error)); ok {
		return rf(ctx, workflowID, runID, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) *examplev1.GetFooProgressResponse); ok {
		r0 = rf(ctx, workflowID, runID, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*examplev1.GetFooProgressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) error); ok {
		r1 = rf(ctx, workflowID, runID, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_UpdateFooProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFooProgress'
type MockExampleClient_UpdateFooProgress_Call struct {
	*mock.Call
}

// UpdateFooProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - req *examplev1.SetFooProgressRequest
//   - opts ...*examplev1.UpdateFooProgressOptions
func (_e *MockExampleClient_Expecter) UpdateFooProgress(ctx interface{}, workflowID interface{}, runID interface{}, req interface{}, opts ...interface{}) *MockExampleClient_UpdateFooProgress_Call {
	return &MockExampleClient_UpdateFooProgress_Call{Call: _e.mock.On("UpdateFooProgress",
		append([]interface{}{ctx, workflowID, runID, req}, opts...)...)}
}

func (_c *MockExampleClient_UpdateFooProgress_Call) Run(run func(ctx context.Context, workflowID string, runID string, req *examplev1.SetFooProgressRequest, opts ...*examplev1.UpdateFooProgressOptions)) *MockExampleClient_UpdateFooProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*examplev1.UpdateFooProgressOptions, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(*examplev1.UpdateFooProgressOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*examplev1.SetFooProgressRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExampleClient_UpdateFooProgress_Call) Return(_a0 *examplev1.GetFooProgressResponse, _a1 error) *MockExampleClient_UpdateFooProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_UpdateFooProgress_Call) RunAndReturn(run func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) (*examplev1.GetFooProgressResponse, error)) *MockExampleClient_UpdateFooProgress_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFooProgressAsync provides a mock function with given fields: ctx, workflowID, runID, req, opts
func (_m *MockExampleClient) UpdateFooProgressAsync(ctx context.Context, workflowID string, runID string, req *examplev1.SetFooProgressRequest, opts ...*examplev1.UpdateFooProgressOptions) (examplev1.UpdateFooProgressHandle, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, runID, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFooProgressAsync")
	}

	var r0 examplev1.UpdateFooProgressHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) (examplev1.UpdateFooProgressHandle, error)); ok {
		return rf(ctx, workflowID, runID, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) examplev1.UpdateFooProgressHandle); ok {
		r0 = rf(ctx, workflowID, runID, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(examplev1.UpdateFooProgressHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) error); ok {
		r1 = rf(ctx, workflowID, runID, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleClient_UpdateFooProgressAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFooProgressAsync'
type MockExampleClient_UpdateFooProgressAsync_Call struct {
	*mock.Call
}

// UpdateFooProgressAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - req *examplev1.SetFooProgressRequest
//   - opts ...*examplev1.UpdateFooProgressOptions
func (_e *MockExampleClient_Expecter) UpdateFooProgressAsync(ctx interface{}, workflowID interface{}, runID interface{}, req interface{}, opts ...interface{}) *MockExampleClient_UpdateFooProgressAsync_Call {
	return &MockExampleClient_UpdateFooProgressAsync_Call{Call: _e.mock.On("UpdateFooProgressAsync",
		append([]interface{}{ctx, workflowID, runID, req}, opts...)...)}
}

func (_c *MockExampleClient_UpdateFooProgressAsync_Call) Run(run func(ctx context.Context, workflowID string, runID string, req *examplev1.SetFooProgressRequest, opts ...*examplev1.UpdateFooProgressOptions)) *MockExampleClient_UpdateFooProgressAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*examplev1.UpdateFooProgressOptions, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(*examplev1.UpdateFooProgressOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*examplev1.SetFooProgressRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExampleClient_UpdateFooProgressAsync_Call) Return(_a0 examplev1.UpdateFooProgressHandle, _a1 error) *MockExampleClient_UpdateFooProgressAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleClient_UpdateFooProgressAsync_Call) RunAndReturn(run func(context.Context, string, string, *examplev1.SetFooProgressRequest, ...*examplev1.UpdateFooProgressOptions) (examplev1.UpdateFooProgressHandle, error)) *MockExampleClient_UpdateFooProgressAsync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExampleClient creates a new instance of MockExampleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExampleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExampleClient {
	mock := &MockExampleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
