// Code generated by mockery v2.51.0. DO NOT EDIT.

package v1

import (
	commonv1 "github.com/cludden/protoc-gen-go-temporal/gen/test/simple/common/v1"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cludden/protoc-gen-go-temporal/gen/test/simple/v1"

	workflow "go.temporal.io/sdk/workflow"
)

// MockSimpleWorkflowFunctions is an autogenerated mock type for the SimpleWorkflowFunctions type
type MockSimpleWorkflowFunctions struct {
	mock.Mock
}

type MockSimpleWorkflowFunctions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSimpleWorkflowFunctions) EXPECT() *MockSimpleWorkflowFunctions_Expecter {
	return &MockSimpleWorkflowFunctions_Expecter{mock: &_m.Mock}
}

// SomeWorkflow1 provides a mock function with given fields: _a0, _a1
func (_m *MockSimpleWorkflowFunctions) SomeWorkflow1(_a0 workflow.Context, _a1 *v1.SomeWorkflow1Request) (*v1.SomeWorkflow1Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow1")
	}

	var r0 *v1.SomeWorkflow1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(workflow.Context, *v1.SomeWorkflow1Request) (*v1.SomeWorkflow1Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(workflow.Context, *v1.SomeWorkflow1Request) *v1.SomeWorkflow1Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.SomeWorkflow1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(workflow.Context, *v1.SomeWorkflow1Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleWorkflowFunctions_SomeWorkflow1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow1'
type MockSimpleWorkflowFunctions_SomeWorkflow1_Call struct {
	*mock.Call
}

// SomeWorkflow1 is a helper method to define mock.On call
//   - _a0 workflow.Context
//   - _a1 *v1.SomeWorkflow1Request
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow1(_a0 interface{}, _a1 interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow1_Call{Call: _e.mock.On("SomeWorkflow1", _a0, _a1)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow1_Call) Run(run func(_a0 workflow.Context, _a1 *v1.SomeWorkflow1Request)) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workflow.Context), args[1].(*v1.SomeWorkflow1Request))
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow1_Call) Return(_a0 *v1.SomeWorkflow1Response, _a1 error) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow1_Call) RunAndReturn(run func(workflow.Context, *v1.SomeWorkflow1Request) (*v1.SomeWorkflow1Response, error)) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	_c.Call.Return(run)
	return _c
}

// SomeWorkflow2 provides a mock function with given fields: _a0
func (_m *MockSimpleWorkflowFunctions) SomeWorkflow2(_a0 workflow.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(workflow.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSimpleWorkflowFunctions_SomeWorkflow2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow2'
type MockSimpleWorkflowFunctions_SomeWorkflow2_Call struct {
	*mock.Call
}

// SomeWorkflow2 is a helper method to define mock.On call
//   - _a0 workflow.Context
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow2(_a0 interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow2_Call{Call: _e.mock.On("SomeWorkflow2", _a0)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow2_Call) Run(run func(_a0 workflow.Context)) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workflow.Context))
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow2_Call) Return(_a0 error) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow2_Call) RunAndReturn(run func(workflow.Context) error) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	_c.Call.Return(run)
	return _c
}

// SomeWorkflow3 provides a mock function with given fields: _a0, _a1
func (_m *MockSimpleWorkflowFunctions) SomeWorkflow3(_a0 workflow.Context, _a1 *v1.SomeWorkflow3Request) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow3")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(workflow.Context, *v1.SomeWorkflow3Request) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSimpleWorkflowFunctions_SomeWorkflow3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow3'
type MockSimpleWorkflowFunctions_SomeWorkflow3_Call struct {
	*mock.Call
}

// SomeWorkflow3 is a helper method to define mock.On call
//   - _a0 workflow.Context
//   - _a1 *v1.SomeWorkflow3Request
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow3(_a0 interface{}, _a1 interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow3_Call{Call: _e.mock.On("SomeWorkflow3", _a0, _a1)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow3_Call) Run(run func(_a0 workflow.Context, _a1 *v1.SomeWorkflow3Request)) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workflow.Context), args[1].(*v1.SomeWorkflow3Request))
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow3_Call) Return(_a0 error) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow3_Call) RunAndReturn(run func(workflow.Context, *v1.SomeWorkflow3Request) error) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	_c.Call.Return(run)
	return _c
}

// SomeWorkflow4 provides a mock function with given fields: _a0, _a1
func (_m *MockSimpleWorkflowFunctions) SomeWorkflow4(_a0 workflow.Context, _a1 *commonv1.PaginatedRequest) (*commonv1.PaginatedResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow4")
	}

	var r0 *commonv1.PaginatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(workflow.Context, *commonv1.PaginatedRequest) (*commonv1.PaginatedResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(workflow.Context, *commonv1.PaginatedRequest) *commonv1.PaginatedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonv1.PaginatedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(workflow.Context, *commonv1.PaginatedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleWorkflowFunctions_SomeWorkflow4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow4'
type MockSimpleWorkflowFunctions_SomeWorkflow4_Call struct {
	*mock.Call
}

// SomeWorkflow4 is a helper method to define mock.On call
//   - _a0 workflow.Context
//   - _a1 *commonv1.PaginatedRequest
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow4(_a0 interface{}, _a1 interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow4_Call{Call: _e.mock.On("SomeWorkflow4", _a0, _a1)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow4_Call) Run(run func(_a0 workflow.Context, _a1 *commonv1.PaginatedRequest)) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workflow.Context), args[1].(*commonv1.PaginatedRequest))
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow4_Call) Return(_a0 *commonv1.PaginatedResponse, _a1 error) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow4_Call) RunAndReturn(run func(workflow.Context, *commonv1.PaginatedRequest) (*commonv1.PaginatedResponse, error)) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSimpleWorkflowFunctions creates a new instance of MockSimpleWorkflowFunctions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSimpleWorkflowFunctions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSimpleWorkflowFunctions {
	mock := &MockSimpleWorkflowFunctions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
