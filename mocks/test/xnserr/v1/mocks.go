// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package xnserrv1mocks

import (
	"context"

	"github.com/cludden/protoc-gen-go-temporal/gen/test/xnserr/v1"
	mock "github.com/stretchr/testify/mock"
	"go.temporal.io/sdk/client"
)

// NewMockServerClient creates a new instance of MockServerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerClient {
	mock := &MockServerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServerClient is an autogenerated mock type for the ServerClient type
type MockServerClient struct {
	mock.Mock
}

type MockServerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerClient) EXPECT() *MockServerClient_Expecter {
	return &MockServerClient_Expecter{mock: &_m.Mock}
}

// CancelWorkflow provides a mock function for the type MockServerClient
func (_mock *MockServerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	ret := _mock.Called(ctx, workflowID, runID)

	if len(ret) == 0 {
		panic("no return value specified for CancelWorkflow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, workflowID, runID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServerClient_CancelWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkflow'
type MockServerClient_CancelWorkflow_Call struct {
	*mock.Call
}

// CancelWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockServerClient_Expecter) CancelWorkflow(ctx interface{}, workflowID interface{}, runID interface{}) *MockServerClient_CancelWorkflow_Call {
	return &MockServerClient_CancelWorkflow_Call{Call: _e.mock.On("CancelWorkflow", ctx, workflowID, runID)}
}

func (_c *MockServerClient_CancelWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockServerClient_CancelWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServerClient_CancelWorkflow_Call) Return(err error) *MockServerClient_CancelWorkflow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServerClient_CancelWorkflow_Call) RunAndReturn(run func(ctx context.Context, workflowID string, runID string) error) *MockServerClient_CancelWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetSleep provides a mock function for the type MockServerClient
func (_mock *MockServerClient) GetSleep(ctx context.Context, workflowID string, runID string) xnserrv1.SleepRun {
	ret := _mock.Called(ctx, workflowID, runID)

	if len(ret) == 0 {
		panic("no return value specified for GetSleep")
	}

	var r0 xnserrv1.SleepRun
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) xnserrv1.SleepRun); ok {
		r0 = returnFunc(ctx, workflowID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(xnserrv1.SleepRun)
		}
	}
	return r0
}

// MockServerClient_GetSleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSleep'
type MockServerClient_GetSleep_Call struct {
	*mock.Call
}

// GetSleep is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockServerClient_Expecter) GetSleep(ctx interface{}, workflowID interface{}, runID interface{}) *MockServerClient_GetSleep_Call {
	return &MockServerClient_GetSleep_Call{Call: _e.mock.On("GetSleep", ctx, workflowID, runID)}
}

func (_c *MockServerClient_GetSleep_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockServerClient_GetSleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServerClient_GetSleep_Call) Return(sleepRun xnserrv1.SleepRun) *MockServerClient_GetSleep_Call {
	_c.Call.Return(sleepRun)
	return _c
}

func (_c *MockServerClient_GetSleep_Call) RunAndReturn(run func(ctx context.Context, workflowID string, runID string) xnserrv1.SleepRun) *MockServerClient_GetSleep_Call {
	_c.Call.Return(run)
	return _c
}

// Sleep provides a mock function for the type MockServerClient
func (_mock *MockServerClient) Sleep(ctx context.Context, req *xnserrv1.SleepRequest, opts ...*xnserrv1.SleepOptions) error {
	// *xnserrv1.SleepOptions
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sleep")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *xnserrv1.SleepRequest, ...*xnserrv1.SleepOptions) error); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServerClient_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockServerClient_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
//   - ctx context.Context
//   - req *xnserrv1.SleepRequest
//   - opts ...*xnserrv1.SleepOptions
func (_e *MockServerClient_Expecter) Sleep(ctx interface{}, req interface{}, opts ...interface{}) *MockServerClient_Sleep_Call {
	return &MockServerClient_Sleep_Call{Call: _e.mock.On("Sleep",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockServerClient_Sleep_Call) Run(run func(ctx context.Context, req *xnserrv1.SleepRequest, opts ...*xnserrv1.SleepOptions)) *MockServerClient_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *xnserrv1.SleepRequest
		if args[1] != nil {
			arg1 = args[1].(*xnserrv1.SleepRequest)
		}
		var arg2 []*xnserrv1.SleepOptions
		variadicArgs := make([]*xnserrv1.SleepOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*xnserrv1.SleepOptions)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServerClient_Sleep_Call) Return(err error) *MockServerClient_Sleep_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServerClient_Sleep_Call) RunAndReturn(run func(ctx context.Context, req *xnserrv1.SleepRequest, opts ...*xnserrv1.SleepOptions) error) *MockServerClient_Sleep_Call {
	_c.Call.Return(run)
	return _c
}

// SleepAsync provides a mock function for the type MockServerClient
func (_mock *MockServerClient) SleepAsync(ctx context.Context, req *xnserrv1.SleepRequest, opts ...*xnserrv1.SleepOptions) (xnserrv1.SleepRun, error) {
	// *xnserrv1.SleepOptions
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SleepAsync")
	}

	var r0 xnserrv1.SleepRun
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *xnserrv1.SleepRequest, ...*xnserrv1.SleepOptions) (xnserrv1.SleepRun, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *xnserrv1.SleepRequest, ...*xnserrv1.SleepOptions) xnserrv1.SleepRun); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(xnserrv1.SleepRun)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *xnserrv1.SleepRequest, ...*xnserrv1.SleepOptions) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServerClient_SleepAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SleepAsync'
type MockServerClient_SleepAsync_Call struct {
	*mock.Call
}

// SleepAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - req *xnserrv1.SleepRequest
//   - opts ...*xnserrv1.SleepOptions
func (_e *MockServerClient_Expecter) SleepAsync(ctx interface{}, req interface{}, opts ...interface{}) *MockServerClient_SleepAsync_Call {
	return &MockServerClient_SleepAsync_Call{Call: _e.mock.On("SleepAsync",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockServerClient_SleepAsync_Call) Run(run func(ctx context.Context, req *xnserrv1.SleepRequest, opts ...*xnserrv1.SleepOptions)) *MockServerClient_SleepAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *xnserrv1.SleepRequest
		if args[1] != nil {
			arg1 = args[1].(*xnserrv1.SleepRequest)
		}
		var arg2 []*xnserrv1.SleepOptions
		variadicArgs := make([]*xnserrv1.SleepOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*xnserrv1.SleepOptions)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServerClient_SleepAsync_Call) Return(sleepRun xnserrv1.SleepRun, err error) *MockServerClient_SleepAsync_Call {
	_c.Call.Return(sleepRun, err)
	return _c
}

func (_c *MockServerClient_SleepAsync_Call) RunAndReturn(run func(ctx context.Context, req *xnserrv1.SleepRequest, opts ...*xnserrv1.SleepOptions) (xnserrv1.SleepRun, error)) *MockServerClient_SleepAsync_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateWorkflow provides a mock function for the type MockServerClient
func (_mock *MockServerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, runID, reason)
	_ca = append(_ca, details...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateWorkflow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) error); ok {
		r0 = returnFunc(ctx, workflowID, runID, reason, details...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServerClient_TerminateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateWorkflow'
type MockServerClient_TerminateWorkflow_Call struct {
	*mock.Call
}

// TerminateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - reason string
//   - details ...interface{}
func (_e *MockServerClient_Expecter) TerminateWorkflow(ctx interface{}, workflowID interface{}, runID interface{}, reason interface{}, details ...interface{}) *MockServerClient_TerminateWorkflow_Call {
	return &MockServerClient_TerminateWorkflow_Call{Call: _e.mock.On("TerminateWorkflow",
		append([]interface{}{ctx, workflowID, runID, reason}, details...)...)}
}

func (_c *MockServerClient_TerminateWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string, reason string, details ...interface{})) *MockServerClient_TerminateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []interface{}
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockServerClient_TerminateWorkflow_Call) Return(err error) *MockServerClient_TerminateWorkflow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServerClient_TerminateWorkflow_Call) RunAndReturn(run func(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error) *MockServerClient_TerminateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSleepRun creates a new instance of MockSleepRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSleepRun(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSleepRun {
	mock := &MockSleepRun{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSleepRun is an autogenerated mock type for the SleepRun type
type MockSleepRun struct {
	mock.Mock
}

type MockSleepRun_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSleepRun) EXPECT() *MockSleepRun_Expecter {
	return &MockSleepRun_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function for the type MockSleepRun
func (_mock *MockSleepRun) Cancel(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSleepRun_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockSleepRun_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSleepRun_Expecter) Cancel(ctx interface{}) *MockSleepRun_Cancel_Call {
	return &MockSleepRun_Cancel_Call{Call: _e.mock.On("Cancel", ctx)}
}

func (_c *MockSleepRun_Cancel_Call) Run(run func(ctx context.Context)) *MockSleepRun_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSleepRun_Cancel_Call) Return(err error) *MockSleepRun_Cancel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSleepRun_Cancel_Call) RunAndReturn(run func(ctx context.Context) error) *MockSleepRun_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSleepRun
func (_mock *MockSleepRun) Get(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSleepRun_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSleepRun_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSleepRun_Expecter) Get(ctx interface{}) *MockSleepRun_Get_Call {
	return &MockSleepRun_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockSleepRun_Get_Call) Run(run func(ctx context.Context)) *MockSleepRun_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSleepRun_Get_Call) Return(err error) *MockSleepRun_Get_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSleepRun_Get_Call) RunAndReturn(run func(ctx context.Context) error) *MockSleepRun_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockSleepRun
func (_mock *MockSleepRun) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSleepRun_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockSleepRun_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockSleepRun_Expecter) ID() *MockSleepRun_ID_Call {
	return &MockSleepRun_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockSleepRun_ID_Call) Run(run func()) *MockSleepRun_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSleepRun_ID_Call) Return(s string) *MockSleepRun_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSleepRun_ID_Call) RunAndReturn(run func() string) *MockSleepRun_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockSleepRun
func (_mock *MockSleepRun) Run() client.WorkflowRun {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 client.WorkflowRun
	if returnFunc, ok := ret.Get(0).(func() client.WorkflowRun); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.WorkflowRun)
		}
	}
	return r0
}

// MockSleepRun_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockSleepRun_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockSleepRun_Expecter) Run() *MockSleepRun_Run_Call {
	return &MockSleepRun_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockSleepRun_Run_Call) Run(run func()) *MockSleepRun_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSleepRun_Run_Call) Return(v client.WorkflowRun) *MockSleepRun_Run_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockSleepRun_Run_Call) RunAndReturn(run func() client.WorkflowRun) *MockSleepRun_Run_Call {
	_c.Call.Return(run)
	return _c
}

// RunID provides a mock function for the type MockSleepRun
func (_mock *MockSleepRun) RunID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RunID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSleepRun_RunID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunID'
type MockSleepRun_RunID_Call struct {
	*mock.Call
}

// RunID is a helper method to define mock.On call
func (_e *MockSleepRun_Expecter) RunID() *MockSleepRun_RunID_Call {
	return &MockSleepRun_RunID_Call{Call: _e.mock.On("RunID")}
}

func (_c *MockSleepRun_RunID_Call) Run(run func()) *MockSleepRun_RunID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSleepRun_RunID_Call) Return(s string) *MockSleepRun_RunID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSleepRun_RunID_Call) RunAndReturn(run func() string) *MockSleepRun_RunID_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type MockSleepRun
func (_mock *MockSleepRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, reason)
	_ca = append(_ca, details...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = returnFunc(ctx, reason, details...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSleepRun_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type MockSleepRun_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
//   - reason string
//   - details ...interface{}
func (_e *MockSleepRun_Expecter) Terminate(ctx interface{}, reason interface{}, details ...interface{}) *MockSleepRun_Terminate_Call {
	return &MockSleepRun_Terminate_Call{Call: _e.mock.On("Terminate",
		append([]interface{}{ctx, reason}, details...)...)}
}

func (_c *MockSleepRun_Terminate_Call) Run(run func(ctx context.Context, reason string, details ...interface{})) *MockSleepRun_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSleepRun_Terminate_Call) Return(err error) *MockSleepRun_Terminate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSleepRun_Terminate_Call) RunAndReturn(run func(ctx context.Context, reason string, details ...interface{}) error) *MockSleepRun_Terminate_Call {
	_c.Call.Return(run)
	return _c
}
