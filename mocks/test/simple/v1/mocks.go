// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package simplev1mocks

import (
	"github.com/cludden/protoc-gen-go-temporal/gen/test/simple/common/v1"
	"github.com/cludden/protoc-gen-go-temporal/gen/test/simple/v1"
	mock "github.com/stretchr/testify/mock"
	"go.temporal.io/sdk/workflow"
)

// NewMockSimpleWorkflowFunctions creates a new instance of MockSimpleWorkflowFunctions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSimpleWorkflowFunctions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSimpleWorkflowFunctions {
	mock := &MockSimpleWorkflowFunctions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSimpleWorkflowFunctions is an autogenerated mock type for the SimpleWorkflowFunctions type
type MockSimpleWorkflowFunctions struct {
	mock.Mock
}

type MockSimpleWorkflowFunctions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSimpleWorkflowFunctions) EXPECT() *MockSimpleWorkflowFunctions_Expecter {
	return &MockSimpleWorkflowFunctions_Expecter{mock: &_m.Mock}
}

// SomeWorkflow1 provides a mock function for the type MockSimpleWorkflowFunctions
func (_mock *MockSimpleWorkflowFunctions) SomeWorkflow1(v workflow.Context, someWorkflow1Request *v1.SomeWorkflow1Request) (*v1.SomeWorkflow1Response, error) {
	ret := _mock.Called(v, someWorkflow1Request)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow1")
	}

	var r0 *v1.SomeWorkflow1Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(workflow.Context, *v1.SomeWorkflow1Request) (*v1.SomeWorkflow1Response, error)); ok {
		return returnFunc(v, someWorkflow1Request)
	}
	if returnFunc, ok := ret.Get(0).(func(workflow.Context, *v1.SomeWorkflow1Request) *v1.SomeWorkflow1Response); ok {
		r0 = returnFunc(v, someWorkflow1Request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.SomeWorkflow1Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(workflow.Context, *v1.SomeWorkflow1Request) error); ok {
		r1 = returnFunc(v, someWorkflow1Request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSimpleWorkflowFunctions_SomeWorkflow1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow1'
type MockSimpleWorkflowFunctions_SomeWorkflow1_Call struct {
	*mock.Call
}

// SomeWorkflow1 is a helper method to define mock.On call
//   - v workflow.Context
//   - someWorkflow1Request *v1.SomeWorkflow1Request
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow1(v interface{}, someWorkflow1Request interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow1_Call{Call: _e.mock.On("SomeWorkflow1", v, someWorkflow1Request)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow1_Call) Run(run func(v workflow.Context, someWorkflow1Request *v1.SomeWorkflow1Request)) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 workflow.Context
		if args[0] != nil {
			arg0 = args[0].(workflow.Context)
		}
		var arg1 *v1.SomeWorkflow1Request
		if args[1] != nil {
			arg1 = args[1].(*v1.SomeWorkflow1Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow1_Call) Return(someWorkflow1Response *v1.SomeWorkflow1Response, err error) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	_c.Call.Return(someWorkflow1Response, err)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow1_Call) RunAndReturn(run func(v workflow.Context, someWorkflow1Request *v1.SomeWorkflow1Request) (*v1.SomeWorkflow1Response, error)) *MockSimpleWorkflowFunctions_SomeWorkflow1_Call {
	_c.Call.Return(run)
	return _c
}

// SomeWorkflow2 provides a mock function for the type MockSimpleWorkflowFunctions
func (_mock *MockSimpleWorkflowFunctions) SomeWorkflow2(v workflow.Context) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow2")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(workflow.Context) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSimpleWorkflowFunctions_SomeWorkflow2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow2'
type MockSimpleWorkflowFunctions_SomeWorkflow2_Call struct {
	*mock.Call
}

// SomeWorkflow2 is a helper method to define mock.On call
//   - v workflow.Context
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow2(v interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow2_Call{Call: _e.mock.On("SomeWorkflow2", v)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow2_Call) Run(run func(v workflow.Context)) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 workflow.Context
		if args[0] != nil {
			arg0 = args[0].(workflow.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow2_Call) Return(err error) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow2_Call) RunAndReturn(run func(v workflow.Context) error) *MockSimpleWorkflowFunctions_SomeWorkflow2_Call {
	_c.Call.Return(run)
	return _c
}

// SomeWorkflow3 provides a mock function for the type MockSimpleWorkflowFunctions
func (_mock *MockSimpleWorkflowFunctions) SomeWorkflow3(v workflow.Context, someWorkflow3Request *v1.SomeWorkflow3Request) error {
	ret := _mock.Called(v, someWorkflow3Request)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow3")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(workflow.Context, *v1.SomeWorkflow3Request) error); ok {
		r0 = returnFunc(v, someWorkflow3Request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSimpleWorkflowFunctions_SomeWorkflow3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow3'
type MockSimpleWorkflowFunctions_SomeWorkflow3_Call struct {
	*mock.Call
}

// SomeWorkflow3 is a helper method to define mock.On call
//   - v workflow.Context
//   - someWorkflow3Request *v1.SomeWorkflow3Request
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow3(v interface{}, someWorkflow3Request interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow3_Call{Call: _e.mock.On("SomeWorkflow3", v, someWorkflow3Request)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow3_Call) Run(run func(v workflow.Context, someWorkflow3Request *v1.SomeWorkflow3Request)) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 workflow.Context
		if args[0] != nil {
			arg0 = args[0].(workflow.Context)
		}
		var arg1 *v1.SomeWorkflow3Request
		if args[1] != nil {
			arg1 = args[1].(*v1.SomeWorkflow3Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow3_Call) Return(err error) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow3_Call) RunAndReturn(run func(v workflow.Context, someWorkflow3Request *v1.SomeWorkflow3Request) error) *MockSimpleWorkflowFunctions_SomeWorkflow3_Call {
	_c.Call.Return(run)
	return _c
}

// SomeWorkflow4 provides a mock function for the type MockSimpleWorkflowFunctions
func (_mock *MockSimpleWorkflowFunctions) SomeWorkflow4(v workflow.Context, paginatedRequest *commonv1.PaginatedRequest) (*commonv1.PaginatedResponse, error) {
	ret := _mock.Called(v, paginatedRequest)

	if len(ret) == 0 {
		panic("no return value specified for SomeWorkflow4")
	}

	var r0 *commonv1.PaginatedResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(workflow.Context, *commonv1.PaginatedRequest) (*commonv1.PaginatedResponse, error)); ok {
		return returnFunc(v, paginatedRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(workflow.Context, *commonv1.PaginatedRequest) *commonv1.PaginatedResponse); ok {
		r0 = returnFunc(v, paginatedRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonv1.PaginatedResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(workflow.Context, *commonv1.PaginatedRequest) error); ok {
		r1 = returnFunc(v, paginatedRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSimpleWorkflowFunctions_SomeWorkflow4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SomeWorkflow4'
type MockSimpleWorkflowFunctions_SomeWorkflow4_Call struct {
	*mock.Call
}

// SomeWorkflow4 is a helper method to define mock.On call
//   - v workflow.Context
//   - paginatedRequest *commonv1.PaginatedRequest
func (_e *MockSimpleWorkflowFunctions_Expecter) SomeWorkflow4(v interface{}, paginatedRequest interface{}) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	return &MockSimpleWorkflowFunctions_SomeWorkflow4_Call{Call: _e.mock.On("SomeWorkflow4", v, paginatedRequest)}
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow4_Call) Run(run func(v workflow.Context, paginatedRequest *commonv1.PaginatedRequest)) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 workflow.Context
		if args[0] != nil {
			arg0 = args[0].(workflow.Context)
		}
		var arg1 *commonv1.PaginatedRequest
		if args[1] != nil {
			arg1 = args[1].(*commonv1.PaginatedRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow4_Call) Return(paginatedResponse *commonv1.PaginatedResponse, err error) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	_c.Call.Return(paginatedResponse, err)
	return _c
}

func (_c *MockSimpleWorkflowFunctions_SomeWorkflow4_Call) RunAndReturn(run func(v workflow.Context, paginatedRequest *commonv1.PaginatedRequest) (*commonv1.PaginatedResponse, error)) *MockSimpleWorkflowFunctions_SomeWorkflow4_Call {
	_c.Call.Return(run)
	return _c
}
