"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[585],{5307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>u,metadata:()=>c,toc:()=>m});var o=n(4848),r=n(8453),l=n(1432);const i="syntax=\"proto3\";\n\npackage example.mutex.v1;\n\nimport \"google/protobuf/duration.proto\";\nimport \"google/protobuf/empty.proto\";\nimport \"temporal/v1/temporal.proto\";\n\nservice Example {\n  option (temporal.v1.service) = {\n    task_queue: \"mutex\"\n  };\n\n  rpc AcquireLock(AcquireLockInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n\n  rpc LockAcquired(LockAcquiredInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n\n  rpc Mutex(MutexInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      id: 'mutex:${! resourceId }'\n      retry_policy: {\n        initial_interval: { seconds: 1 }\n        backoff_coefficient: 2.0\n        max_interval: { seconds: 60 }\n        max_attempts: 5\n      }\n      signal: { ref: 'AcquireLock', start: true }\n      signal: { ref: 'ReleaseLock' }\n    };\n    option (temporal.v1.activity) = {\n      start_to_close_timeout: { seconds: 10 }\n    };\n  }\n\n  rpc ReleaseLock(ReleaseLockInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n\n  rpc SampleWorkflowWithMutex(SampleWorkflowWithMutexInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      id: 'SampleWorkflow1WithMutex_${! uuid_v4() }'\n      signal: { ref: 'LockAcquired' }\n    };\n  }\n}\n\nmessage MutexInput {\n  string resource_id = 1;\n}\n\nmessage AcquireLockInput {\n  string workflow_id = 1;\n  google.protobuf.Duration timeout = 2;\n}\n\nmessage LockAcquiredInput {\n  string lease_id = 1;\n}\n\nmessage ReleaseLockInput {\n  string lease_id = 1;\n}\n\nmessage SampleWorkflowWithMutexInput {\n  string resource_id = 1;\n  google.protobuf.Duration sleep = 2;\n}\n",s='package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"os"\n\t"time"\n\n\tmutexv1 "github.com/cludden/protoc-gen-go-temporal/gen/example/mutex/v1"\n\t"github.com/cludden/protoc-gen-go-temporal/gen/example/mutex/v1/mutexv1xns"\n\t"github.com/google/uuid"\n\t"github.com/urfave/cli/v2"\n\t"go.temporal.io/sdk/client"\n\ttlog "go.temporal.io/sdk/log"\n\t"go.temporal.io/sdk/worker"\n\t"go.temporal.io/sdk/workflow"\n\t"google.golang.org/protobuf/types/known/durationpb"\n)\n\ntype Workflows struct{}\n\ntype MutexWorkflow struct {\n\t*mutexv1.MutexWorkflowInput\n\tlog tlog.Logger\n}\n\nfunc (w *Workflows) Mutex(ctx workflow.Context, input *mutexv1.MutexWorkflowInput) (mutexv1.MutexWorkflow, error) {\n\treturn &MutexWorkflow{input, workflow.GetLogger(ctx)}, nil\n}\n\nfunc (w *MutexWorkflow) Execute(ctx workflow.Context) error {\n\tfor {\n\t\treq := w.AcquireLock.ReceiveAsync()\n\t\tif req == nil {\n\t\t\tw.log.Info("no more signals")\n\t\t\treturn nil\n\t\t}\n\n\t\tvar leaseID string\n\t\tif err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {\n\t\t\treturn uuid.NewString()\n\t\t}).Get(&leaseID); err != nil {\n\t\t\treturn fmt.Errorf("error generating lease id: %w", err)\n\t\t}\n\n\t\tif err := mutexv1.LockAcquiredExternal(ctx, req.GetWorkflowId(), "", &mutexv1.LockAcquiredInput{\n\t\t\tLeaseId: leaseID,\n\t\t}); err != nil {\n\t\t\treturn fmt.Errorf("error signaling lock acquired: %w", err)\n\t\t}\n\n\t\ttimerCtx, cancelTimer := workflow.WithCancel(ctx)\n\t\tfor done := false; !done; {\n\t\t\tworkflow.NewSelector(ctx).\n\t\t\t\tAddFuture(workflow.NewTimer(timerCtx, req.GetTimeout().AsDuration()), func(workflow.Future) {\n\t\t\t\t\tw.log.Info("lease expired")\n\t\t\t\t\tdone = true\n\t\t\t\t}).\n\t\t\t\tAddReceive(w.ReleaseLock.Channel, func(workflow.ReceiveChannel, bool) {\n\t\t\t\t\tif release := w.ReleaseLock.ReceiveAsync(); release.GetLeaseId() == leaseID {\n\t\t\t\t\t\tcancelTimer()\n\t\t\t\t\t\tdone = true\n\t\t\t\t\t}\n\t\t\t\t}).\n\t\t\t\tSelect(ctx)\n\t\t}\n\t}\n}\n\ntype SampleWorkflowWithMutexWorkflow struct {\n\t*mutexv1.SampleWorkflowWithMutexWorkflowInput\n\tlog tlog.Logger\n}\n\nfunc (w *Workflows) SampleWorkflowWithMutex(ctx workflow.Context, input *mutexv1.SampleWorkflowWithMutexWorkflowInput) (mutexv1.SampleWorkflowWithMutexWorkflow, error) {\n\treturn &SampleWorkflowWithMutexWorkflow{input, workflow.GetLogger(ctx)}, nil\n}\n\nfunc (w *SampleWorkflowWithMutexWorkflow) Execute(ctx workflow.Context) error {\n\tw.log.Info("started", "resourceID", w.Req.GetResourceId())\n\tmutex, err := mutexv1xns.MutexWithAcquireLockAsync(\n\t\tctx,\n\t\t&mutexv1.MutexInput{ResourceId: w.Req.GetResourceId()},\n\t\t&mutexv1.AcquireLockInput{\n\t\t\tWorkflowId: workflow.GetInfo(ctx).WorkflowExecution.ID,\n\t\t\tTimeout:    durationpb.New(time.Minute * 10),\n\t\t},\n\t\tmutexv1xns.NewMutexWorkflowOptions().WithDetached(true),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlease, _ := w.LockAcquired.Receive(ctx)\n\tdefer func() {\n\t\tif err := mutex.ReleaseLock(ctx, &mutexv1.ReleaseLockInput{LeaseId: lease.GetLeaseId()}); err != nil {\n\t\t\tw.log.Error("failed to release lock", "error", err)\n\t\t}\n\t\tw.log.Info("finished")\n\t}()\n\tw.log.Info("resource lock acquired", "leaseID", lease.GetLeaseId())\n\n\tw.log.Info("critical operation started")\n\td := w.Req.GetSleep().AsDuration()\n\tif d == 0 {\n\t\td = time.Second * 10\n\t}\n\terr = workflow.Sleep(ctx, d)\n\tw.log.Info("critical operation finished")\n\treturn err\n}\n\nfunc main() {\n\tapp, err := mutexv1.NewExampleCli(\n\t\tmutexv1.NewExampleCliOptions().WithWorker(func(cmd *cli.Context, c client.Client) (worker.Worker, error) {\n\t\t\tw := worker.New(c, mutexv1.ExampleTaskQueue, worker.Options{})\n\t\t\tmutexv1.RegisterExampleWorkflows(w, &Workflows{})\n\t\t\tmutexv1xns.RegisterExampleActivities(w, mutexv1.NewExampleClient(c))\n\t\t\treturn w, nil\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif err := app.Run(os.Args); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n',u={},a="Hello World",c={id:"examples/mutex",title:"Hello World",description:"A simple example inspired by temporalio/samples-go/mutex",source:"@site/docs/examples/mutex.mdx",sourceDirName:"examples",slug:"/examples/mutex",permalink:"/protoc-gen-go-temporal/docs/examples/mutex",draft:!1,unlisted:!1,editUrl:"https://github.com/cludden/protoc-gen-go-temporal/tree/main/docs/docs/examples/mutex.mdx",tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:"Cross-Namespace",permalink:"/protoc-gen-go-temporal/docs/examples/xns"},next:{title:"Search Attributes",permalink:"/protoc-gen-go-temporal/docs/examples/searchattributes"}},p={},m=[{value:"Run this example",id:"run-this-example",level:2}];function x(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"hello-world",children:"Hello World"}),"\n",(0,o.jsxs)(t.p,{children:["A simple example inspired by ",(0,o.jsx)(t.a,{href:"https://github.com/temporalio/samples-go/tree/main/mutex",children:"temporalio/samples-go/mutex"})]}),"\n",(0,o.jsx)(l.A,{language:"protobuf",title:"example.proto",children:i}),"\n",(0,o.jsx)(l.A,{language:"go",title:"main.go",children:s}),"\n",(0,o.jsx)(t.h2,{id:"run-this-example",children:"Run this example"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Clone the examples","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sh",children:"git clone https://github.com/cludden/protoc-gen-go-temporal && cd protoc-gen-go-temporal\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["Run a local Temporal server","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sh",children:"temporal server start-dev\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["In a different shell, run the example worker","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"go run examples/mutex/main.go worker\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["In a different shell, execute two or more workflows with the same resource-id","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"go run examples/mutex/main.go sample-workflow-with-mutex --resource-id foo -d\ngo run examples/mutex/main.go sample-workflow-with-mutex --resource-id foo -d\n"})}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}}}]);