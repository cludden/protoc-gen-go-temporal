"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4737],{3829:(l,e,o)=>{o.r(e),o.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>u});var t=o(4848),r=o(8453),n=o(1432);const i='syntax="proto3";\n\npackage example.helloworld.v1;\n\nimport "temporal/v1/temporal.proto";\n\nservice HelloWorld {\n  option (temporal.v1.service) = {\n    task_queue: "hello-world"\n  };\n\n  // HelloWorld describes a Temporal workflow and activity with the same name\n  // and signature\n  rpc HelloWorld(HelloWorldInput) returns (HelloWorldOutput) {\n    option (temporal.v1.workflow) = {\n      name: "HelloWorld"\n      id: \'hello_world/${! uuid_v4() }\'\n    };\n    option (temporal.v1.activity) = {\n      name: "HelloWorld"\n      start_to_close_timeout: { seconds: 10 }\n    };\n  }\n}\n\n// HelloWorldInput describes the input to a HelloWorld task\nmessage HelloWorldInput {\n  string name = 1;\n}\n\n// HelloWorldOutput describes the output from a HelloWorld task\nmessage HelloWorldOutput {\n  string result = 1;\n}\n',s='package main\n\nimport (\n\t"context"\n\t"log"\n\t"os"\n\n\thelloworldv1 "github.com/cludden/protoc-gen-go-temporal/gen/example/helloworld/v1"\n\t"github.com/urfave/cli/v2"\n\t"go.temporal.io/sdk/activity"\n\t"go.temporal.io/sdk/client"\n\tsdklog "go.temporal.io/sdk/log"\n\t"go.temporal.io/sdk/worker"\n\t"go.temporal.io/sdk/workflow"\n)\n\ntype (\n\t// HelloWorldWorkflow provides a helloworldv1.HelloWorldWorkflow implementation\n\tHelloWorldWorkflow struct {\n\t\t*helloworldv1.HelloWorldWorkflowInput\n\t\tlog sdklog.Logger\n\t}\n\n\t// Activities provides a helloworldv1.HelloWorldActivities implementation\n\tActivities struct{}\n)\n\n// NewHelloWorldWorkflow initializes a new helloworldv1.HelloWorldWorkflow value\nfunc NewHelloWorldWorkflow(ctx workflow.Context, input *helloworldv1.HelloWorldWorkflowInput) (helloworldv1.HelloWorldWorkflow, error) {\n\treturn &HelloWorldWorkflow{input, workflow.GetLogger(ctx)}, nil\n}\n\n// Execute defines the entrypoint to a HelloWorld workflow\nfunc (w *HelloWorldWorkflow) Execute(ctx workflow.Context) (*helloworldv1.HelloWorldOutput, error) {\n\tresult, err := helloworldv1.HelloWorld(ctx, w.Req)\n\tif err != nil {\n\t\tw.log.Error("Activity failed.", "error", err)\n\t\treturn nil, err\n\t}\n\n\tw.log.Info("HelloWorld workflow completed.", "result", result.GetResult())\n\treturn result, nil\n}\n\n// HelloWorld defines the entrypoint to a HelloWorld activity\nfunc (a *Activities) HelloWorld(ctx context.Context, input *helloworldv1.HelloWorldInput) (*helloworldv1.HelloWorldOutput, error) {\n\tactivity.GetLogger(ctx).Info("Activity", "name", input.GetName())\n\treturn &helloworldv1.HelloWorldOutput{\n\t\tResult: "Hello " + input.GetName() + "!",\n\t}, nil\n}\n\nfunc main() {\n\tapp, err := helloworldv1.NewHelloWorldCli(\n\t\thelloworldv1.NewHelloWorldCliOptions().\n\t\t\tWithWorker(func(cmd *cli.Context, c client.Client) (worker.Worker, error) {\n\t\t\t\tw := worker.New(c, helloworldv1.HelloWorldTaskQueue, worker.Options{})\n\t\t\t\thelloworldv1.RegisterHelloWorldWorkflow(w, NewHelloWorldWorkflow)\n\t\t\t\thelloworldv1.RegisterHelloWorldActivities(w, &Activities{})\n\t\t\t\treturn w, nil\n\t\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif err := app.Run(os.Args); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n',d={},a="Hello World",c={id:"examples/helloworld",title:"Hello World",description:"A simple example inspired by temporalio/samples-go/helloworld",source:"@site/docs/examples/helloworld.mdx",sourceDirName:"examples",slug:"/examples/helloworld",permalink:"/docs/examples/helloworld",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/helloworld.mdx",tags:[],version:"current",frontMatter:{},sidebar:"examples",next:{title:"Codec Server",permalink:"/docs/examples/codecserver"}},p={},u=[{value:"Run this example",id:"run-this-example",level:2}];function m(l){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...l.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"hello-world",children:"Hello World"}),"\n",(0,t.jsxs)(e.p,{children:["A simple example inspired by ",(0,t.jsx)(e.a,{href:"https://github.com/temporalio/samples-go/tree/main/helloworld",children:"temporalio/samples-go/helloworld"})]}),"\n",(0,t.jsx)(n.A,{language:"protobuf",title:"example.proto",children:i}),"\n",(0,t.jsx)(n.A,{language:"go",title:"main.go",children:s}),"\n",(0,t.jsx)(e.h2,{id:"run-this-example",children:"Run this example"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Clone the examples","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sh",children:"git clone https://github.com/cludden/protoc-gen-go-temporal && cd protoc-gen-go-temporal\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Run a local Temporal server","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sh",children:"temporal server start-dev\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Run the example worker","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sh",children:"go run examples/helloworld/main.go worker\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Execute a ",(0,t.jsx)(e.code,{children:"HelloWorld"})," workflow","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sh",children:"go run examples/helloworld/main.go hello-world --name Temporal\n"})}),"\n"]}),"\n"]})]})}function h(l={}){const{wrapper:e}={...(0,r.R)(),...l.components};return e?(0,t.jsx)(e,{...l,children:(0,t.jsx)(m,{...l})}):m(l)}}}]);