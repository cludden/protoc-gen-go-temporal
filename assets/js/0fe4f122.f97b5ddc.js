"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9517],{8562:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>m,contentTitle:()=>u,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var o=r(4848),a=r(8453),n=r(1432);const s="syntax=\"proto3\";\n\npackage example.searchattributes.v1;\n\nimport \"google/protobuf/empty.proto\";\nimport \"google/protobuf/timestamp.proto\";\nimport \"temporal/v1/temporal.proto\";\n\nservice Example {\n  option (temporal.v1.service) = {\n    task_queue: \"searchattributes\"\n  };\n\n  rpc SearchAttributes(SearchAttributesInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      id: 'search_attributes_${! uuid_v4() }'\n      search_attributes:\n        'CustomKeywordField = customKeywordField \\n'\n        'CustomTextField = customTextField \\n'\n        'CustomIntField = customIntField.int64() \\n'\n        'CustomDoubleField = customDoubleField \\n'\n        'CustomBoolField = customBoolField \\n'\n        'CustomDatetimeField = customDatetimeField.ts_parse(\"2006-01-02T15:04:05Z\") \\n'\n    };\n  }\n}\n\nmessage SearchAttributesInput {\n  string custom_keyword_field = 1;\n  string custom_text_field = 2;\n  int64 custom_int_field = 3;\n  double custom_double_field = 4;\n  bool custom_bool_field = 5;\n  google.protobuf.Timestamp custom_datetime_field = 6;\n}\n",l='package main\n\nimport (\n\t"log"\n\t"os"\n\t"strings"\n\t"time"\n\n\tsearchattributesv1 "github.com/cludden/protoc-gen-go-temporal/gen/example/searchattributes/v1"\n\t"github.com/urfave/cli/v2"\n\t"go.temporal.io/sdk/client"\n\t"go.temporal.io/sdk/converter"\n\ttlog "go.temporal.io/sdk/log"\n\t"go.temporal.io/sdk/worker"\n\t"go.temporal.io/sdk/workflow"\n)\n\ntype SearchAttributesWorkflow struct {\n\t*searchattributesv1.SearchAttributesWorkflowInput\n\tlog tlog.Logger\n}\n\nfunc NewSearchAttributesWorkflow(ctx workflow.Context, input *searchattributesv1.SearchAttributesWorkflowInput) (searchattributesv1.SearchAttributesWorkflow, error) {\n\treturn &SearchAttributesWorkflow{input, workflow.GetLogger(ctx)}, nil\n}\n\nfunc (w *SearchAttributesWorkflow) Execute(ctx workflow.Context) (err error) {\n\tsa := workflow.GetInfo(ctx).SearchAttributes\n\tfor _, attr := range strings.Split("CustomBoolField,CustomDatetimeField,CustomDoubleField,CustomIntField,CustomKeywordField,CustomTextField", ",") {\n\t\tif p, ok := sa.IndexedFields[attr]; ok {\n\t\t\tswitch attr {\n\t\t\tcase "CustomBoolField":\n\t\t\t\tvar result bool\n\t\t\t\terr = converter.GetDefaultDataConverter().FromPayload(p, &result)\n\t\t\t\tw.log.Info("search attribute", "name", attr, "value", result, "error", err)\n\t\t\tcase "CustomDatetimeField":\n\t\t\t\tvar result time.Time\n\t\t\t\terr = converter.GetDefaultDataConverter().FromPayload(p, &result)\n\t\t\t\tw.log.Info("search attribute", "name", attr, "value", result, "error", err)\n\t\t\tcase "CustomDoubleField":\n\t\t\t\tvar result float64\n\t\t\t\terr = converter.GetDefaultDataConverter().FromPayload(p, &result)\n\t\t\t\tw.log.Info("search attribute", "name", attr, "value", result, "error", err)\n\t\t\tcase "CustomIntField":\n\t\t\t\tvar result int\n\t\t\t\terr = converter.GetDefaultDataConverter().FromPayload(p, &result)\n\t\t\t\tw.log.Info("search attribute", "name", attr, "value", result, "error", err)\n\t\t\tcase "CustomKeywordField":\n\t\t\t\tvar result string\n\t\t\t\terr = converter.GetDefaultDataConverter().FromPayload(p, &result)\n\t\t\t\tw.log.Info("search attribute", "name", attr, "value", result, "error", err)\n\t\t\tcase "CustomTextField":\n\t\t\t\tvar result string\n\t\t\t\terr = converter.GetDefaultDataConverter().FromPayload(p, &result)\n\t\t\t\tw.log.Info("search attribute", "name", attr, "value", result, "error", err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tapp, err := searchattributesv1.NewExampleCli(\n\t\tsearchattributesv1.NewExampleCliOptions().WithWorker(func(cmd *cli.Context, c client.Client) (worker.Worker, error) {\n\t\t\tw := worker.New(c, searchattributesv1.ExampleTaskQueue, worker.Options{})\n\t\t\tsearchattributesv1.RegisterSearchAttributesWorkflow(w, NewSearchAttributesWorkflow)\n\t\t\treturn w, nil\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := app.Run(os.Args); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n',i={},u="Search Attributes",c={id:"examples/searchattributes",title:"Search Attributes",description:"A simple example inspired by temporalio/samples-go/searchattributes",source:"@site/docs/examples/searchattributes.mdx",sourceDirName:"examples",slug:"/examples/searchattributes",permalink:"/docs/examples/searchattributes",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/searchattributes.mdx",tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:"Codec Server",permalink:"/docs/examples/codecserver"},next:{title:"Updatable Timer",permalink:"/docs/examples/updatabletimer"}},m={},p=[{value:"Run this example",id:"run-this-example",level:2}];function d(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"search-attributes",children:"Search Attributes"}),"\n",(0,o.jsxs)(e.p,{children:["A simple example inspired by ",(0,o.jsx)(e.a,{href:"https://github.com/temporalio/samples-go/tree/main/searchattributes",children:"temporalio/samples-go/searchattributes"})]}),"\n",(0,o.jsx)(n.A,{language:"protobuf",title:"example.proto",children:s}),"\n",(0,o.jsx)(n.A,{language:"go",title:"main.go",children:l}),"\n",(0,o.jsx)(e.h2,{id:"run-this-example",children:"Run this example"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["Clone the examples","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"git clone https://github.com/cludden/protoc-gen-go-temporal && cd protoc-gen-go-temporal\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Run a local Temporal server","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"temporal server start-dev\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["In a different shell, register custom search attributes and run the example worker","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:"temporal operator search-attribute create --name CustomDatetimeField --type Datetime\ntemporal operator search-attribute create --name CustomKeywordField --type Keyword\ntemporal operator search-attribute create --name CustomTextField --type Text\ntemporal operator search-attribute create --name CustomIntField --type Int\ntemporal operator search-attribute create --name CustomDoubleField --type Double\ntemporal operator search-attribute create --name CustomBoolField --type Bool\ngo run examples/searchattributes/main.go worker\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["In a different shell, execute the workflow","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:"go run examples/searchattributes/main.go search-attributes \\\n    --custom-datetime-field=2024-01-01T00:00:00Z \\\n    --custom-keyword-field=foo-bar \\\n    --custom-text-field=foo-bar \\\n    --custom-int-field=42 \\\n    --custom-double-field=42 \\\n    --custom-bool-field=true\n"})}),"\n"]}),"\n"]})]})}function h(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}}}]);