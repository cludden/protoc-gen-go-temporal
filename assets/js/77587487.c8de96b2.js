"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8232],{9339:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var o=r(4848),t=r(8453);const l={},i="Reference",c={id:"reference",title:"Reference",description:"This page provides an overview of the Go code generated by protoc-gen-go_temporal.",source:"@site/docs/reference.md",sourceDirName:".",slug:"/reference",permalink:"/docs/reference",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Workflows",permalink:"/docs/guides/workflows"}},s={},a=[{value:"Constants &amp; Variables",id:"constants--variables",level:2},{value:"ActivityName",id:"activityname",level:3},{value:"QueryName",id:"queryname",level:3},{value:"SignalName",id:"signalname",level:3},{value:"TaskQueue",id:"taskqueue",level:3},{value:"UpdateIDExpression",id:"updateidexpression",level:3},{value:"UpdateName",id:"updatename",level:3},{value:"WorkflowIDExpression",id:"workflowidexpression",level:3},{value:"WorkflowName",id:"workflowname",level:3},{value:"WorkflowSearchAttributesMapping",id:"workflowsearchattributesmapping",level:3},{value:"Client",id:"client",level:2},{value:"Interface",id:"interface",level:3},{value:"NewClient function",id:"newclient-function",level:4},{value:"NewClientWithOptions function",id:"newclientwithoptions-function",level:4},{value:"GetWorkflow method",id:"getworkflow-method",level:4},{value:"Query method",id:"query-method",level:4},{value:"Signal method",id:"signal-method",level:4},{value:"SignalWithStartWorkflow method",id:"signalwithstartworkflow-method",level:4},{value:"SignalWithStartWorkflow method (asynchronous)",id:"signalwithstartworkflow-method-asynchronous",level:4},{value:"Update method",id:"update-method",level:4},{value:"Update method (asynchronous)",id:"update-method-asynchronous",level:4},{value:"Workflow method",id:"workflow-method",level:4},{value:"Workflow method (asynchronous)",id:"workflow-method-asynchronous",level:4},{value:"UpdateHandle interface",id:"updatehandle-interface",level:3},{value:"Get method",id:"get-method",level:4},{value:"RunID method",id:"runid-method",level:4},{value:"UpdateID method",id:"updateid-method",level:4},{value:"WorkflowID method",id:"workflowid-method",level:4},{value:"WorkflowOptions struct",id:"workflowoptions-struct",level:3},{value:"NewWorkflowOptions function",id:"newworkflowoptions-function",level:4},{value:"WithStartWorkflowOptions method",id:"withstartworkflowoptions-method",level:4},{value:"WorkflowRun interface",id:"workflowrun-interface",level:3},{value:"Cancel method",id:"cancel-method",level:4},{value:"Get method",id:"get-method-1",level:4},{value:"ID method",id:"id-method",level:4},{value:"Query method",id:"query-method-1",level:4},{value:"Run method",id:"run-method",level:4},{value:"RunID method",id:"runid-method-1",level:4},{value:"Signal method",id:"signal-method-1",level:4},{value:"Terminate method",id:"terminate-method",level:4},{value:"Update method",id:"update-method-1",level:4},{value:"Update method (asynchronous)",id:"update-method-asynchronous-1",level:4},{value:"Worker",id:"worker",level:2},{value:"Activities interface",id:"activities-interface",level:3},{value:"RegisterActivities function",id:"registeractivities-function",level:3},{value:"RegisterActivity function",id:"registeractivity-function",level:3},{value:"Activity function",id:"activity-function",level:3},{value:"ActivityAsync function",id:"activityasync-function",level:3},{value:"ActivityLocal function",id:"activitylocal-function",level:3},{value:"ActivityLocalAsync function",id:"activitylocalasync-function",level:3},{value:"ActivityFuture struct",id:"activityfuture-struct",level:3},{value:"Get method",id:"get-method-2",level:4},{value:"Select method",id:"select-method",level:4},{value:"ActivityOptions struct",id:"activityoptions-struct",level:3},{value:"NewActivityOptions function",id:"newactivityoptions-function",level:4},{value:"WithActivityOptions method",id:"withactivityoptions-method",level:4},{value:"LocalActivityOptions struct",id:"localactivityoptions-struct",level:3},{value:"Local method",id:"local-method",level:4},{value:"NewLocalActivityOptions function",id:"newlocalactivityoptions-function",level:4},{value:"WithLocalActivityOptions method",id:"withlocalactivityoptions-method",level:4},{value:"Signal struct",id:"signal-struct",level:3},{value:"Receive method",id:"receive-method",level:4},{value:"ReceiveAsync method",id:"receiveasync-method",level:4},{value:"Select method",id:"select-method-1",level:4},{value:"SignalExternal function",id:"signalexternal-function",level:3},{value:"SignalExternalAsync function",id:"signalexternalasync-function",level:3},{value:"Workflows interface",id:"workflows-interface",level:3},{value:"RegisterWorkflows function",id:"registerworkflows-function",level:3},{value:"RegisterWorkflow function",id:"registerworkflow-function",level:3},{value:"Workflow interface",id:"workflow-interface",level:3},{value:"WorkflowChild function",id:"workflowchild-function",level:3},{value:"WorkflowChildAsync function",id:"workflowchildasync-function",level:3},{value:"WorkflowChildOptions struct",id:"workflowchildoptions-struct",level:3},{value:"NewWorkflowChildOptions function",id:"newworkflowchildoptions-function",level:4},{value:"WithChildWorkflowOptions method",id:"withchildworkflowoptions-method",level:4},{value:"WorkflowInput struct",id:"workflowinput-struct",level:3},{value:"WorkflowChildRun struct",id:"workflowchildrun-struct",level:3},{value:"Get method",id:"get-method-3",level:4},{value:"Select method",id:"select-method-2",level:4},{value:"SelectStart method",id:"selectstart-method",level:4},{value:"Signal method",id:"signal-method-2",level:4},{value:"SignalAsync method",id:"signalasync-method",level:4},{value:"WaitStart method",id:"waitstart-method",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"reference",children:"Reference"}),"\n",(0,o.jsxs)(n.p,{children:["This page provides an overview of the Go code generated by ",(0,o.jsx)(n.code,{children:"protoc-gen-go_temporal"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"constants--variables",children:"Constants & Variables"}),"\n",(0,o.jsx)(n.h3,{id:"activityname",children:"ActivityName"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"const <Activity>ActivityName string\n"})}),"\n",(0,o.jsx)(n.p,{children:"String constants defining the canonical name for each activity"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"queryname",children:"QueryName"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"const <Query>QueryName string\n"})}),"\n",(0,o.jsx)(n.p,{children:"String constants defining the canonical name for each query"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"signalname",children:"SignalName"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"const <Signal>SignalName string\n"})}),"\n",(0,o.jsx)(n.p,{children:"String constants defining the canonical name for each signal"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"taskqueue",children:"TaskQueue"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"const <Service>TaskQueue string\n"})}),"\n",(0,o.jsxs)(n.p,{children:["String constants defining the default task queue name for each service that defines the ",(0,o.jsx)(n.code,{children:"task_queue"})," option"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"updateidexpression",children:"UpdateIDExpression"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"var <Update>IDExpression *expression.Expression\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Expression variable referencing the parsed ID expression for each update that defines the ",(0,o.jsx)(n.code,{children:"id"})," option"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"updatename",children:"UpdateName"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"const <Update>UpdateName string\n"})}),"\n",(0,o.jsx)(n.p,{children:"String constants defining the canonical name for each update"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowidexpression",children:"WorkflowIDExpression"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"var <Workflow>IDExpression *expression.Expression\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Expression variable referencing the parsed ID expression for each workflow that defines the ",(0,o.jsx)(n.code,{children:"id"})," option"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowname",children:"WorkflowName"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"const <Workflow>WorkflowName string\n"})}),"\n",(0,o.jsx)(n.p,{children:"String constant defining the canonical name for each workflow"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowsearchattributesmapping",children:"WorkflowSearchAttributesMapping"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"var <Workflow>SearchAttributesMapping *expression.Expression\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Expression variable referencing the parsed search attributes expression for each workflow that defines the ",(0,o.jsx)(n.code,{children:"search_attributes"})," option"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h2,{id:"client",children:"Client"}),"\n",(0,o.jsx)(n.h3,{id:"interface",children:"Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Service>Client interface {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Interface describing the generated client for each service. A generated client provides typed methods for executing a given service's workflows, queries, signals, and updates."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"package example.v1;\n\nservice Example {\n  option (temporal.v1.service) = {\n    task_queue: 'example-v1'\n  };\n\n  rpc Hello(HelloRequest) returns (HelloResponse) {\n    option (temporal.v1.workflow) = {\n      id: 'hello/${!uuid_v4()}'\n      execution_timeout: { seconds: 5 }\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  // Hello executes a(n) example.v1.Example.Hello workflow and blocks until error\n  // or response received\n  Hello(ctx context.Context, req *HelloRequest, opts ...*HelloOptions) (*HelloResponse, error)\n\n  // HelloAsync starts a(n) example.v1.Example.Hello workflow and returns a handle\n  // to the workflow run\n  HelloAsync(ctx context.Context, req *HelloRequest, opts ...*HelloOptions) (HelloRun, error)\n  \n  // GetHello retrieves a handle to an existing example.v1.Example.Hello workflow\n  // execution\n  GetHello(ctx context.Context, workflowID, runID string) (HelloRun, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"newclient-function",children:"NewClient function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func New<Service>Client(client.Client) <Service>Client\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Constructor function that returns a new ",(0,o.jsx)(n.a,{href:"#interface",children:"client interface"})," implementation for the underlying Temporal client"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  option (temporal.v1.service) = {\n    task_queue: 'example-v1'\n  };\n\n  rpc Hello(HelloRequest) returns (HelloResponse) {\n    option (temporal.v1.workflow) = {\n      id: 'hello/${!uuid_v4()}'\n      execution_timeout: { seconds: 5 }\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'func main() {\n  c, _ := client.Dial(client.Options{})\n  example := examplev1.NewExampleClient(c)\n  resp, _ := example.Hello(context.Background(), &examplev1.HelloRequest{})\n  log.Printf("hello workflow response: %s", resp.String())\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"newclientwithoptions-function",children:"NewClientWithOptions function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func New<Service>ClientWithOptions(client.Client, client.Options) (<Service>Client, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Constructor function that returns a new ",(0,o.jsx)(n.a,{href:"#interface",children:"client interface"})," implementation for the underlying Temporal client and provided client options."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"getworkflow-method",children:"GetWorkflow method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Workflow>With<Signal>Async(\n  ctx context.Context,\n  workflowID string,\n  runID string,\n) (<Workflow>Run, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Returns a ",(0,o.jsx)(n.a,{href:"#workflowrun-interface",children:"WorkflowRun"})," for an existing workflow execution. If an empty string (",(0,o.jsx)(n.code,{children:'""'}),") is provided for ",(0,o.jsx)(n.code,{children:"runID"}),", the latest workflow execution will be used."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(FooRequest) returns (FooResponse) {\n    option (temporal.v1.workflow) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  GetFoo(ctx context.Context, workflowID, runID string) (FooRun, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"query-method",children:"Query method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Query>(\n  ctx context.Context, \n  workflowId string,\n  runId string,\n  [req *<Query>Request],\n) ([*<Query>Response], error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding query on an existing workflow execution using the configured default options. Passing an empty string as the ",(0,o.jsx)(n.code,{children:"runID"})," will target the ",(0,o.jsx)(n.em,{children:"latest"})," workflow execution with ",(0,o.jsx)(n.code,{children:"workflowID"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (FooResponse) {\n    option (temporal.v1.query) = {};\n  }\n\n  rpc Bar(BarRequest) returns (BarResponse) {\n    option (temporal.v1.query) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  Foo(ctx context.Context, workflowID, runID string) error\n  Bar(ctx context.Context, workflowID, runID string, req *BarRequest) (*BarResponse, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"signal-method",children:"Signal method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Signal>(\n  ctx context.Context, \n  workflowID string,\n  runID string,\n  [req *<Signal>Request],\n) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding signal on an existing workflow execution using the configured default options"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  Foo(ctx context.Context, workflowID, runID string) error\n  Bar(ctx context.Context, workflowID, runID string, req *BarRequest) error\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"signalwithstartworkflow-method",children:"SignalWithStartWorkflow method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Workflow>With<Signal>(\n  ctx context.Context,\n  [req *<Workflow>Request],\n  [signal *<Signal>Request],\n  opts ...*<Workflow>Options,\n) ([*<Workflow>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding signal against an existing workflow execution using the configured default options, starting it if necessary, and blocking until the workflow completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(FooRequest) returns (FooResponse) {\n    option (temporal.v1.workflow) = {\n      signal: { ref: 'Bar', start: true }\n    };\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  FooWithBar(\n    ctx context.Context, \n    req *FooRequest, \n    signal *BarRequest, \n    opts ...*FooOptions,\n  ) (*FooResponse, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"signalwithstartworkflow-method-asynchronous",children:"SignalWithStartWorkflow method (asynchronous)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Workflow>With<Signal>Async(\n  ctx context.Context,\n  [req *<Workflow>Request],\n  [signal *<Signal>Request],\n  opts ...*<Workflow>Options,\n) (<Workflow>Run, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding signal against an existing workflow execution using the configured default options, starting it if necessary, and returning a ",(0,o.jsx)(n.a,{href:"#workflowrun-interface",children:"WorkflowRun"})," for the workflow execution"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(FooRequest) returns (FooResponse) {\n    option (temporal.v1.workflow) = {\n      signal: { ref: 'Bar', start: true }\n    };\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  FooWithBarAsync(\n    ctx context.Context, \n    req *FooRequest, \n    signal *BarRequest, \n    opts ...*FooOptions,\n  ) (FooRun, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"update-method",children:"Update method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Update>(\n  ctx context.Context, \n  workflowID string, \n  runID string, \n  [req *<Update>Request],\n  opts ...*<Update>Options,\n) ([*<Update>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding update on an existing workflow execution using the configured default options, blocking until update completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.update) = {};\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.update) = {};\n  }\n\n  rpc Baz(google.protobuf.Empty) returns (BazResponse) {\n    option (temporal.v1.update) = {};\n  }\n\n  rpc Qux(QuxRequest) returns (QuxResponse) {\n    option (temporal.v1.update) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  Foo(ctx context.Context, workflowID, runID string, opts ...*FooOptions) error\n  Bar(ctx context.Context, workflowID, runID string, req *BarRequest, opts ...*BarOptions) error\n  Baz(ctx context.Context, workflowID, runID string, opts ...*BazOptions) (*BazResponse, error)\n  Qux(ctx context.Context, workflowID, runID string, req *QuxRequest, opts ...*QuxOptions) (*QuxResponse, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"update-method-asynchronous",children:"Update method (asynchronous)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Update>Async(\n  ctx context.Context, \n  workflowID string, \n  runID string, \n  [req *<Update>Request],\n  opts ...*<Update>Options,\n) (<Update>Handle, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding update on an existing workflow execution using the configured default options, returning an ",(0,o.jsx)(n.a,{href:"#updatehandle-interface",children:"UpdateHandle"})," for the update execution"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(FooRequest) returns (FooResponse) {\n    option (temporal.v1.update) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  FooAsync(ctx context.Context, workflowID, runID string, req *FooRequest, opts ...*FooOptions) (FooHandle, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"workflow-method",children:"Workflow method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Workflow>(\n  ctx context.Context, \n  [req *<Workflow>Request],\n  opts ...*<Workflow>Options,\n) ([*<Workflow>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding workflow using the configured default options, blocking until workflow completes or errors"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Baz(google.protobuf.Empty) returns (BazResponse) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Qux(QuxRequest) returns (QuxResponse) {\n    option (temporal.v1.workflow) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  Foo(ctx context.Context, opts ...*FooOptions) error\n  Bar(ctx context.Context, req *BarRequest, opts ...*BarOptions) error\n  Baz(ctx context.Context, opts ...*BazOptions) (*BazResponse, error)\n  Qux(ctx context.Context, req *QuxRequest, opts ...*QuxOptions) (*QuxResponse, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"workflow-method-asynchronous",children:"Workflow method (asynchronous)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Service>Client) <Workflow>Async(\n  ctx context.Context, \n  [req *<Workflow>Request],\n  opts ...*<Workflow>Options,\n) (<Workflow>Run, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding workflow using the configured default options, returning a ",(0,o.jsx)(n.a,{href:"#workflowrun-interface",children:"WorkflowRun"})," for the workflow execution"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(FooRequest) returns (FooResponse) {\n    option (temporal.v1.workflow) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleClient interface {\n  FooAsync(ctx context.Context, workflowID, runID string, req *FooRequest, opts ...*FooOptions) (FooRun, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"updatehandle-interface",children:"UpdateHandle interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Update>Handle interface {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Interface describing an update execution handle returned by asynchronous update methods"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"get-method",children:"Get method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Update>Handle) Get(ctx context.Context) ([*<Update>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the update result, blocking until update completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"runid-method",children:"RunID method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Update>Handle) RunID() string\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the workflow execution ID"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"updateid-method",children:"UpdateID method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Update>Handle) UpdateID() string\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the update ID"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"workflowid-method",children:"WorkflowID method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (<Update>Handle) WorkflowID() string\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the workflow ID"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowoptions-struct",children:"WorkflowOptions struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Workflow>Options struct {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Optional configuration for workfow methods"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      execution_timeout: { seconds: 60 }\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func example(ctx context.Context, example examplev1.ExampleClient) error {\n  return example.Foo(ctx, examplev1.NewFooOptions().\n    WithStartWorkflowOptions(client.StartWorkflowOptions{\n      ExecutionTimeout: time.Seconds*30\n    }),\n  )\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"newworkflowoptions-function",children:"NewWorkflowOptions function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func New<Workflow>Options() *<Workflow>Options\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns a new workflow options value for the corresponding workflow"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"withstartworkflowoptions-method",children:"WithStartWorkflowOptions method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>Options) WithStartWorkflowOptions(client.StartWorkflowOptions) *<Workflow>Options\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sets dynamic workflow options for an individual workflow execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowrun-interface",children:"WorkflowRun interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Workflow>Run interface {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Interface describing a workflow execution handle returned by asynchronous workflow methods"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"cancel-method",children:"Cancel method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) Cancel(context.Context) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"Cancels the workflow execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"get-method-1",children:"Get method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) Get(context.Context) ([*<Workflow>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the workflow result, blocking until workflow completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"id-method",children:"ID method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) ID() string\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the workflow ID"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"query-method-1",children:"Query method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) <Query>(context.Context, [*<Query>Request]) ([*<Query>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding query against the workflow execution using the configured default options"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"run-method",children:"Run method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) Run() client.WorkflowRun\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Returns the inner ",(0,o.jsx)(n.a,{href:"https://pkg.go.dev/go.temporal.io/sdk/client#WorkflowRun",children:"client.WorkflowRun"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"runid-method-1",children:"RunID method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) RunID() string\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the workflow execution ID"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"signal-method-1",children:"Signal method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) <Signal>(context.Context, [*<Signal>Request]) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding signal against the workflow execution using the configured default options"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"terminate-method",children:"Terminate method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) Terminate(\n  ctx context.Context,\n  reason string,\n  details ...any,\n) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"Terminates the workflow execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"update-method-1",children:"Update method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) <Update>(\n  context.Context, \n  [*<Update>Request],\n  ...*<Update>Options,\n) ([*<Update>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding update against the workflow execution using the configured default options, blocking until the update completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"update-method-asynchronous-1",children:"Update method (asynchronous)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type (<Workflow>Run) <Update>(\n  context.Context, \n  [*<Update>Request],\n  ...*<Update>Options,\n) (<Update>Handle, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding query against the workflow execution using the configured default options, returning an ",(0,o.jsx)(n.a,{href:"#updatehandle-interface",children:"UpdateHandle"})," for the update execution"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h2,{id:"worker",children:"Worker"}),"\n",(0,o.jsx)(n.h3,{id:"activities-interface",children:"Activities interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Service>Activities interface {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Interface used to describe the required Activities struct implementation"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.activity) = {};\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.activity) = {};\n  }\n\n  rpc Baz(google.protobuf.Empty) returns (BazResponse) {\n    option (temporal.v1.activity) = {};\n  }\n\n  rpc Qux(QuxRequest) returns (QuxResponse) {\n    option (temporal.v1.activity) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleActivities interface {\n  Foo(context.Context) error\n  Bar(context.Context, *BarRequest) error\n  Baz(context.Context) (*BazResponse, error)\n  Qux(context.Context, *QuxRequest) (*QuxResponse, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"registeractivities-function",children:"RegisterActivities function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Register<Service>Activities(worker.ActivityRegistry, <Service>Activities)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers all service activities with the provided registry"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"registeractivity-function",children:"RegisterActivity function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Register<Activity>Activity(\n  worker.ActivityRegistry, \n  func(context.Context, [*<Activity>Request]) ([*<Activity>Response], error),\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers the activity with the provided registry"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"activity-function",children:"Activity function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Activity>(\n  workflow.Context, \n  [*<Activity>Request],\n  ...*<Activity>ActivityOptions,\n) ([*<Activity>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding activity, blocking until activity completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(BarRequest) returns (BarResponse) {\n    option (temporal.v1.activity) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Activities struct {}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (a *Activities) Bar(ctx context.Context, req *BarRequest) (*BarResponse, error) {\n  return nil, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  bar, err := examplev1.Bar(ctx, &examplev1.BarRequest{})\n  workflow.GetLogger(ctx).Info("executed bar activity", "result", bar)\n  return err\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"activityasync-function",children:"ActivityAsync function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Activity>Async(\n  workflow.Context, \n  [*<Activity>Request],\n  ... *<Activity>ActivityOptions,\n) (<Activity>Future, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding activity, returning an ",(0,o.jsx)(n.a,{href:"#activityfuture-interface",children:"ActivityFuture"})," for the activity execution"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(BarRequest) returns (BarResponse) {\n    option (temporal.v1.activity) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Activities struct {}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (a *Activities) Bar(ctx context.Context, req *BarRequest) (*BarResponse, error) {\n  return nil, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  f, err := examplev1.BarAsync(ctx, &examplev1.BarRequest{})\n  if err != nil {\n    return fmt.Errorf("error starting bar activity: %w", err)\n  }\n  bar, err := f.Get(ctx)\n  workflow.GetLogger(ctx).Info("executed bar activity", "result", bar)\n  return err\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"activitylocal-function",children:"ActivityLocal function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Activity>Local(\n  workflow.Context, \n  [*<Activity>Request],\n  ... *<Activity>ActivityLocalOptions,\n) ([*<Activity>Response], error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding activity as a ",(0,o.jsx)(n.a,{href:"https://docs.temporal.io/activities#local-activity",children:"local activity"}),", blocking until local activity completes or errors"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"activitylocalasync-function",children:"ActivityLocalAsync function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Activity>LocalAsync(\n  workflow.Context, \n  [*<Activity>Request],\n  ... *<Activity>ActivityLocalOptions,\n) (<Activity>Future, error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding activity as a ",(0,o.jsx)(n.a,{href:"https://docs.temporal.io/activities#local-activity",children:"local activity"}),", returning an ",(0,o.jsx)(n.a,{href:"#activityfuture-interface",children:"ActivityFuture"})," for the local activity execution"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"activityfuture-struct",children:"ActivityFuture struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Activity>Future struct {\n  Future workflow.Future\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Struct providing an interface execution handle returned by asynchronous activity methods"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"get-method-2",children:"Get method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Activity>Future) Get(context.Context) ([*<Activity>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the activity result, blocking until activity completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"select-method",children:"Select method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Activity>Future) Select(workflow.Selector, func(<Activity>Future)) workflow.Selector\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers the activity execution callback with the given selector"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"activityoptions-struct",children:"ActivityOptions struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Activity>ActivityOptions struct {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Optional configuration for activity methods"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"newactivityoptions-function",children:"NewActivityOptions function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func New<Activity>ActivityOptions() *<Activity>ActivityOptions\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns a new activity options value"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"withactivityoptions-method",children:"WithActivityOptions method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Activity>ActivityOptions) WithActivityOptions(workflow.ActivityOptions) *<Activity>ActivityOptions\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sets dynamic activity options for an individual activity execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(BarRequest) returns (BarResponse) {\n    option (temporal.v1.activity) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Activities struct {}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (a *Activities) Bar(ctx context.Context, req *BarRequest) (*BarResponse, error) {\n  return nil, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  opts := workflow.GetActivityOptions(ctx)\n  opts.StartToCloseTimeout = time.Second*30\n  bar, err := examplev1.Bar(\n    ctx, \n    &examplev1.BarRequest{}, \n    examplev1.NewBarActivityOptions().\n      WithActivityOptions(opts),\n  )\n  workflow.GetLogger(ctx).Info("executed bar activity", "result", bar)\n  return err\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"localactivityoptions-struct",children:"LocalActivityOptions struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Activity>LocalActivityOptions struct {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Optional configuration for local activity methods"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"local-method",children:"Local method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Activity>LocalActivityOptions) Local(\n  func(context.Context, [*<Activity>Request]) ([*<Activity>Response], error)\n) *<Activity>LocalActivityOptions\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sets the activity definition to use for the local execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(BarRequest) returns (BarResponse) {\n    option (temporal.v1.activity) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  bar, err := examplev1.BarLocal(\n    ctx, \n    &examplev1.BarRequest{}, \n    examplev1.NewBarActivityOptions().\n      Local(func(ctx context.Context, req *BarRequest) (*BarResponse, error) {\n        return nil, nil\n      }),\n  )\n  workflow.GetLogger(ctx).Info("executed local bar activity", "result", bar)\n  return err\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"newlocalactivityoptions-function",children:"NewLocalActivityOptions function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func New<Activity>LocalActivityOptions() *<Activity>LocalActivityOptions\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns a new activity local options value"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"withlocalactivityoptions-method",children:"WithLocalActivityOptions method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Activity>LocalActivityOptions) WithLocalActivityOptions(workflow.LocalActivityOptions) *<Activity>LocalActivityOptions\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sets dynamic activity options for an individual local activity execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(BarRequest) returns (BarResponse) {\n    option (temporal.v1.activity) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Activities struct {}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (a *Activities) Bar(ctx context.Context, req *BarRequest) (*BarResponse, error) {\n  return nil, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  opts := workflow.GetLocalActivityOptions(ctx)\n  opts.StartToCloseTimeout = time.Second*30\n  bar, err := examplev1.BarLocal(\n    ctx, \n    &examplev1.BarRequest{}, \n    examplev1.NewBarActivityOptions().\n      WithLocalActivityOptions(opts),\n  )\n  workflow.GetLogger(ctx).Info("executed local bar activity", "result", bar)\n  return err\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"signal-struct",children:"Signal struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Signal>Signal struct {\n  Channel workflow.ReceiveChannel\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Struct providing types and methods to simplify interacting with the corresponding signal from a workflow definition"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      signal: { ref: 'Bar' }\n    };\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Workflows struct{}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (wfs *Workflows) Foo(ctx workflow.Context, input *examplev1.FooInput) (examplev1.FooWorkflow, error) {\n  return &FooWorkflow{input}, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  workflow.NewSelector(ctx).\n    AddReceive(w.Bar.Channel, func(workflow.ReceiveChannel, bool) {\n      bar := w.Bar.ReceiveAsync()\n      workflow.GetLogger(ctx).Info("received bar signal", "signal", bar)\n    }).\n    Select(ctx)\n  return nil\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"receive-method",children:"Receive method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Signal>Signal) Receive(workflow.Context) ([*<Signal>Request], bool)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the next signal request and boolean indicating whether the channel is closed, blocking until the signal is received."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      signal: { ref: 'Bar' }\n    };\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Workflows struct{}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (wfs *Workflows) Foo(ctx workflow.Context, input *examplev1.FooInput) (examplev1.FooWorkflow, error) {\n  return &FooWorkflow{input}, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  bar, _ := w.Bar.Receive(ctx)\n  workflow.GetLogger(ctx).Info("received bar signal", "signal", bar)\n  return nil\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"receiveasync-method",children:"ReceiveAsync method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Signal>Signal) ReceiveAsync() (*<Signal>Request | bool)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the next signal request if available (bool if signal has no request payload), or nil otherwise."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      signal: { ref: 'Bar', start: true }\n    };\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Workflows struct{}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n)\n\nfunc (wfs *Workflows) Foo(ctx workflow.Context, input *examplev1.FooInput) (examplev1.FooWorkflow, error) {\n  return &FooWorkflow{input}, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  bar := w.Bar.ReceiveAsync()\n  if bar != nil {\n    workflow.GetLogger(ctx).Info("workflow started with bar signal", "signal", bar)\n  }\n  return nil\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"select-method-1",children:"Select method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Signal>Signal) Select(\n  workflow.Selector,\n  func([*<Signal>Request]),\n) workflow.Selector\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers the provided signal callback with the provided selector"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"signalexternal-function",children:"SignalExternal function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Signal>External(\n  ctx workflow.Context, \n  workflowID string,\n  runID string,\n  signal [*<Signal>Request],\n) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sends the corresponding signal to an existing workflow execution."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      signal: { ref: 'Baz' }\n    };\n  }\n\n  rpc Baz(BazRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n\n  BarWorkflow struct {\n    *examplev1.BarInput\n  }\n)\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  return examplev1.BazExternal(ctx, "barID", "", &examplev1.BazRequest{})\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  baz, _ := w.Baz.Receive(ctx)\n  workflow.GetLogger(ctx).Info("received baz signal", "signal", baz)\n  return nil\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"signalexternalasync-function",children:"SignalExternalAsync function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Signal>ExternalAsync(\n  ctx workflow.Context, \n  workflowID string,\n  runID string,\n  signal [*<Signal>Request],\n) workflow.Future\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sends the corresponding signal to an existing workflow execution, returning a workflow future."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflows-interface",children:"Workflows interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Service>Workflows interface {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Interface used to describe the required Workflows struct implementation"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type ExampleWorkflows interface {\n  Foo(context.Context, *examplev1.FooInput) (examplev1.FooWorkflow, error)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"registerworkflows-function",children:"RegisterWorkflows function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Register<Service>Workflows(worker.WorkflowRegistry, examplev1.<Service>Workflows)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers all service workflows with the provided registry"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"registerworkflow-function",children:"RegisterWorkflow function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Register<Workflow>Workflow(\n  worker.WorkflowRegistry,\n  func(workflow.Context, *examplev1.<Workflow>Input) (examplev1.<Workflow>Workflow, error)\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers the workflow with the provided registry"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflow-interface",children:"Workflow interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Workflow>Workflow {\n  Execute(workflow.Context) ([*<Workflow>Response], error)\n  <Query>([*<Query>Request]) (*<Query>Response, error)\n  <Update>([*<Update>Request]) ([*<Update>Response], error)\n  Validate<Update>([*<Update>Request]) error\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Interface used to describe a required Workflow struct implementation"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(FooRequest) returns (FooResponse) {\n    option (temporal.v1.workflow) = {\n      query: { ref: 'QueryFoo' }\n      update: { ref: 'UpdateFoo' }\n    };\n  }\n\n  rpc QueryFoo(QueryFooRequest) returns (QueryFooResponse) {\n    option (temporal.v1.query) = {};\n  }\n\n  rpc UpdateFoo(UpdateFooRequest) returns (UpdateFooResponse) {\n    option (temporal.v1.update) = {\n      validate: true\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type FooWorkflow struct {\n  *examplev1.FooInput\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) (*examplev1.FooResponse, error) {\n  return &examplev1.FooResponse{}, nil\n}\n\nfunc (w *FooWorkflow) QueryFoo(req *examplev1.QueryFooRequest) (*examplev1.QueryFooResponse, error) {\n  return &examplev1.QueryFooResponse{}, nil\n}\n\nfunc (w *FooWorkflow) UpdateFoo(ctx workflow.Context, req *examplev1.UpdateFooRequest) (*examplev1.UpdateFooResponse, error) {\n  return &examplev1.UpdateFooResponse{}, nil\n}\n\nfunc (w *FooWorkflow) UpdateFoo(ctx workflow.Context, req *examplev1.UpdateFooRequest) error {\n  return nil\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowchild-function",children:"WorkflowChild function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Workflow>Child(\n  workflow.Context,\n  [*<Workflow>Request], \n  ...*<Workflow>ChildOptions,\n) ([*<Workflow>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Executes the corresponding child workflow, blocking until child workflow completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(google.protobuf.Empty) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Bar(BarRequest) returns (BarResponse) {\n    option (temporal.v1.workflow) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  FooWorkflow struct {\n    *examplev1.FooInput\n  }\n\n  BarWorkflow struct {\n    *examplev1.BarInput\n  }\n)\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  bar, err := examplev1.BarChild(ctx, &examplev1.BarRequest{})\n  workflow.GetLogger(ctx).Info("executed bar child workflow", "response", bar)\n  return err\n}\n\nfunc (w *BarWorkflow) Execute(ctx workflow.Context) (*examplev1.BarResponse, error) {\n  return &examplev1.BarResponse{}, nil\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowchildasync-function",children:"WorkflowChildAsync function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func <Workflow>Child(\n  workflow.Context,\n  [*<Workflow>Request], \n  ...*<Workflow>ChildOptions,\n) ([*<Workflow>ChildRun], error)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Executes the corresponding child workflow, returning a ",(0,o.jsx)(n.a,{href:"#workflowchildrun-struct",children:"WorkflowChildRun"})," for the child workflow execution"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowchildoptions-struct",children:"WorkflowChildOptions struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Workflow>ChildOptions struct {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Optional configuration for child workfow functions"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"newworkflowchildoptions-function",children:"NewWorkflowChildOptions function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func New<Workflow>ChildOptions() *<Workflow>ChildOptions\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns a new workflow child options value for the corresponding workflow"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"withchildworkflowoptions-method",children:"WithChildWorkflowOptions method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>Options) WithChildWorkflowOptions(workflow.ChildWorkflowOptions) *<Workflow>ChildOptions\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sets dynamic workflow options for an individual workflow execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowinput-struct",children:"WorkflowInput struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Workflow>Input struct {\n  [Req *<Workflow>Request]\n  [<Signal> *<Signal>Signal]\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Struct that contains references to workflow inputs and signals"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:"service Example {\n  rpc Foo(FooRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      signal: { ref: 'Bar' }\n      signal: { ref: 'Baz' }\n    };\n  }\n\n  rpc Bar(BarRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n\n  rpc Baz(BazRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {};\n  }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type (\n  Workflows struct {}\n\n  FooWorkflow struct {\n    *examplev1.FooInput\n    log log.Logger\n  }\n)\n\nfunc (w *Workflows) Foo(ctx workflow.Context, input *examplev1.FooInput) (examplev1.FooWorkflow, error) {\n  return &FooWorkflow{input, workflow.GetLogger(ctx)}, nil\n}\n\nfunc (w *FooWorkflow) Execute(ctx workflow.Context) error {\n  w.log.Info("starting foo workflow", "request", w.Req)\n  for bar, baz := 0, 0; bar + baz < 2; {\n    sel := workflow.NewSelector(ctx)\n    if bar == 0 {\n      w.Bar.Select(ctx, func(signal *examplev1.BarRequest) {\n        w.log.Info("received bar signal", "signal", signal)\n        bar++\n      })\n    }\n    if baz == 0 {\n      w.Baz.Select(ctx, func(signal *examplev1.BazRequest) {\n        w.log.Info("received baz signal", "signal", signal)\n        baz++\n      })\n    }\n    sel.Select(ctx)\n  }\n  return nil\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflowchildrun-struct",children:"WorkflowChildRun struct"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type <Workflow>ChildRun struct {\n  Future workflow.ChildWorkflowFuture\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Struct providing a child workflow execution handle returned by asynchronous child workflow methods"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"get-method-3",children:"Get method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>ChildRun) Get(workflow.Context) ([*<Workflow>Response], error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the child workflow result, blocking until child workflow completes or errors"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"select-method-2",children:"Select method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>ChildRun) Select(\n  workflow.Selector,\n  func(*<Workflow>ChildRun)\n) workflow.Selector\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers the child workflow execution and a callback with the provided selector"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"selectstart-method",children:"SelectStart method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>ChildRun) Select(\n  workflow.Selector,\n  func(*<Workflow>ChildRun)\n) workflow.Selector\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registers the start of the child workflow execution and a callback with the provided selector"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"signal-method-2",children:"Signal method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>ChildRun) <Signal>(workflow.Context, [*<Signal>Request]) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sends the corresponding signal to the child workflow execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"signalasync-method",children:"SignalAsync method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>ChildRun) <Signal>(workflow.Context, [*<Signal>Request]) workflow.Future\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sends the corresponding signal to the child workflow execution"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"waitstart-method",children:"WaitStart method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func (*<Workflow>ChildRun) WaitStart(workflow.Context) (*workflow.Execution, error)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Blocks until the child workflow execution has started"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#generated-code-reference",children:"top"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var o=r(6540);const t={},l=o.createContext(t);function i(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);