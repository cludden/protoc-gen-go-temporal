"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[737],{872:(e,o,l)=>{l.r(o),l.d(o,{assets:()=>m,contentTitle:()=>d,default:()=>w,frontMatter:()=>p,metadata:()=>c,toc:()=>g});var n=l(4848),r=l(8453),t=l(1432);const s='syntax="proto3";\n\npackage example.helloworld.v1;\n\nimport "google/protobuf/empty.proto";\nimport "temporal/v1/temporal.proto";\n\nservice Example {\n  option (temporal.v1.service) = {\n    task_queue: "hello-world"\n  };\n\n  // Hello prints a friendly greeting and waits for goodbye\n  rpc Hello(HelloRequest) returns (HelloResponse) {\n    option (temporal.v1.workflow) = {\n      name: "example.v1.Hello"\n      id: \'hello/${! name.or("World") }\'\n      signal: { ref: "Goodbye" }\n    };\n  }\n\n  // Goodbye signals a running workflow to exit\n  rpc Goodbye(GoodbyeRequest) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n\n// HelloRequest describes the input to a Hello workflow\nmessage HelloRequest {\n  string name = 1;\n}\n\n// HelloResponse describes the output from a Hello workflow\nmessage HelloResponse {\n  string result = 1;\n}\n\nmessage GoodbyeRequest {\n  string message = 1;\n}\n',a='package example\n\nimport (\n\thelloworldv1 "github.com/cludden/protoc-gen-go-temporal/gen/example/helloworld/v1"\n\t"go.temporal.io/sdk/log"\n\t"go.temporal.io/sdk/workflow"\n)\n\ntype (\n\tWorkflows struct{}\n\n\t// HelloWorkflow provides a helloworldv1.HelloWorkflow implementation\n\tHelloWorkflow struct {\n\t\t*helloworldv1.HelloWorkflowInput\n\t\tlog log.Logger\n\t}\n)\n\n// NewHelloWorkflow initializes a new helloworldv1.HelloWorkflow value\nfunc (w *Workflows) Hello(ctx workflow.Context, input *helloworldv1.HelloWorkflowInput) (helloworldv1.HelloWorkflow, error) {\n\treturn &HelloWorkflow{input, workflow.GetLogger(ctx)}, nil\n}\n\n// Execute defines the entrypoint to a Hello workflow\nfunc (w *HelloWorkflow) Execute(ctx workflow.Context) (*helloworldv1.HelloResponse, error) {\n\tw.log.Info("Hello workflow started", "request", w.Req)\n\n\tgoodbye, _ := w.Goodbye.Receive(ctx)\n\tw.log.Info("Goodbye received", "signal", goodbye)\n\n\treturn &helloworldv1.HelloResponse{}, nil\n}\n',i='package main\n\nimport (\n\t"log"\n\t"os"\n\n\texample "github.com/cludden/protoc-gen-go-temporal/examples/helloworld/internal"\n\thelloworldv1 "github.com/cludden/protoc-gen-go-temporal/gen/example/helloworld/v1"\n\t"github.com/urfave/cli/v2"\n\t"go.temporal.io/sdk/client"\n\t"go.temporal.io/sdk/worker"\n)\n\nfunc main() {\n\tapp, err := helloworldv1.NewExampleCli(\n\t\thelloworldv1.NewExampleCliOptions().\n\t\t\tWithWorker(func(cmd *cli.Context, c client.Client) (worker.Worker, error) {\n\t\t\t\tw := worker.New(c, helloworldv1.ExampleTaskQueue, worker.Options{})\n\t\t\t\thelloworldv1.RegisterExampleWorkflows(w, &example.Workflows{})\n\t\t\t\treturn w, nil\n\t\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif err := app.Run(os.Args); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n',p={},d="Hello World",c={id:"examples/helloworld",title:"Hello World",description:"A simple example inspired by temporalio/samples-go/helloworld",source:"@site/docs/examples/helloworld.mdx",sourceDirName:"examples",slug:"/examples/helloworld",permalink:"/protoc-gen-go-temporal/docs/examples/helloworld",draft:!1,unlisted:!1,editUrl:"https://github.com/cludden/protoc-gen-go-temporal/tree/main/docs/docs/examples/helloworld.mdx",tags:[],version:"current",frontMatter:{},sidebar:"examples",next:{title:"Codec Server",permalink:"/protoc-gen-go-temporal/docs/examples/codecserver"}},m={},g=[{value:"Run this example",id:"run-this-example",level:2}];function h(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"hello-world",children:"Hello World"}),"\n",(0,n.jsxs)(o.p,{children:["A simple example inspired by ",(0,n.jsx)(o.a,{href:"https://github.com/temporalio/samples-go/tree/main/helloworld",children:"temporalio/samples-go/helloworld"})]}),"\n",(0,n.jsx)(t.A,{language:"protobuf",title:"example.proto",children:s}),"\n",(0,n.jsx)(t.A,{language:"go",title:"example.go",children:a}),"\n",(0,n.jsx)(t.A,{language:"go",title:"main.go",children:i}),"\n",(0,n.jsx)(o.h2,{id:"run-this-example",children:"Run this example"}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["Clone the examples","\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-sh",children:"git clone https://github.com/cludden/protoc-gen-go-temporal && cd protoc-gen-go-temporal\n"})}),"\n"]}),"\n",(0,n.jsxs)(o.li,{children:["Run a local Temporal server","\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-sh",children:"temporal server start-dev\n"})}),"\n"]}),"\n",(0,n.jsxs)(o.li,{children:["Run the example worker","\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-sh",children:"go run examples/helloworld/main.go worker\n"})}),"\n"]}),"\n",(0,n.jsxs)(o.li,{children:["Execute a ",(0,n.jsx)(o.code,{children:"HelloWorld"})," workflow","\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-sh",children:"go run examples/helloworld/main.go hello --name Temporal\n"})}),"\n"]}),"\n",(0,n.jsxs)(o.li,{children:["Send a ",(0,n.jsx)(o.code,{children:"Goodbye"})," signal","\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-sh",children:"go run examples/helloworld/main.go goodbye -w hello/Temporal\n"})}),"\n"]}),"\n"]})]})}function w(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);