"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7312],{1528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>w,frontMatter:()=>p,metadata:()=>s,toc:()=>u});var a=n(4848),r=n(8453),i=n(1432);const l='syntax="proto3";\n\npackage example.updatabletimer.v1;\n\nimport "google/protobuf/empty.proto";\nimport "google/protobuf/timestamp.proto";\nimport "temporal/v1/temporal.proto";\n\nservice Example {\n  option (temporal.v1.service) = {\n    task_queue: "updatable-timer"\n  };\n\n  // GetWakeUpTime retrieves the current timer expiration timestamp\n  rpc GetWakeUpTime(google.protobuf.Empty) returns (GetWakeUpTimeOutput) {\n    option (temporal.v1.query) = {};\n  }\n\n  // UpdatableTimer describes an updatable timer workflow\n  rpc UpdatableTimer(UpdatableTimerInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.workflow) = {\n      name: "UpdatableTimer"\n      id: \'updatable-timer/${! name.or(uuid_v4()) }\'\n      query: { ref: "GetWakeUpTime" }\n      signal: { ref: "UpdateWakeUpTime" }\n    };\n  }\n\n  // UpdateWakeUpTime updates the timer expiration timestamp\n  rpc UpdateWakeUpTime(UpdateWakeUpTimeInput) returns (google.protobuf.Empty) {\n    option (temporal.v1.signal) = {};\n  }\n}\n\n// GetWakeUpTimeOutput describes the input to a GetWakeUpTime query\nmessage GetWakeUpTimeOutput {\n  google.protobuf.Timestamp wake_up_time = 1;\n}\n\n// UpdatableTimerInput describes the input to a UpdatableTimer workflow\nmessage UpdatableTimerInput {\n  google.protobuf.Timestamp initial_wake_up_time = 1;\n  string name = 2;\n}\n\n// UpdateWakeUpTimeInput describes the input to a UpdateWakeUpTime signal\nmessage UpdateWakeUpTimeInput {\n  google.protobuf.Timestamp wake_up_time = 1;\n}\n',o='package main\n\nimport (\n\t"log"\n\t"os"\n\n\tupdatabletimerv1 "github.com/cludden/protoc-gen-go-temporal/gen/example/updatabletimer/v1"\n\t"github.com/urfave/cli/v2"\n\t"go.temporal.io/sdk/client"\n\ttlog "go.temporal.io/sdk/log"\n\t"go.temporal.io/sdk/worker"\n\t"go.temporal.io/sdk/workflow"\n\t"google.golang.org/protobuf/types/known/timestamppb"\n)\n\n// UpdatableTimerWorkflow provides a updatabletimerv1.UpdatableTimerWorkflow implementation\ntype UpdatableTimerWorkflow struct {\n\t*updatabletimerv1.UpdatableTimerWorkflowInput\n\tlog        tlog.Logger\n\twakeUpTime *timestamppb.Timestamp\n}\n\n// NewUpdatableTimerWorkflow initializes a new updatabletimerv1.UpdatableTimerWorkflow value\nfunc NewUpdatableTimerWorkflow(ctx workflow.Context, input *updatabletimerv1.UpdatableTimerWorkflowInput) (updatabletimerv1.UpdatableTimerWorkflow, error) {\n\treturn &UpdatableTimerWorkflow{input, workflow.GetLogger(ctx), input.Req.GetInitialWakeUpTime()}, nil\n}\n\n// Execute defines the entrypoint to a UpdatableTimer workflow\nfunc (w *UpdatableTimerWorkflow) Execute(ctx workflow.Context) error {\n\tfor timerFired := false; !timerFired && ctx.Err() == nil; {\n\t\ttimerCtx, cancelTimer := workflow.WithCancel(ctx)\n\t\ttimer := workflow.NewTimer(timerCtx, w.wakeUpTime.AsTime().Sub(workflow.Now(ctx)))\n\t\tw.log.Info("SleepUntil", "WakeUpTime", w.wakeUpTime)\n\n\t\tworkflow.NewSelector(ctx).\n\t\t\tAddFuture(timer, func(f workflow.Future) {\n\t\t\t\tif err := f.Get(timerCtx, nil); err != nil {\n\t\t\t\t\tw.log.Info("Timer canceled")\n\t\t\t\t} else {\n\t\t\t\t\tw.log.Info("Timer fired")\n\t\t\t\t\ttimerFired = true\n\t\t\t\t}\n\t\t\t}).\n\t\t\tAddReceive(w.UpdateWakeUpTime.Channel, func(workflow.ReceiveChannel, bool) {\n\t\t\t\tdefer cancelTimer()\n\t\t\t\tw.wakeUpTime = w.UpdateWakeUpTime.ReceiveAsync().GetWakeUpTime()\n\t\t\t\tw.log.Info("WakeUpTime updated", "WakeUpTime", w.wakeUpTime)\n\t\t\t}).\n\t\t\tSelect(ctx)\n\t}\n\treturn ctx.Err()\n}\n\n// GetWakeUpTime defines the entrypoint to a GetWakeUpTime query\nfunc (w *UpdatableTimerWorkflow) GetWakeUpTime() (*updatabletimerv1.GetWakeUpTimeOutput, error) {\n\treturn &updatabletimerv1.GetWakeUpTimeOutput{WakeUpTime: w.wakeUpTime}, nil\n}\n\nfunc main() {\n\tapp, err := updatabletimerv1.NewExampleCli(\n\t\tupdatabletimerv1.NewExampleCliOptions().WithWorker(func(cmd *cli.Context, c client.Client) (worker.Worker, error) {\n\t\t\tw := worker.New(c, updatabletimerv1.ExampleTaskQueue, worker.Options{})\n\t\t\tupdatabletimerv1.RegisterUpdatableTimerWorkflow(w, NewUpdatableTimerWorkflow)\n\t\t\treturn w, nil\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif err := app.Run(os.Args); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n',p={sidebar_position:2},m="Updatable Timer",s={id:"examples/updatabletimer",title:"Updatable Timer",description:"A simple example inspired by temporalio/samples-go/updatabletimer",source:"@site/docs/examples/updatabletimer.mdx",sourceDirName:"examples",slug:"/examples/updatabletimer",permalink:"/docs/examples/updatabletimer",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/updatabletimer.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"examples",previous:{title:"Hello World",permalink:"/docs/examples/helloworld"}},d={},u=[{value:"Run this example",id:"run-this-example",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"updatable-timer",children:"Updatable Timer"}),"\n",(0,a.jsxs)(t.p,{children:["A simple example inspired by ",(0,a.jsx)(t.a,{href:"https://github.com/temporalio/samples-go/tree/main/updatabletimer",children:"temporalio/samples-go/updatabletimer"})]}),"\n",(0,a.jsx)(i.A,{language:"protobuf",title:"example.proto",children:l}),"\n",(0,a.jsx)(i.A,{language:"go",title:"main.go",children:o}),"\n",(0,a.jsx)(t.h2,{id:"run-this-example",children:"Run this example"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Clone the examples"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"git clone https://github.com/cludden/protoc-gen-go-temporal && cd protoc-gen-go-temporal\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Run a local Temporal server"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"temporal server start-dev\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Run the example worker"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"go run examples/updatabletimer/main.go worker\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Initialize an ",(0,a.jsx)(t.code,{children:"UpdatableTimer"})," workflow with an expiration ",(0,a.jsx)(t.code,{children:"1h"})," in the future"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:'go run examples/updatabletimer/main.go updatable-timer \\\n    --name example \\\n    --initial-wake-up-time $(TZ=UTC date -v+1H "+%Y-%m-%dT%H:%M:%SZ") \\\n    -d\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Query the ",(0,a.jsx)(t.code,{children:"UpdatableTimer"})," workflow"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"go run examples/updatabletimer/main.go get-wake-up-time -w updatable-timer/example\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Update the timer expiration to ",(0,a.jsx)(t.code,{children:"30s"})," in the future"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:'go run examples/updatabletimer/main.go update-wake-up-time \\\n    -w updatable-timer/example \\\n    --wake-up-time $(TZ=UTC date -v+30S "+%Y-%m-%dT%H:%M:%SZ")\n'})}),"\n"]}),"\n"]})]})}function w(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);