// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: temporal/xns/v1/xns.proto

package xnsv1

import (
	v11 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	v1 "go.temporal.io/api/enums/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IDReusePolicy int32

const (
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED IDReusePolicy = 0
	// Allow starting a workflow execution using the same workflow id.
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE IDReusePolicy = 1
	// Allow starting a workflow execution using the same workflow id, only when the last
	// execution's final state is one of [terminated, cancelled, timed out, failed].
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY IDReusePolicy = 2
	// Do not permit re-use of the workflow id for this workflow. Future start workflow requests
	// could potentially change the policy, allowing re-use of the workflow id.
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE IDReusePolicy = 3
	// If a workflow is running using the same workflow ID, terminate it and start a new one.
	// If no running workflow, then the behavior is the same as ALLOW_DUPLICATE
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING IDReusePolicy = 4
)

// Enum value maps for IDReusePolicy.
var (
	IDReusePolicy_name = map[int32]string{
		0: "WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED",
		1: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE",
		2: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY",
		3: "WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE",
		4: "WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING",
	}
	IDReusePolicy_value = map[string]int32{
		"WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED":                 0,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE":             1,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY": 2,
		"WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE":            3,
		"WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING":        4,
	}
)

func (x IDReusePolicy) Enum() *IDReusePolicy {
	p := new(IDReusePolicy)
	*p = x
	return p
}

func (x IDReusePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDReusePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_xns_v1_xns_proto_enumTypes[0].Descriptor()
}

func (IDReusePolicy) Type() protoreflect.EnumType {
	return &file_temporal_xns_v1_xns_proto_enumTypes[0]
}

func (x IDReusePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDReusePolicy.Descriptor instead.
func (IDReusePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{0}
}

// Defines how child workflows will react to their parent completing
type ParentClosePolicy int32

const (
	ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED ParentClosePolicy = 0
	// The child workflow will also terminate
	ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 1
	// The child workflow will do nothing
	ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 2
	// Cancellation will be requested of the child workflow
	ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 3
)

// Enum value maps for ParentClosePolicy.
var (
	ParentClosePolicy_name = map[int32]string{
		0: "PARENT_CLOSE_POLICY_UNSPECIFIED",
		1: "PARENT_CLOSE_POLICY_TERMINATE",
		2: "PARENT_CLOSE_POLICY_ABANDON",
		3: "PARENT_CLOSE_POLICY_REQUEST_CANCEL",
	}
	ParentClosePolicy_value = map[string]int32{
		"PARENT_CLOSE_POLICY_UNSPECIFIED":    0,
		"PARENT_CLOSE_POLICY_TERMINATE":      1,
		"PARENT_CLOSE_POLICY_ABANDON":        2,
		"PARENT_CLOSE_POLICY_REQUEST_CANCEL": 3,
	}
)

func (x ParentClosePolicy) Enum() *ParentClosePolicy {
	p := new(ParentClosePolicy)
	*p = x
	return p
}

func (x ParentClosePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentClosePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_xns_v1_xns_proto_enumTypes[1].Descriptor()
}

func (ParentClosePolicy) Type() protoreflect.EnumType {
	return &file_temporal_xns_v1_xns_proto_enumTypes[1]
}

func (x ParentClosePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentClosePolicy.Descriptor instead.
func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{1}
}

// WaitPolicy used to indicate to the server how long the client wishes to wait for a return
// value from an UpdateWorkflow RPC
type WaitPolicy int32

const (
	WaitPolicy_WAIT_POLICY_UNSPECIFIED WaitPolicy = 0
	WaitPolicy_WAIT_POLICY_ADMITTED    WaitPolicy = 1
	WaitPolicy_WAIT_POLICY_ACCEPTED    WaitPolicy = 2
	WaitPolicy_WAIT_POLICY_COMPLETED   WaitPolicy = 3
)

// Enum value maps for WaitPolicy.
var (
	WaitPolicy_name = map[int32]string{
		0: "WAIT_POLICY_UNSPECIFIED",
		1: "WAIT_POLICY_ADMITTED",
		2: "WAIT_POLICY_ACCEPTED",
		3: "WAIT_POLICY_COMPLETED",
	}
	WaitPolicy_value = map[string]int32{
		"WAIT_POLICY_UNSPECIFIED": 0,
		"WAIT_POLICY_ADMITTED":    1,
		"WAIT_POLICY_ACCEPTED":    2,
		"WAIT_POLICY_COMPLETED":   3,
	}
)

func (x WaitPolicy) Enum() *WaitPolicy {
	p := new(WaitPolicy)
	*p = x
	return p
}

func (x WaitPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_xns_v1_xns_proto_enumTypes[2].Descriptor()
}

func (WaitPolicy) Type() protoreflect.EnumType {
	return &file_temporal_xns_v1_xns_proto_enumTypes[2]
}

func (x WaitPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitPolicy.Descriptor instead.
func (WaitPolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{2}
}

type GetWorkflowRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	HeartbeatInterval *durationpb.Duration   `protobuf:"bytes,1,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	RunId             string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ParentClosePolicy v1.ParentClosePolicy   `protobuf:"varint,4,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.api.enums.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	WorkflowId        string                 `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetWorkflowRequest) Reset() {
	*x = GetWorkflowRequest{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowRequest) ProtoMessage() {}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{0}
}

func (x *GetWorkflowRequest) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *GetWorkflowRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetWorkflowRequest) GetParentClosePolicy() v1.ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return v1.ParentClosePolicy(0)
}

func (x *GetWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// QueryRequest can be used to configure xns query activities
type QueryRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RunId             string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowId        string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Request           *anypb.Any             `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	HeartbeatInterval *durationpb.Duration   `protobuf:"bytes,4,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *QueryRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *QueryRequest) GetRequest() *anypb.Any {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *QueryRequest) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

// RetryPolicy describes configuration for activity or child workflow retries
type RetryPolicy struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	InitialInterval        *durationpb.Duration   `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	BackoffCoefficient     float64                `protobuf:"fixed64,2,opt,name=backoff_coefficient,json=backoffCoefficient,proto3" json:"backoff_coefficient,omitempty"`
	MaxInterval            *durationpb.Duration   `protobuf:"bytes,3,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	MaxAttempts            int32                  `protobuf:"varint,4,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	NonRetryableErrorTypes []string               `protobuf:"bytes,5,rep,name=non_retryable_error_types,json=nonRetryableErrorTypes,proto3" json:"non_retryable_error_types,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{2}
}

func (x *RetryPolicy) GetInitialInterval() *durationpb.Duration {
	if x != nil {
		return x.InitialInterval
	}
	return nil
}

func (x *RetryPolicy) GetBackoffCoefficient() float64 {
	if x != nil {
		return x.BackoffCoefficient
	}
	return 0
}

func (x *RetryPolicy) GetMaxInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxInterval
	}
	return nil
}

func (x *RetryPolicy) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *RetryPolicy) GetNonRetryableErrorTypes() []string {
	if x != nil {
		return x.NonRetryableErrorTypes
	}
	return nil
}

// SignalRequest can be used to configure xns signal activities
type SignalRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RunId             string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowId        string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Request           *anypb.Any             `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	HeartbeatInterval *durationpb.Duration   `protobuf:"bytes,4,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SignalRequest) Reset() {
	*x = SignalRequest{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRequest) ProtoMessage() {}

func (x *SignalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRequest.ProtoReflect.Descriptor instead.
func (*SignalRequest) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{3}
}

func (x *SignalRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SignalRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalRequest) GetRequest() *anypb.Any {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SignalRequest) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

type StartWorkflowOptions struct {
	state                    protoimpl.MessageState      `protogen:"open.v1"`
	Id                       string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskQueue                string                      `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	ExecutionTimeout         *durationpb.Duration        `protobuf:"bytes,3,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	RunTimeout               *durationpb.Duration        `protobuf:"bytes,4,opt,name=run_timeout,json=runTimeout,proto3" json:"run_timeout,omitempty"`
	TaskTimeout              *durationpb.Duration        `protobuf:"bytes,5,opt,name=task_timeout,json=taskTimeout,proto3" json:"task_timeout,omitempty"`
	IdReusePolicy            IDReusePolicy               `protobuf:"varint,6,opt,name=id_reuse_policy,json=idReusePolicy,proto3,enum=temporal.xns.v1.IDReusePolicy" json:"id_reuse_policy,omitempty"`
	ErrorWhenAlreadyStarted  bool                        `protobuf:"varint,7,opt,name=error_when_already_started,json=errorWhenAlreadyStarted,proto3" json:"error_when_already_started,omitempty"`
	RetryPolicy              *RetryPolicy                `protobuf:"bytes,8,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	Memo                     *structpb.Struct            `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttirbutes         *structpb.Struct            `protobuf:"bytes,10,opt,name=search_attirbutes,json=searchAttirbutes,proto3" json:"search_attirbutes,omitempty"`
	EnableEagerStart         bool                        `protobuf:"varint,11,opt,name=enable_eager_start,json=enableEagerStart,proto3" json:"enable_eager_start,omitempty"`
	StartDelay               *durationpb.Duration        `protobuf:"bytes,12,opt,name=start_delay,json=startDelay,proto3" json:"start_delay,omitempty"`
	WorkflowIdConflictPolicy v1.WorkflowIdConflictPolicy `protobuf:"varint,13,opt,name=workflow_id_conflict_policy,json=workflowIdConflictPolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdConflictPolicy" json:"workflow_id_conflict_policy,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *StartWorkflowOptions) Reset() {
	*x = StartWorkflowOptions{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowOptions) ProtoMessage() {}

func (x *StartWorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowOptions.ProtoReflect.Descriptor instead.
func (*StartWorkflowOptions) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{4}
}

func (x *StartWorkflowOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartWorkflowOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *StartWorkflowOptions) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

func (x *StartWorkflowOptions) GetRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.RunTimeout
	}
	return nil
}

func (x *StartWorkflowOptions) GetTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskTimeout
	}
	return nil
}

func (x *StartWorkflowOptions) GetIdReusePolicy() IDReusePolicy {
	if x != nil {
		return x.IdReusePolicy
	}
	return IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED
}

func (x *StartWorkflowOptions) GetErrorWhenAlreadyStarted() bool {
	if x != nil {
		return x.ErrorWhenAlreadyStarted
	}
	return false
}

func (x *StartWorkflowOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartWorkflowOptions) GetMemo() *structpb.Struct {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartWorkflowOptions) GetSearchAttirbutes() *structpb.Struct {
	if x != nil {
		return x.SearchAttirbutes
	}
	return nil
}

func (x *StartWorkflowOptions) GetEnableEagerStart() bool {
	if x != nil {
		return x.EnableEagerStart
	}
	return false
}

func (x *StartWorkflowOptions) GetStartDelay() *durationpb.Duration {
	if x != nil {
		return x.StartDelay
	}
	return nil
}

func (x *StartWorkflowOptions) GetWorkflowIdConflictPolicy() v1.WorkflowIdConflictPolicy {
	if x != nil {
		return x.WorkflowIdConflictPolicy
	}
	return v1.WorkflowIdConflictPolicy(0)
}

// UpdateRequest can be used to configure xns update activities
type UpdateRequest struct {
	state                 protoimpl.MessageState            `protogen:"open.v1"`
	HeartbeatInterval     *durationpb.Duration              `protobuf:"bytes,1,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	UpdateWorkflowOptions *UpdateWorkflowWithOptionsRequest `protobuf:"bytes,2,opt,name=update_workflow_options,json=updateWorkflowOptions,proto3" json:"update_workflow_options,omitempty"`
	Request               *anypb.Any                        `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRequest) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *UpdateRequest) GetUpdateWorkflowOptions() *UpdateWorkflowWithOptionsRequest {
	if x != nil {
		return x.UpdateWorkflowOptions
	}
	return nil
}

func (x *UpdateRequest) GetRequest() *anypb.Any {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateWithStartRequest struct {
	state                 protoimpl.MessageState            `protogen:"open.v1"`
	HeartbeatInterval     *durationpb.Duration              `protobuf:"bytes,1,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	StartWorkflowOptions  *StartWorkflowOptions             `protobuf:"bytes,2,opt,name=start_workflow_options,json=startWorkflowOptions,proto3" json:"start_workflow_options,omitempty"`
	UpdateWorkflowOptions *UpdateWorkflowWithOptionsRequest `protobuf:"bytes,3,opt,name=update_workflow_options,json=updateWorkflowOptions,proto3" json:"update_workflow_options,omitempty"`
	Detached              bool                              `protobuf:"varint,4,opt,name=detached,proto3" json:"detached,omitempty"`
	Input                 *anypb.Any                        `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Update                *anypb.Any                        `protobuf:"bytes,6,opt,name=update,proto3" json:"update,omitempty"`
	ParentClosePolicy     v11.ParentClosePolicy             `protobuf:"varint,7,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateWithStartRequest) Reset() {
	*x = UpdateWithStartRequest{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWithStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithStartRequest) ProtoMessage() {}

func (x *UpdateWithStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithStartRequest.ProtoReflect.Descriptor instead.
func (*UpdateWithStartRequest) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWithStartRequest) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *UpdateWithStartRequest) GetStartWorkflowOptions() *StartWorkflowOptions {
	if x != nil {
		return x.StartWorkflowOptions
	}
	return nil
}

func (x *UpdateWithStartRequest) GetUpdateWorkflowOptions() *UpdateWorkflowWithOptionsRequest {
	if x != nil {
		return x.UpdateWorkflowOptions
	}
	return nil
}

func (x *UpdateWithStartRequest) GetDetached() bool {
	if x != nil {
		return x.Detached
	}
	return false
}

func (x *UpdateWithStartRequest) GetInput() *anypb.Any {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *UpdateWithStartRequest) GetUpdate() *anypb.Any {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateWithStartRequest) GetParentClosePolicy() v11.ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return v11.ParentClosePolicy(0)
}

type UpdateWorkflowWithOptionsRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UpdateId            string                 `protobuf:"bytes,1,opt,name=update_id,json=updateId,proto3" json:"update_id,omitempty"`
	WorkflowId          string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId               string                 `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	FirstExecutionRunId string                 `protobuf:"bytes,4,opt,name=first_execution_run_id,json=firstExecutionRunId,proto3" json:"first_execution_run_id,omitempty"`
	// Deprecated: Marked as deprecated in temporal/xns/v1/xns.proto.
	WaitPolicy    WaitPolicy `protobuf:"varint,5,opt,name=wait_policy,json=waitPolicy,proto3,enum=temporal.xns.v1.WaitPolicy" json:"wait_policy,omitempty"`
	WaitForStage  WaitPolicy `protobuf:"varint,6,opt,name=wait_for_stage,json=waitForStage,proto3,enum=temporal.xns.v1.WaitPolicy" json:"wait_for_stage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWorkflowWithOptionsRequest) Reset() {
	*x = UpdateWorkflowWithOptionsRequest{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkflowWithOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowWithOptionsRequest) ProtoMessage() {}

func (x *UpdateWorkflowWithOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowWithOptionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowWithOptionsRequest) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWorkflowWithOptionsRequest) GetUpdateId() string {
	if x != nil {
		return x.UpdateId
	}
	return ""
}

func (x *UpdateWorkflowWithOptionsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *UpdateWorkflowWithOptionsRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *UpdateWorkflowWithOptionsRequest) GetFirstExecutionRunId() string {
	if x != nil {
		return x.FirstExecutionRunId
	}
	return ""
}

// Deprecated: Marked as deprecated in temporal/xns/v1/xns.proto.
func (x *UpdateWorkflowWithOptionsRequest) GetWaitPolicy() WaitPolicy {
	if x != nil {
		return x.WaitPolicy
	}
	return WaitPolicy_WAIT_POLICY_UNSPECIFIED
}

func (x *UpdateWorkflowWithOptionsRequest) GetWaitForStage() WaitPolicy {
	if x != nil {
		return x.WaitForStage
	}
	return WaitPolicy_WAIT_POLICY_UNSPECIFIED
}

// WorkflowRequest can be used to configure xns workflow activities
type WorkflowRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	HeartbeatInterval    *durationpb.Duration   `protobuf:"bytes,1,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	StartWorkflowOptions *StartWorkflowOptions  `protobuf:"bytes,2,opt,name=start_workflow_options,json=startWorkflowOptions,proto3" json:"start_workflow_options,omitempty"`
	Request              *anypb.Any             `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Detached             bool                   `protobuf:"varint,4,opt,name=detached,proto3" json:"detached,omitempty"`
	Signal               *anypb.Any             `protobuf:"bytes,5,opt,name=signal,proto3" json:"signal,omitempty"`
	ParentClosePolicy    v11.ParentClosePolicy  `protobuf:"varint,6,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *WorkflowRequest) Reset() {
	*x = WorkflowRequest{}
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRequest) ProtoMessage() {}

func (x *WorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_xns_v1_xns_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRequest.ProtoReflect.Descriptor instead.
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_xns_v1_xns_proto_rawDescGZIP(), []int{8}
}

func (x *WorkflowRequest) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *WorkflowRequest) GetStartWorkflowOptions() *StartWorkflowOptions {
	if x != nil {
		return x.StartWorkflowOptions
	}
	return nil
}

func (x *WorkflowRequest) GetRequest() *anypb.Any {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WorkflowRequest) GetDetached() bool {
	if x != nil {
		return x.Detached
	}
	return false
}

func (x *WorkflowRequest) GetSignal() *anypb.Any {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *WorkflowRequest) GetParentClosePolicy() v11.ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return v11.ParentClosePolicy(0)
}

var File_temporal_xns_v1_xns_proto protoreflect.FileDescriptor

const file_temporal_xns_v1_xns_proto_rawDesc = "" +
	"\n" +
	"\x19temporal/xns/v1/xns.proto\x12\x0ftemporal.xns.v1\x1a\x19google/protobuf/any.proto\x1a google/protobuf/descriptor.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a$temporal/api/enums/v1/workflow.proto\x1a\x1atemporal/v1/temporal.proto\"\xf0\x01\n" +
	"\x12GetWorkflowRequest\x12H\n" +
	"\x12heartbeat_interval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12X\n" +
	"\x13parent_close_policy\x18\x04 \x01(\x0e2(.temporal.api.enums.v1.ParentClosePolicyR\x11parentClosePolicy\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\tR\n" +
	"workflowId\"\xc0\x01\n" +
	"\fQueryRequest\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12.\n" +
	"\arequest\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\arequest\x12H\n" +
	"\x12heartbeat_interval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\"\xa0\x02\n" +
	"\vRetryPolicy\x12D\n" +
	"\x10initial_interval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x0finitialInterval\x12/\n" +
	"\x13backoff_coefficient\x18\x02 \x01(\x01R\x12backoffCoefficient\x12<\n" +
	"\fmax_interval\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\vmaxInterval\x12!\n" +
	"\fmax_attempts\x18\x04 \x01(\x05R\vmaxAttempts\x129\n" +
	"\x19non_retryable_error_types\x18\x05 \x03(\tR\x16nonRetryableErrorTypes\"\xc1\x01\n" +
	"\rSignalRequest\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12.\n" +
	"\arequest\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\arequest\x12H\n" +
	"\x12heartbeat_interval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\"\x9a\x06\n" +
	"\x14StartWorkflowOptions\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x02 \x01(\tR\ttaskQueue\x12F\n" +
	"\x11execution_timeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x10executionTimeout\x12:\n" +
	"\vrun_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"runTimeout\x12<\n" +
	"\ftask_timeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\vtaskTimeout\x12F\n" +
	"\x0fid_reuse_policy\x18\x06 \x01(\x0e2\x1e.temporal.xns.v1.IDReusePolicyR\ridReusePolicy\x12;\n" +
	"\x1aerror_when_already_started\x18\a \x01(\bR\x17errorWhenAlreadyStarted\x12?\n" +
	"\fretry_policy\x18\b \x01(\v2\x1c.temporal.xns.v1.RetryPolicyR\vretryPolicy\x12+\n" +
	"\x04memo\x18\t \x01(\v2\x17.google.protobuf.StructR\x04memo\x12D\n" +
	"\x11search_attirbutes\x18\n" +
	" \x01(\v2\x17.google.protobuf.StructR\x10searchAttirbutes\x12,\n" +
	"\x12enable_eager_start\x18\v \x01(\bR\x10enableEagerStart\x12:\n" +
	"\vstart_delay\x18\f \x01(\v2\x19.google.protobuf.DurationR\n" +
	"startDelay\x12n\n" +
	"\x1bworkflow_id_conflict_policy\x18\r \x01(\x0e2/.temporal.api.enums.v1.WorkflowIdConflictPolicyR\x18workflowIdConflictPolicy\"\xf4\x01\n" +
	"\rUpdateRequest\x12H\n" +
	"\x12heartbeat_interval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\x12i\n" +
	"\x17update_workflow_options\x18\x02 \x01(\v21.temporal.xns.v1.UpdateWorkflowWithOptionsRequestR\x15updateWorkflowOptions\x12.\n" +
	"\arequest\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\arequest\"\xf0\x03\n" +
	"\x16UpdateWithStartRequest\x12H\n" +
	"\x12heartbeat_interval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\x12[\n" +
	"\x16start_workflow_options\x18\x02 \x01(\v2%.temporal.xns.v1.StartWorkflowOptionsR\x14startWorkflowOptions\x12i\n" +
	"\x17update_workflow_options\x18\x03 \x01(\v21.temporal.xns.v1.UpdateWorkflowWithOptionsRequestR\x15updateWorkflowOptions\x12\x1a\n" +
	"\bdetached\x18\x04 \x01(\bR\bdetached\x12*\n" +
	"\x05input\x18\x05 \x01(\v2\x14.google.protobuf.AnyR\x05input\x12,\n" +
	"\x06update\x18\x06 \x01(\v2\x14.google.protobuf.AnyR\x06update\x12N\n" +
	"\x13parent_close_policy\x18\a \x01(\x0e2\x1e.temporal.v1.ParentClosePolicyR\x11parentClosePolicy\"\xb1\x02\n" +
	" UpdateWorkflowWithOptionsRequest\x12\x1b\n" +
	"\tupdate_id\x18\x01 \x01(\tR\bupdateId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x03 \x01(\tR\x05runId\x123\n" +
	"\x16first_execution_run_id\x18\x04 \x01(\tR\x13firstExecutionRunId\x12@\n" +
	"\vwait_policy\x18\x05 \x01(\x0e2\x1b.temporal.xns.v1.WaitPolicyB\x02\x18\x01R\n" +
	"waitPolicy\x12A\n" +
	"\x0ewait_for_stage\x18\x06 \x01(\x0e2\x1b.temporal.xns.v1.WaitPolicyR\fwaitForStage\"\x82\x03\n" +
	"\x0fWorkflowRequest\x12H\n" +
	"\x12heartbeat_interval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\x12[\n" +
	"\x16start_workflow_options\x18\x02 \x01(\v2%.temporal.xns.v1.StartWorkflowOptionsR\x14startWorkflowOptions\x12.\n" +
	"\arequest\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\arequest\x12\x1a\n" +
	"\bdetached\x18\x04 \x01(\bR\bdetached\x12,\n" +
	"\x06signal\x18\x05 \x01(\v2\x14.google.protobuf.AnyR\x06signal\x12N\n" +
	"\x13parent_close_policy\x18\x06 \x01(\x0e2\x1e.temporal.v1.ParentClosePolicyR\x11parentClosePolicy*\x83\x02\n" +
	"\rIDReusePolicy\x12(\n" +
	"$WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED\x10\x00\x12,\n" +
	"(WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE\x10\x01\x128\n" +
	"4WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY\x10\x02\x12-\n" +
	")WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE\x10\x03\x121\n" +
	"-WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING\x10\x04*\xa4\x01\n" +
	"\x11ParentClosePolicy\x12#\n" +
	"\x1fPARENT_CLOSE_POLICY_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dPARENT_CLOSE_POLICY_TERMINATE\x10\x01\x12\x1f\n" +
	"\x1bPARENT_CLOSE_POLICY_ABANDON\x10\x02\x12&\n" +
	"\"PARENT_CLOSE_POLICY_REQUEST_CANCEL\x10\x03*x\n" +
	"\n" +
	"WaitPolicy\x12\x1b\n" +
	"\x17WAIT_POLICY_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14WAIT_POLICY_ADMITTED\x10\x01\x12\x18\n" +
	"\x14WAIT_POLICY_ACCEPTED\x10\x02\x12\x19\n" +
	"\x15WAIT_POLICY_COMPLETED\x10\x03B\xc2\x01\n" +
	"\x13com.temporal.xns.v1B\bXnsProtoP\x01ZCgithub.com/cludden/protoc-gen-go-temporal/gen/temporal/xns/v1;xnsv1\xa2\x02\x03TXX\xaa\x02\x0fTemporal.Xns.V1\xca\x02\x0fTemporal\\Xns\\V1\xe2\x02\x1bTemporal\\Xns\\V1\\GPBMetadata\xea\x02\x11Temporal::Xns::V1b\x06proto3"

var (
	file_temporal_xns_v1_xns_proto_rawDescOnce sync.Once
	file_temporal_xns_v1_xns_proto_rawDescData []byte
)

func file_temporal_xns_v1_xns_proto_rawDescGZIP() []byte {
	file_temporal_xns_v1_xns_proto_rawDescOnce.Do(func() {
		file_temporal_xns_v1_xns_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_xns_v1_xns_proto_rawDesc), len(file_temporal_xns_v1_xns_proto_rawDesc)))
	})
	return file_temporal_xns_v1_xns_proto_rawDescData
}

var file_temporal_xns_v1_xns_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_temporal_xns_v1_xns_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_temporal_xns_v1_xns_proto_goTypes = []any{
	(IDReusePolicy)(0),                       // 0: temporal.xns.v1.IDReusePolicy
	(ParentClosePolicy)(0),                   // 1: temporal.xns.v1.ParentClosePolicy
	(WaitPolicy)(0),                          // 2: temporal.xns.v1.WaitPolicy
	(*GetWorkflowRequest)(nil),               // 3: temporal.xns.v1.GetWorkflowRequest
	(*QueryRequest)(nil),                     // 4: temporal.xns.v1.QueryRequest
	(*RetryPolicy)(nil),                      // 5: temporal.xns.v1.RetryPolicy
	(*SignalRequest)(nil),                    // 6: temporal.xns.v1.SignalRequest
	(*StartWorkflowOptions)(nil),             // 7: temporal.xns.v1.StartWorkflowOptions
	(*UpdateRequest)(nil),                    // 8: temporal.xns.v1.UpdateRequest
	(*UpdateWithStartRequest)(nil),           // 9: temporal.xns.v1.UpdateWithStartRequest
	(*UpdateWorkflowWithOptionsRequest)(nil), // 10: temporal.xns.v1.UpdateWorkflowWithOptionsRequest
	(*WorkflowRequest)(nil),                  // 11: temporal.xns.v1.WorkflowRequest
	(*durationpb.Duration)(nil),              // 12: google.protobuf.Duration
	(v1.ParentClosePolicy)(0),                // 13: temporal.api.enums.v1.ParentClosePolicy
	(*anypb.Any)(nil),                        // 14: google.protobuf.Any
	(*structpb.Struct)(nil),                  // 15: google.protobuf.Struct
	(v1.WorkflowIdConflictPolicy)(0),         // 16: temporal.api.enums.v1.WorkflowIdConflictPolicy
	(v11.ParentClosePolicy)(0),               // 17: temporal.v1.ParentClosePolicy
}
var file_temporal_xns_v1_xns_proto_depIdxs = []int32{
	12, // 0: temporal.xns.v1.GetWorkflowRequest.heartbeat_interval:type_name -> google.protobuf.Duration
	13, // 1: temporal.xns.v1.GetWorkflowRequest.parent_close_policy:type_name -> temporal.api.enums.v1.ParentClosePolicy
	14, // 2: temporal.xns.v1.QueryRequest.request:type_name -> google.protobuf.Any
	12, // 3: temporal.xns.v1.QueryRequest.heartbeat_interval:type_name -> google.protobuf.Duration
	12, // 4: temporal.xns.v1.RetryPolicy.initial_interval:type_name -> google.protobuf.Duration
	12, // 5: temporal.xns.v1.RetryPolicy.max_interval:type_name -> google.protobuf.Duration
	14, // 6: temporal.xns.v1.SignalRequest.request:type_name -> google.protobuf.Any
	12, // 7: temporal.xns.v1.SignalRequest.heartbeat_interval:type_name -> google.protobuf.Duration
	12, // 8: temporal.xns.v1.StartWorkflowOptions.execution_timeout:type_name -> google.protobuf.Duration
	12, // 9: temporal.xns.v1.StartWorkflowOptions.run_timeout:type_name -> google.protobuf.Duration
	12, // 10: temporal.xns.v1.StartWorkflowOptions.task_timeout:type_name -> google.protobuf.Duration
	0,  // 11: temporal.xns.v1.StartWorkflowOptions.id_reuse_policy:type_name -> temporal.xns.v1.IDReusePolicy
	5,  // 12: temporal.xns.v1.StartWorkflowOptions.retry_policy:type_name -> temporal.xns.v1.RetryPolicy
	15, // 13: temporal.xns.v1.StartWorkflowOptions.memo:type_name -> google.protobuf.Struct
	15, // 14: temporal.xns.v1.StartWorkflowOptions.search_attirbutes:type_name -> google.protobuf.Struct
	12, // 15: temporal.xns.v1.StartWorkflowOptions.start_delay:type_name -> google.protobuf.Duration
	16, // 16: temporal.xns.v1.StartWorkflowOptions.workflow_id_conflict_policy:type_name -> temporal.api.enums.v1.WorkflowIdConflictPolicy
	12, // 17: temporal.xns.v1.UpdateRequest.heartbeat_interval:type_name -> google.protobuf.Duration
	10, // 18: temporal.xns.v1.UpdateRequest.update_workflow_options:type_name -> temporal.xns.v1.UpdateWorkflowWithOptionsRequest
	14, // 19: temporal.xns.v1.UpdateRequest.request:type_name -> google.protobuf.Any
	12, // 20: temporal.xns.v1.UpdateWithStartRequest.heartbeat_interval:type_name -> google.protobuf.Duration
	7,  // 21: temporal.xns.v1.UpdateWithStartRequest.start_workflow_options:type_name -> temporal.xns.v1.StartWorkflowOptions
	10, // 22: temporal.xns.v1.UpdateWithStartRequest.update_workflow_options:type_name -> temporal.xns.v1.UpdateWorkflowWithOptionsRequest
	14, // 23: temporal.xns.v1.UpdateWithStartRequest.input:type_name -> google.protobuf.Any
	14, // 24: temporal.xns.v1.UpdateWithStartRequest.update:type_name -> google.protobuf.Any
	17, // 25: temporal.xns.v1.UpdateWithStartRequest.parent_close_policy:type_name -> temporal.v1.ParentClosePolicy
	2,  // 26: temporal.xns.v1.UpdateWorkflowWithOptionsRequest.wait_policy:type_name -> temporal.xns.v1.WaitPolicy
	2,  // 27: temporal.xns.v1.UpdateWorkflowWithOptionsRequest.wait_for_stage:type_name -> temporal.xns.v1.WaitPolicy
	12, // 28: temporal.xns.v1.WorkflowRequest.heartbeat_interval:type_name -> google.protobuf.Duration
	7,  // 29: temporal.xns.v1.WorkflowRequest.start_workflow_options:type_name -> temporal.xns.v1.StartWorkflowOptions
	14, // 30: temporal.xns.v1.WorkflowRequest.request:type_name -> google.protobuf.Any
	14, // 31: temporal.xns.v1.WorkflowRequest.signal:type_name -> google.protobuf.Any
	17, // 32: temporal.xns.v1.WorkflowRequest.parent_close_policy:type_name -> temporal.v1.ParentClosePolicy
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_temporal_xns_v1_xns_proto_init() }
func file_temporal_xns_v1_xns_proto_init() {
	if File_temporal_xns_v1_xns_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_xns_v1_xns_proto_rawDesc), len(file_temporal_xns_v1_xns_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_xns_v1_xns_proto_goTypes,
		DependencyIndexes: file_temporal_xns_v1_xns_proto_depIdxs,
		EnumInfos:         file_temporal_xns_v1_xns_proto_enumTypes,
		MessageInfos:      file_temporal_xns_v1_xns_proto_msgTypes,
	}.Build()
	File_temporal_xns_v1_xns_proto = out.File
	file_temporal_xns_v1_xns_proto_goTypes = nil
	file_temporal_xns_v1_xns_proto_depIdxs = nil
}
