// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal dev (latest)
//	protoc (unknown)
//
// source: example/shoppingcart/v1/shoppingcart.proto
package shoppingcartv1xns

import (
	"context"
	"errors"
	"fmt"
	v1 "github.com/cludden/protoc-gen-go-temporal/gen/example/shoppingcart/v1"
	temporalv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	xnsv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/xns/v1"
	convert "github.com/cludden/protoc-gen-go-temporal/pkg/convert"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	xns "github.com/cludden/protoc-gen-go-temporal/pkg/xns"
	uuid "github.com/google/uuid"
	enumsv1 "go.temporal.io/api/enums/v1"
	activity "go.temporal.io/sdk/activity"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	"time"
)

// ShoppingCartOptions is used to configure example.shoppingcart.v1.ShoppingCart xns activity registration
type ShoppingCartOptions struct {
	// errorConverter is used to customize error
	errorConverter func(error) error
	// filter is used to filter xns activity registrations. It receives as
	// input the original activity name, and should return one of the following:
	// 1. the original activity name, for no changes
	// 2. a modified activity name, to override the original activity name
	// 3. an empty string, to skip registration
	filter func(string) string
}

// NewShoppingCartOptions initializes a new ShoppingCartOptions value
func NewShoppingCartOptions() *ShoppingCartOptions {
	return &ShoppingCartOptions{}
}

// WithErrorConverter overrides the default error converter applied to xns activity errors
func (opts *ShoppingCartOptions) WithErrorConverter(errorConverter func(error) error) *ShoppingCartOptions {
	opts.errorConverter = errorConverter
	return opts
}

// Filter is used to filter registered xns activities or customize their name
func (opts *ShoppingCartOptions) WithFilter(filter func(string) string) *ShoppingCartOptions {
	opts.filter = filter
	return opts
}

// convertError is applied to all xns activity errors
func (opts *ShoppingCartOptions) convertError(err error) error {
	if err == nil {
		return nil
	}
	if opts != nil && opts.errorConverter != nil {
		return opts.errorConverter(err)
	}
	return xns.ErrorToApplicationError(err)
}

// filterActivity is used to filter xns activity registrations
func (opts *ShoppingCartOptions) filterActivity(name string) string {
	if opts == nil || opts.filter == nil {
		return name
	}
	return opts.filter(name)
}

// shoppingCartOptions is a reference to the ShoppingCartOptions initialized at registration
var shoppingCartOptions *ShoppingCartOptions

// RegisterShoppingCartActivities registers example.shoppingcart.v1.ShoppingCart cross-namespace activities
func RegisterShoppingCartActivities(r worker.ActivityRegistry, c v1.ShoppingCartClient, options ...*ShoppingCartOptions) {
	if shoppingCartOptions == nil && len(options) > 0 && options[0] != nil {
		shoppingCartOptions = options[0]
	}
	a := &shoppingCartActivities{c}
	if name := shoppingCartOptions.filterActivity("example.shoppingcart.v1.ShoppingCart.CancelWorkflow"); name != "" {
		r.RegisterActivityWithOptions(a.CancelWorkflow, activity.RegisterOptions{Name: name})
	}
	if name := shoppingCartOptions.filterActivity(v1.ShoppingCartWorkflowName); name != "" {
		r.RegisterActivityWithOptions(a.ShoppingCart, activity.RegisterOptions{Name: name})
	}
	if name := shoppingCartOptions.filterActivity("example.shoppingcart.v1.ShoppingCart.GetShoppingCart"); name != "" {
		r.RegisterActivityWithOptions(a.GetShoppingCart, activity.RegisterOptions{Name: name})
	}
	if name := shoppingCartOptions.filterActivity("example.shoppingcart.v1.ShoppingCart.ShoppingCartWithUpdateCart"); name != "" {
		r.RegisterActivityWithOptions(a.ShoppingCartWithUpdateCart, activity.RegisterOptions{Name: name})
	}
	if name := shoppingCartOptions.filterActivity(v1.DescribeQueryName); name != "" {
		r.RegisterActivityWithOptions(a.Describe, activity.RegisterOptions{Name: name})
	}
	if name := shoppingCartOptions.filterActivity(v1.CheckoutSignalName); name != "" {
		r.RegisterActivityWithOptions(a.Checkout, activity.RegisterOptions{Name: name})
	}
	if name := shoppingCartOptions.filterActivity(v1.UpdateCartUpdateName); name != "" {
		r.RegisterActivityWithOptions(a.UpdateCart, activity.RegisterOptions{Name: name})
	}
}

// ShoppingCartWorkflowOptions are used to configure a(n) example.shoppingcart.v1.ShoppingCart workflow execution
type ShoppingCartWorkflowOptions struct {
	ActivityOptions      *workflow.ActivityOptions
	Detached             bool
	HeartbeatInterval    time.Duration
	HeartbeatTimeout     time.Duration
	ParentClosePolicy    enumsv1.ParentClosePolicy
	StartWorkflowOptions *client.StartWorkflowOptions
}

// NewShoppingCartWorkflowOptions initializes a new ShoppingCartWorkflowOptions value
func NewShoppingCartWorkflowOptions() *ShoppingCartWorkflowOptions {
	return &ShoppingCartWorkflowOptions{}
}

// Build initializes the activity context and input
func (opts *ShoppingCartWorkflowOptions) Build(ctx workflow.Context, input *v1.ShoppingCartInput) (workflow.Context, *xnsv1.WorkflowRequest, error) {
	// initialize start workflow options
	swo := client.StartWorkflowOptions{}
	if opts.StartWorkflowOptions != nil {
		swo = *opts.StartWorkflowOptions
	}

	// initialize workflow id if not set
	if swo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := expression.EvalExpression(v1.ShoppingCartIdexpression, input.ProtoReflect())
			if err != nil {
				workflow.GetLogger(ctx).Error("error evaluating id expression for \"example.shoppingcart.v1.ShoppingCart.ShoppingCart\" workflow", "error", err)
				return nil
			}
			return id
		}).Get(&swo.ID); err != nil {
			return nil, nil, err
		}
	}
	if swo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating workflow id", "error", err)
				return nil
			}
			return id
		}).Get(&swo.ID); err != nil {
			return nil, nil, err
		}
	}
	if swo.ID == "" {
		return nil, nil, temporal.NewNonRetryableApplicationError("workflow id is required", "InvalidArgument", nil)
	}

	// marshal workflow request protobuf message
	inputpb, err := anypb.New(input)
	if err != nil {
		return ctx, nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	// marshal start workflow options protobuf message
	swopb, err := xns.MarshalStartWorkflowOptions(swo)
	if err != nil {
		return ctx, nil, fmt.Errorf("error marshalling start workflow options: %w", err)
	}

	// marshal parent close policy protobuf message
	var parentClosePolicy temporalv1.ParentClosePolicy
	switch opts.ParentClosePolicy {
	case enumsv1.PARENT_CLOSE_POLICY_ABANDON:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON
	case enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL
	case enumsv1.PARENT_CLOSE_POLICY_TERMINATE:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE
	}

	// initialize xns activity options
	ao := workflow.ActivityOptions{}
	if opts.ActivityOptions != nil {
		ao = *opts.ActivityOptions
	}

	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = time.Second * 60
	}

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = time.Hour * 24
	}

	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	// configure heartbeat interval
	if opts.HeartbeatInterval == 0 {
		opts.HeartbeatInterval = ao.HeartbeatTimeout / 2
	}

	ctx = workflow.WithActivityOptions(ctx, ao)

	return ctx, &xnsv1.WorkflowRequest{
		Detached:             opts.Detached,
		HeartbeatInterval:    durationpb.New(opts.HeartbeatInterval),
		ParentClosePolicy:    parentClosePolicy,
		Request:              inputpb,
		StartWorkflowOptions: swopb,
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (opts *ShoppingCartWorkflowOptions) WithActivityOptions(ao workflow.ActivityOptions) *ShoppingCartWorkflowOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithDetached can be used to start a workflow execution and exit immediately
func (opts *ShoppingCartWorkflowOptions) WithDetached(d bool) *ShoppingCartWorkflowOptions {
	opts.Detached = d
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *ShoppingCartWorkflowOptions) WithHeartbeatInterval(d time.Duration) *ShoppingCartWorkflowOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithHeartbeatTimeout can be used to customize the activity heartbeat timeout
func (opts *ShoppingCartWorkflowOptions) WithHeartbeatTimeout(d time.Duration) *ShoppingCartWorkflowOptions {
	opts.HeartbeatTimeout = d
	return opts
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (opts *ShoppingCartWorkflowOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *ShoppingCartWorkflowOptions {
	opts.ParentClosePolicy = policy
	return opts
}

// WithStartWorkflowOptions can be used to customize the start workflow options
func (opts *ShoppingCartWorkflowOptions) WithStartWorkflow(swo client.StartWorkflowOptions) *ShoppingCartWorkflowOptions {
	opts.StartWorkflowOptions = &swo
	return opts
}

// ShoppingCartRun provides a handle to a example.shoppingcart.v1.ShoppingCart workflow execution
type ShoppingCartRun interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) (*v1.ShoppingCartOutput, error)

	// ID returns the workflow id
	ID() string

	// Describe executes a(n) example.shoppingcart.v1.ShoppingCart.Describe query and blocks until completion
	Describe(workflow.Context, *v1.DescribeInput, ...*DescribeQueryOptions) (*v1.DescribeOutput, error)

	// DescribeAsync executes a(n) example.shoppingcart.v1.ShoppingCart.Describe query and returns a handle to the underlying activity
	DescribeAsync(workflow.Context, *v1.DescribeInput, ...*DescribeQueryOptions) (DescribeQueryHandle, error)

	// Checkout executes a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal and blocks until completion
	Checkout(workflow.Context, *v1.CheckoutInput, ...*CheckoutSignalOptions) error

	// CheckoutAsync executes a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal and returns a handle to the underlying activity
	CheckoutAsync(workflow.Context, *v1.CheckoutInput, ...*CheckoutSignalOptions) (CheckoutSignalHandle, error)

	// UpdateCart executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update and blocks until completion
	UpdateCart(workflow.Context, *v1.UpdateCartInput, ...*UpdateCartUpdateOptions) (*v1.UpdateCartOutput, error)

	// UpdateCartAsync executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update and returns a handle to the underlying activity
	UpdateCartAsync(workflow.Context, *v1.UpdateCartInput, ...*UpdateCartUpdateOptions) (UpdateCartHandle, error)
}

// shoppingCartRun provides a(n) ShoppingCartRun implementation
type shoppingCartRun struct {
	cancel            func()
	ctx               workflow.Context
	future            workflow.Future
	id                string
	heartbeatInterval time.Duration
	parentClosePolicy enumsv1.ParentClosePolicy
}

// Cancel the underlying workflow execution
func (r *shoppingCartRun) Cancel(ctx workflow.Context) error {
	if r.cancel != nil {
		r.cancel()
		if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
			return err
		}
		return nil
	}
	return CancelShoppingCartWorkflow(ctx, r.id, "")
}

// Future returns the underlying activity future
func (r *shoppingCartRun) Future() workflow.Future {
	if r.future == nil {
		rr := GetShoppingCartAsync(r.ctx, r.id, "").(*shoppingCartRun)
		r.future = rr.future
		r.cancel = rr.cancel
	}
	return r.future
}

// Get blocks on activity completion and returns the underlying workflow result
func (r *shoppingCartRun) Get(ctx workflow.Context) (*v1.ShoppingCartOutput, error) {
	ctx, cancel := workflow.WithCancel(ctx)
	if r.future == nil {
		rr := GetShoppingCartAsync(ctx, r.id, "", NewGetShoppingCartOptions().WithParentClosePolicy(r.parentClosePolicy).WithHeartbeatInterval(r.heartbeatInterval)).(*shoppingCartRun)
		r.future = rr.future
		r.cancel = cancel
	}
	var resp v1.ShoppingCartOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *shoppingCartRun) ID() string {
	return r.id
}

// Describe executes a(n) example.shoppingcart.v1.ShoppingCart.Describe query and blocks until completion
func (r *shoppingCartRun) Describe(ctx workflow.Context, req *v1.DescribeInput, opts ...*DescribeQueryOptions) (*v1.DescribeOutput, error) {
	return Describe(ctx, r.ID(), "", req, opts...)
}

// DescribeAsync executes a(n) example.shoppingcart.v1.ShoppingCart.Describe query and returns a handle to the underlying activity
func (r *shoppingCartRun) DescribeAsync(ctx workflow.Context, req *v1.DescribeInput, opts ...*DescribeQueryOptions) (DescribeQueryHandle, error) {
	return DescribeAsync(ctx, r.ID(), "", req, opts...)
}

// Checkout executes a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal and blocks until the underlying activity completes
func (r *shoppingCartRun) Checkout(ctx workflow.Context, req *v1.CheckoutInput, opts ...*CheckoutSignalOptions) error {
	return Checkout(ctx, r.ID(), "", req, opts...)
}

// CheckoutAsync executes a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal and returns a handle to the underlying activity
func (r *shoppingCartRun) CheckoutAsync(ctx workflow.Context, req *v1.CheckoutInput, opts ...*CheckoutSignalOptions) (CheckoutSignalHandle, error) {
	return CheckoutAsync(ctx, r.ID(), "", req, opts...)
}

// UpdateCart executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update and blocks until completion
func (r *shoppingCartRun) UpdateCart(ctx workflow.Context, req *v1.UpdateCartInput, opts ...*UpdateCartUpdateOptions) (*v1.UpdateCartOutput, error) {
	// configure activity options if unset
	opt := &UpdateCartUpdateOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}
	if opt.ActivityOptions == nil {
		if opt.HeartbeatInterval == 0 {
			opt.HeartbeatInterval = 10000000000 // 10 seconds
		}

		// configure activity options
		var ao workflow.ActivityOptions
		if opt.ActivityOptions != nil {
			ao = *opt.ActivityOptions
		} else {
			ao = workflow.ActivityOptions{}
		}
		if ao.HeartbeatTimeout == 0 {
			ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
		}
		// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
		ao.WaitForCancellation = true

		if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
			ao.ScheduleToCloseTimeout = 86400000000000 // 1 day
		}
		ctx = workflow.WithActivityOptions(ctx, ao)

		opt.ActivityOptions = &ao
		opts[0] = opt
	}
	return UpdateCart(ctx, r.ID(), "", req, opts...)
}

// UpdateCartAsync executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update and returns a handle to the underlying activity
func (r *shoppingCartRun) UpdateCartAsync(ctx workflow.Context, req *v1.UpdateCartInput, opts ...*UpdateCartUpdateOptions) (UpdateCartHandle, error) {
	// configure activity options if unset
	opt := &UpdateCartUpdateOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}
	if opt.ActivityOptions == nil {
		if opt.HeartbeatInterval == 0 {
			opt.HeartbeatInterval = 10000000000 // 10 seconds
		}

		// configure activity options
		var ao workflow.ActivityOptions
		if opt.ActivityOptions != nil {
			ao = *opt.ActivityOptions
		} else {
			ao = workflow.ActivityOptions{}
		}
		if ao.HeartbeatTimeout == 0 {
			ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
		}
		// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
		ao.WaitForCancellation = true

		if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
			ao.ScheduleToCloseTimeout = 86400000000000 // 1 day
		}
		ctx = workflow.WithActivityOptions(ctx, ao)

		opt.ActivityOptions = &ao
		opts[0] = opt
	}
	return UpdateCartAsync(ctx, r.ID(), "", req, opts...)
}

// ShoppingCart executes a(n) example.shoppingcart.v1.ShoppingCart workflow and blocks until error or response is received
func ShoppingCart(ctx workflow.Context, req *v1.ShoppingCartInput, opts ...*ShoppingCartWorkflowOptions) (*v1.ShoppingCartOutput, error) {
	run, err := ShoppingCartAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// ShoppingCartAsync executes a(n) example.shoppingcart.v1.ShoppingCart workflow and returns a handle to the underlying activity
func ShoppingCartAsync(ctx workflow.Context, input *v1.ShoppingCartInput, opts ...*ShoppingCartWorkflowOptions) (ShoppingCartRun, error) {
	activityName := shoppingCartOptions.filterActivity(v1.ShoppingCartWorkflowName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.ShoppingCartWorkflowName),
			"Unimplemented",
			nil,
		)
	}

	var opt *ShoppingCartWorkflowOptions
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	} else {
		opt = NewShoppingCartWorkflowOptions()
	}
	ctx, req, err := opt.Build(ctx, input)
	if err != nil {
		return nil, shoppingCartOptions.convertError(err)
	}
	ctx, cancel := workflow.WithCancel(ctx)
	return &shoppingCartRun{
		cancel: cancel,
		future: workflow.ExecuteActivity(ctx, activityName, req),
		id:     req.GetStartWorkflowOptions().GetId(),
	}, nil
}

// GetShoppingCart returns a(n) example.shoppingcart.v1.ShoppingCart workflow execution
func GetShoppingCart(ctx workflow.Context, workflowID string, runID string, options ...*GetShoppingCartOptions) (out *v1.ShoppingCartOutput, err error) {
	out, err = GetShoppingCartAsync(ctx, workflowID, runID, options...).Get(ctx)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetShoppingCartAsync returns a handle to a(n) example.shoppingcart.v1.ShoppingCart workflow execution
func GetShoppingCartAsync(ctx workflow.Context, workflowID string, runID string, options ...*GetShoppingCartOptions) ShoppingCartRun {
	activityName := shoppingCartOptions.filterActivity("example.shoppingcart.v1.ShoppingCart.GetShoppingCart")
	if activityName == "" {
		f, set := workflow.NewFuture(ctx)
		set.SetError(temporal.NewNonRetryableApplicationError(fmt.Sprintf("no activity registered for %s", activityName), "Unimplemented", nil))
		return &shoppingCartRun{
			future: f,
			id:     workflowID,
		}
	}
	var opt *GetShoppingCartOptions
	if len(options) > 0 && options[0] != nil {
		opt = options[0]
	} else {
		opt = NewGetShoppingCartOptions()
	}
	ctx, req, err := opt.Build(ctx, workflowID, runID)
	if err != nil {
		f, set := workflow.NewFuture(ctx)
		set.SetError(shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(fmt.Sprintf("no activity registered for %s", activityName), "Unimplemented", nil)))
		return &shoppingCartRun{
			future: f,
			id:     workflowID,
		}
	}
	ctx, cancel := workflow.WithCancel(ctx)
	return &shoppingCartRun{
		cancel: cancel,
		future: workflow.ExecuteActivity(ctx, activityName, req),
		id:     workflowID,
	}
}

// GetShoppingCartOptions are used to configure a(n) example.shoppingcart.v1.ShoppingCart workflow execution getter activity
type GetShoppingCartOptions struct {
	activityOptions   *workflow.ActivityOptions
	heartbeatInterval time.Duration
	parentClosePolicy enumsv1.ParentClosePolicy
}

// NewGetShoppingCartOptions initializes a new GetShoppingCartOptions value
func NewGetShoppingCartOptions() *GetShoppingCartOptions {
	return &GetShoppingCartOptions{}
}

// Build initializes the activity context and input
func (opt *GetShoppingCartOptions) Build(ctx workflow.Context, workflowID string, runID string) (workflow.Context, *xnsv1.GetWorkflowRequest, error) {
	if opt.heartbeatInterval == 0 {
		opt.heartbeatInterval = 30000000000 // 30 seconds
	}

	// configure activity options
	var ao workflow.ActivityOptions
	if opt.activityOptions != nil {
		ao = *opt.activityOptions
	} else {
		ao = workflow.ActivityOptions{}
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = 60000000000 // 1 minute
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 86400000000000 // 1 day
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	return ctx, &xnsv1.GetWorkflowRequest{
		HeartbeatInterval: durationpb.New(opt.heartbeatInterval),
		ParentClosePolicy: opt.parentClosePolicy,
		RunId:             runID,
		WorkflowId:        workflowID,
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (o *GetShoppingCartOptions) WithActivityOptions(ao workflow.ActivityOptions) *GetShoppingCartOptions {
	o.activityOptions = &ao
	return o
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (o *GetShoppingCartOptions) WithHeartbeatInterval(d time.Duration) *GetShoppingCartOptions {
	o.heartbeatInterval = d
	return o
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (o *GetShoppingCartOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *GetShoppingCartOptions {
	o.parentClosePolicy = policy
	return o
}

// ShoppingCartWithUpdateCartOptions are used to configure a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update for a(n) example.shoppingcart.v1.ShoppingCart workflow
type ShoppingCartWithUpdateCartOptions struct {
	activityOptions   *workflow.ActivityOptions
	heartbeatInterval time.Duration
	updateOptions     *UpdateCartUpdateOptions
	parentClosePolicy enumsv1.ParentClosePolicy
	workflowOptions   *ShoppingCartWorkflowOptions
}

// NewShoppingCartWithUpdateCartOptions initializes a new ShoppingCartWithUpdateCartOptions value
func NewShoppingCartWithUpdateCartOptions() *ShoppingCartWithUpdateCartOptions {
	return &ShoppingCartWithUpdateCartOptions{}
}

// Build builds the activity context and input for an update with start workflow activity
func (o *ShoppingCartWithUpdateCartOptions) Build(ctx workflow.Context, input *v1.ShoppingCartInput, update *v1.UpdateCartInput) (workflow.Context, *xnsv1.UpdateWithStartRequest, error) {
	wo := o.workflowOptions
	if wo == nil {
		wo = NewShoppingCartWorkflowOptions()
	}

	_, swreq, err := wo.Build(ctx, input)
	if err != nil {
		return nil, nil, fmt.Errorf("error building start workflow options: %w", err)
	}

	uo := o.updateOptions
	if uo == nil {
		uo = NewUpdateCartUpdateOptions()
	}

	ctx, ureq, err := uo.Build(ctx, swreq.GetStartWorkflowOptions().GetId(), "", update)
	if err != nil {
		return nil, nil, fmt.Errorf("error building update options: %w", err)
	}

	var ao workflow.ActivityOptions
	if o.activityOptions != nil {
		ao = *o.activityOptions
	}

	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = 20000000000 // 20 seconds
	}

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = time.Hour * 24
	}

	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	// configure heartbeat interval
	if o.heartbeatInterval == 0 {
		o.heartbeatInterval = 10000000000 // 10 seconds
	}

	ctx = workflow.WithActivityOptions(ctx, ao)

	if o.parentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		o.parentClosePolicy = enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL
	}

	return ctx, &xnsv1.UpdateWithStartRequest{
		HeartbeatInterval:     durationpb.New(o.heartbeatInterval),
		Input:                 swreq.GetRequest(),
		ParentClosePolicy:     convert.ToParentClosePolicy(o.parentClosePolicy),
		StartWorkflowOptions:  swreq.GetStartWorkflowOptions(),
		Update:                ureq.GetRequest(),
		UpdateWorkflowOptions: ureq.GetUpdateWorkflowOptions(),
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (o *ShoppingCartWithUpdateCartOptions) WithActivityOptions(ao workflow.ActivityOptions) *ShoppingCartWithUpdateCartOptions {
	o.activityOptions = &ao
	return o
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (o *ShoppingCartWithUpdateCartOptions) WithHeartbeatInterval(d time.Duration) *ShoppingCartWithUpdateCartOptions {
	o.heartbeatInterval = d
	return o
}

// WithParentClosePolicy can be used to customize the parent close policy for the workflow
func (o *ShoppingCartWithUpdateCartOptions) WithParentClosePolicy(p enumsv1.ParentClosePolicy) *ShoppingCartWithUpdateCartOptions {
	o.parentClosePolicy = p
	return o
}

// WithUpdateOptions can be used to customize the update options
func (o *ShoppingCartWithUpdateCartOptions) WithUpdateOptions(uo *UpdateCartUpdateOptions) *ShoppingCartWithUpdateCartOptions {
	o.updateOptions = uo
	return o
}

// WithWorkflowOptions can be used to customize the workflow options
func (o *ShoppingCartWithUpdateCartOptions) WithWorkflowOptions(wo *ShoppingCartWorkflowOptions) *ShoppingCartWithUpdateCartOptions {
	o.workflowOptions = wo
	return o
}

// ShoppingCartWithUpdateCart executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update for a(n) example.shoppingcart.v1.ShoppingCart workflow, starting it if necessary, and blocks until error or update is complete
func ShoppingCartWithUpdateCart(ctx workflow.Context, input *v1.ShoppingCartInput, update *v1.UpdateCartInput, options ...*ShoppingCartWithUpdateCartOptions) (*v1.UpdateCartOutput, ShoppingCartRun, error) {
	handle, run, err := ShoppingCartWithUpdateCartAsync(ctx, input, update, options...)
	if err != nil {
		return nil, run, err
	}
	if out, err := handle.Get(ctx); err != nil {
		return nil, run, err
	} else {
		return out, run, nil
	}
}

// ShoppingCartWithUpdateCartAsync executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update for a(n) example.shoppingcart.v1.ShoppingCart workflow, starting it if necessary, and returns a handle to the update and workflow execution
func ShoppingCartWithUpdateCartAsync(ctx workflow.Context, input *v1.ShoppingCartInput, update *v1.UpdateCartInput, options ...*ShoppingCartWithUpdateCartOptions) (UpdateCartHandle, ShoppingCartRun, error) {
	activityName := shoppingCartOptions.filterActivity("example.shoppingcart.v1.ShoppingCart.ShoppingCartWithUpdateCart")
	if activityName == "" {
		return nil, nil, shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(fmt.Sprintf("no activity registered for %s", activityName), "Unimplemented", nil))
	}
	var o *ShoppingCartWithUpdateCartOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewShoppingCartWithUpdateCartOptions()
	}
	ctx, req, err := o.Build(ctx, input, update)
	if err != nil {
		return nil, nil, shoppingCartOptions.convertError(err)
	}
	var parentClosePolicy enumsv1.ParentClosePolicy
	if p := req.GetParentClosePolicy(); p != temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED {
		parentClosePolicy = enumsv1.ParentClosePolicy(p)
	}
	ctx, cancel := workflow.WithCancel(ctx)
	handle := &updateCartHandle{
		cancel: cancel,
		future: workflow.ExecuteActivity(ctx, activityName, req),
		id:     req.GetUpdateWorkflowOptions().GetUpdateId(),
	}
	run := &shoppingCartRun{
		cancel:            cancel,
		ctx:               ctx,
		heartbeatInterval: req.GetHeartbeatInterval().AsDuration(),
		id:                req.GetStartWorkflowOptions().GetId(),
		parentClosePolicy: parentClosePolicy,
	}
	return handle, run, nil
}

// DescribeQueryOptions are used to configure a(n) example.shoppingcart.v1.ShoppingCart.Describe query execution
type DescribeQueryOptions struct {
	ActivityOptions   *workflow.ActivityOptions
	HeartbeatInterval time.Duration
}

// NewDescribeQueryOptions initializes a new DescribeQueryOptions value
func NewDescribeQueryOptions() *DescribeQueryOptions {
	return &DescribeQueryOptions{}
}

// WithActivityOptions can be used to customize the activity options
func (opts *DescribeQueryOptions) WithActivityOptions(ao workflow.ActivityOptions) *DescribeQueryOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *DescribeQueryOptions) WithHeartbeatInterval(d time.Duration) *DescribeQueryOptions {
	opts.HeartbeatInterval = d
	return opts
}

// DescribeQueryHandle provides a handle for a example.shoppingcart.v1.ShoppingCart.Describe query activity
type DescribeQueryHandle interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) (*v1.DescribeOutput, error)
}

// describeQueryHandle provides a(n) DescribeQueryHandle implementation
type describeQueryHandle struct {
	cancel func()
	future workflow.Future
}

// Cancel the underlying query activity
func (r *describeQueryHandle) Cancel(ctx workflow.Context) error {
	r.cancel()
	if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
		return err
	}
	return nil
}

// Future returns the underlying activity future
func (r *describeQueryHandle) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying query result
func (r *describeQueryHandle) Get(ctx workflow.Context) (*v1.DescribeOutput, error) {
	var resp v1.DescribeOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Describe executes a(n) example.shoppingcart.v1.ShoppingCart.Describe query and blocks until error or response received
func Describe(ctx workflow.Context, workflowID string, runID string, req *v1.DescribeInput, opts ...*DescribeQueryOptions) (*v1.DescribeOutput, error) {
	handle, err := DescribeAsync(ctx, workflowID, runID, req, opts...)
	if err != nil {
		return nil, err
	}
	return handle.Get(ctx)
}

// DescribeAsync executes a(n) example.shoppingcart.v1.ShoppingCart.Describe query and returns a handle to the activity
func DescribeAsync(ctx workflow.Context, workflowID string, runID string, req *v1.DescribeInput, opts ...*DescribeQueryOptions) (DescribeQueryHandle, error) {
	activityName := shoppingCartOptions.filterActivity(v1.DescribeQueryName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.DescribeQueryName),
			"Unimplemented",
			nil,
		)
	}

	opt := &DescribeQueryOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}

	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = time.Second * 30
	}

	// configure activity options
	var ao workflow.ActivityOptions
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	} else {
		ao = workflow.ActivityOptions{}
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 60000000000 // 1 minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	// marshal workflow request
	wreq, err := anypb.New(req)
	if err != nil {
		return nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	ctx, cancel := workflow.WithCancel(ctx)
	return &describeQueryHandle{
		cancel: cancel,
		future: workflow.ExecuteActivity(ctx, activityName, &xnsv1.QueryRequest{
			HeartbeatInterval: durationpb.New(opt.HeartbeatInterval),
			WorkflowId:        workflowID,
			RunId:             runID,
			Request:           wreq,
		}),
	}, nil
}

// CheckoutSignalOptions are used to configure a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal execution
type CheckoutSignalOptions struct {
	ActivityOptions   *workflow.ActivityOptions
	HeartbeatInterval time.Duration
}

// NewCheckoutSignalOptions initializes a new CheckoutSignalOptions value
func NewCheckoutSignalOptions() *CheckoutSignalOptions {
	return &CheckoutSignalOptions{}
}

// WithActivityOptions can be used to customize the activity options
func (opts *CheckoutSignalOptions) WithActivityOptions(ao workflow.ActivityOptions) *CheckoutSignalOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *CheckoutSignalOptions) WithHeartbeatInterval(d time.Duration) *CheckoutSignalOptions {
	opts.HeartbeatInterval = d
	return opts
}

// CheckoutSignalHandle provides a handle for a example.shoppingcart.v1.ShoppingCart.Checkout signal activity
type CheckoutSignalHandle interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error
	// Future returns the inner workflow.Future
	Future() workflow.Future
	// Get returns the inner workflow.Future
	Get(workflow.Context) error
}

// checkoutSignalHandle provides a(n) CheckoutQueryHandle implementation
type checkoutSignalHandle struct {
	cancel func()
	future workflow.Future
}

// Cancel the underlying signal activity
func (r *checkoutSignalHandle) Cancel(ctx workflow.Context) error {
	r.cancel()
	if err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
		return err
	}
	return nil
}

// Future returns the underlying activity future
func (r *checkoutSignalHandle) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion
func (r *checkoutSignalHandle) Get(ctx workflow.Context) error {
	return r.future.Get(ctx, nil)
}

// Checkout executes a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal
func Checkout(ctx workflow.Context, workflowID string, runID string, req *v1.CheckoutInput, opts ...*CheckoutSignalOptions) error {
	handle, err := CheckoutAsync(ctx, workflowID, runID, req, opts...)
	if err != nil {
		return err
	}
	return handle.Get(ctx)
}

// CheckoutAsync executes a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal
func CheckoutAsync(ctx workflow.Context, workflowID string, runID string, req *v1.CheckoutInput, opts ...*CheckoutSignalOptions) (CheckoutSignalHandle, error) {
	activityName := shoppingCartOptions.filterActivity(v1.CheckoutSignalName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.CheckoutSignalName),
			"Unimplemented",
			nil,
		)
	}

	opt := &CheckoutSignalOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}

	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = time.Second * 30
	}

	// configure activity options
	var ao workflow.ActivityOptions
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	} else {
		ao = workflow.ActivityOptions{}
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 60000000000 // 1 minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	// marshal workflow request
	wreq, err := anypb.New(req)
	if err != nil {
		return nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	ctx, cancel := workflow.WithCancel(ctx)
	return &checkoutSignalHandle{
		cancel: cancel,
		future: workflow.ExecuteActivity(ctx, activityName, &xnsv1.SignalRequest{
			HeartbeatInterval: durationpb.New(opt.HeartbeatInterval),
			WorkflowId:        workflowID,
			RunId:             runID,
			Request:           wreq,
		}),
	}, nil
}

// UpdateCartUpdateOptions are used to configure a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update execution
type UpdateCartUpdateOptions struct {
	ActivityOptions       *workflow.ActivityOptions
	HeartbeatInterval     time.Duration
	UpdateWorkflowOptions *client.UpdateWorkflowOptions
}

// NewUpdateCartUpdateOptions initializes a new UpdateCartUpdateOptions value
func NewUpdateCartUpdateOptions() *UpdateCartUpdateOptions {
	return &UpdateCartUpdateOptions{}
}

// Build initializes the update options
func (opt *UpdateCartUpdateOptions) Build(ctx workflow.Context, workflowID string, runID string, input *v1.UpdateCartInput) (workflow.Context, *xnsv1.UpdateRequest, error) {
	// configure activity options
	var ao workflow.ActivityOptions
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	} else {
		ao = workflow.ActivityOptions{}
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = 60000000000 // 1 minute
	}
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = time.Hour * 24
	}

	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	// configure heartbeat interval
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = 30000000000 // 30 seconds
	}

	ctx = workflow.WithActivityOptions(ctx, ao)

	uo := client.UpdateWorkflowOptions{}
	if opt.UpdateWorkflowOptions != nil {
		uo = *opt.UpdateWorkflowOptions
	}
	uo.WorkflowID = workflowID
	uo.RunID = runID
	if uo.UpdateID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := expression.EvalExpression(v1.UpdateCartIdexpression, input.ProtoReflect())
			if err != nil {
				workflow.GetLogger(ctx).Error("error evaluating id expression for \"example.shoppingcart.v1.ShoppingCart.UpdateCart\" update", "error", err)
				return nil
			}
			return id
		}).Get(&uo.UpdateID); err != nil {
			return nil, nil, err
		}
	}
	if uo.UpdateID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating update id", "error", err)
				return nil
			}
			return id
		}).Get(&uo.UpdateID); err != nil {
			return nil, nil, err
		}
	}
	if uo.UpdateID == "" {
		return nil, nil, temporal.NewNonRetryableApplicationError("update id is required", "InvalidArgument", nil)
	}

	uopb, err := xns.MarshalUpdateWorkflowOptions(uo)
	if err != nil {
		return nil, nil, fmt.Errorf("error marshalling update workflow options: %w", err)
	}

	inpb, err := anypb.New(input)
	if err != nil {
		return nil, nil, fmt.Errorf("error marshalling update request: %w", err)
	}

	return ctx, &xnsv1.UpdateRequest{
		HeartbeatInterval:     durationpb.New(opt.HeartbeatInterval),
		Request:               inpb,
		UpdateWorkflowOptions: uopb,
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (opts *UpdateCartUpdateOptions) WithActivityOptions(ao workflow.ActivityOptions) *UpdateCartUpdateOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *UpdateCartUpdateOptions) WithHeartbeatInterval(d time.Duration) *UpdateCartUpdateOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithUpdateWorkflowOptions can be used to customize the update workflow options
func (opts *UpdateCartUpdateOptions) WithUpdateWorkflowOptions(uwo client.UpdateWorkflowOptions) *UpdateCartUpdateOptions {
	opts.UpdateWorkflowOptions = &uwo
	return opts
}

// UpdateCartHandle provides a handle to a example.shoppingcart.v1.ShoppingCart.UpdateCart workflow update
type UpdateCartHandle interface {
	// Cancel cancels the update activity
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get blocks on update completion and returns the result
	Get(workflow.Context) (*v1.UpdateCartOutput, error)

	// ID returns the update id
	ID() string
}

// updateCartHandle provides a(n) UpdateCartHandle implementation
type updateCartHandle struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow update
func (r *updateCartHandle) Cancel(ctx workflow.Context) error {
	r.cancel()
	if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
		return err
	}
	return nil
}

// Future returns the underlying activity future
func (r *updateCartHandle) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying update result
func (r *updateCartHandle) Get(ctx workflow.Context) (*v1.UpdateCartOutput, error) {
	var resp v1.UpdateCartOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *updateCartHandle) ID() string {
	return r.id
}

// UpdateCart executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update and blocks until error or response received
func UpdateCart(ctx workflow.Context, workflowID string, runID string, req *v1.UpdateCartInput, opts ...*UpdateCartUpdateOptions) (*v1.UpdateCartOutput, error) {
	run, err := UpdateCartAsync(ctx, workflowID, runID, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// UpdateCartAsync executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update and blocks until error or response received
func UpdateCartAsync(ctx workflow.Context, workflowID string, runID string, input *v1.UpdateCartInput, opts ...*UpdateCartUpdateOptions) (UpdateCartHandle, error) {
	activityName := shoppingCartOptions.filterActivity(v1.UpdateCartUpdateName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.UpdateCartUpdateName),
			"Unimplemented",
			nil,
		)
	}

	var opt *UpdateCartUpdateOptions
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	} else {
		opt = NewUpdateCartUpdateOptions()
	}

	ctx, req, err := opt.Build(ctx, workflowID, runID, input)
	if err != nil {
		return nil, err
	}
	ctx, cancel := workflow.WithCancel(ctx)
	return &updateCartHandle{
		cancel: cancel,
		id:     req.GetUpdateWorkflowOptions().GetUpdateId(),
		future: workflow.ExecuteActivity(ctx, activityName, req),
	}, nil
}

// CancelShoppingCartWorkflow cancels an existing workflow
func CancelShoppingCartWorkflow(ctx workflow.Context, workflowID string, runID string) error {
	return CancelShoppingCartWorkflowAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// CancelShoppingCartWorkflowAsync cancels an existing workflow
func CancelShoppingCartWorkflowAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	activityName := shoppingCartOptions.filterActivity("example.shoppingcart.v1.ShoppingCart.CancelWorkflow")
	if activityName == "" {
		f, s := workflow.NewFuture(ctx)
		s.SetError(temporal.NewNonRetryableApplicationError(
			"no activity registered for example.shoppingcart.v1.ShoppingCart.CancelWorkflow",
			"Unimplemented",
			nil,
		))
		return f
	}
	ao := workflow.GetActivityOptions(ctx)
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.StartToCloseTimeout = time.Minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)
	return workflow.ExecuteActivity(ctx, activityName, workflowID, runID)
}

// shoppingCartActivities provides activities that can be used to interact with a(n) ShoppingCart service's workflow, queries, signals, and updates across namespaces
type shoppingCartActivities struct {
	client v1.ShoppingCartClient
}

// CancelWorkflow cancels an existing workflow execution
func (a *shoppingCartActivities) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return a.client.CancelWorkflow(ctx, workflowID, runID)
}

// GetShoppingCart retrieves a(n) example.shoppingcart.v1.ShoppingCart workflow via an activity
func (a *shoppingCartActivities) GetShoppingCart(ctx context.Context, input *xnsv1.GetWorkflowRequest) (out *v1.ShoppingCartOutput, err error) {
	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	actx, cancel := context.WithCancel(context.Background())
	defer cancel()
	run := a.client.GetShoppingCart(actx, input.GetWorkflowId(), input.GetRunId())
	done := make(chan struct{})
	go func() {
		defer close(done)
		out, err = run.Get(actx)
	}()

	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx)

		// return retryable error if the worker is stopping
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, shoppingCartOptions.convertError(temporal.NewApplicationError("worker is stopping", "WorkerStopped"))

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				activity.GetLogger(ctx).Info("worker is stopping")
				return nil, shoppingCartOptions.convertError(temporal.NewApplicationError("worker is stopping", "WorkerStopped"))
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, shoppingCartOptions.convertError(err)
					}
				}
				return nil, shoppingCartOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-done:
			return out, shoppingCartOptions.convertError(err)
		}
	}
}

// ShoppingCart executes a(n) example.shoppingcart.v1.ShoppingCart workflow via an activity
func (a *shoppingCartActivities) ShoppingCart(ctx context.Context, input *xnsv1.WorkflowRequest) (resp *v1.ShoppingCartOutput, err error) {
	// unmarshal workflow request
	var req v1.ShoppingCartInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return nil, shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/shoppingcart/v1.ShoppingCartInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// initialize workflow execution
	actx := ctx
	if !input.GetDetached() {
		var cancel context.CancelFunc
		actx, cancel = context.WithCancel(context.Background())
		defer cancel()
	}
	var run v1.ShoppingCartRun
	run, err = a.client.ShoppingCartAsync(actx, &req, v1.NewShoppingCartOptions().WithStartWorkflowOptions(
		xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions()),
	))
	if err != nil {
		return nil, shoppingCartOptions.convertError(err)
	}

	// exit early if detached enabled
	if input.GetDetached() {
		return nil, nil
	}

	// otherwise, wait for execution to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = run.Get(actx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	// heartbeat activity while waiting for workflow execution to complete
	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID())

		// return retryable error on worker close
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, shoppingCartOptions.convertError(err)
					}
				}
				return nil, shoppingCartOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-doneCh:
			return resp, shoppingCartOptions.convertError(err)
		}
	}
}

// ShoppingCartWithUpdateCart executes a(n) example.shoppingcart.v1.ShoppingCart workflow with a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update via an activity
func (a *shoppingCartActivities) ShoppingCartWithUpdateCart(ctx context.Context, input *xnsv1.UpdateWithStartRequest) (out *v1.UpdateCartOutput, err error) {
	// unmarshal workflow request
	var req v1.ShoppingCartInput
	if err := input.GetInput().UnmarshalTo(&req); err != nil {
		return nil, shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/shoppingcart/v1.ShoppingCartInput", input.GetInput().GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// unmarshal update request
	var update v1.UpdateCartInput
	if err := input.GetUpdate().UnmarshalTo(&update); err != nil {
		return nil, shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling update request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/shoppingcart/v1.UpdateCartInput", input.GetUpdate().GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// unmarshal workflow and update options
	swo := xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions())
	uwo := xns.UnmarshalUpdateWorkflowOptions(input.GetUpdateWorkflowOptions())

	var run v1.ShoppingCartRun
	var handle v1.UpdateCartHandle
	if activity.HasHeartbeatDetails(ctx) {
		// attach to existing update and execution
		var workflowID, runID, updateID string
		if err := activity.GetHeartbeatDetails(ctx, &workflowID, &runID, &updateID); err != nil {
			return nil, shoppingCartOptions.convertError(fmt.Errorf("error getting heartbeat details: %w", err))
		} else if workflowID == "" || runID == "" || updateID == "" {
			return nil, shoppingCartOptions.convertError(fmt.Errorf("invalid heartbeat details: workflowID=%q runID=%q updateID=%s", workflowID, runID, updateID))
		}
		run = a.client.GetShoppingCart(ctx, workflowID, runID)
		handle, err = a.client.GetUpdateCart(ctx, client.GetWorkflowUpdateHandleOptions{
			RunID:      runID,
			UpdateID:   updateID,
			WorkflowID: workflowID,
		})
		if err != nil {
			return nil, shoppingCartOptions.convertError(fmt.Errorf("error getting update with id %s: %w", updateID, err))
		}
	} else {
		// execute update with start asynchronously
		handle, run, err = a.client.ShoppingCartWithUpdateCartAsync(
			ctx,
			&req,
			&update,
			v1.NewShoppingCartWithUpdateCartOptions().WithShoppingCartOptions(
				v1.NewShoppingCartOptions().WithStartWorkflowOptions(swo),
			).WithUpdateCartOptions(
				v1.NewUpdateCartOptions().WithUpdateWorkflowOptions(uwo).WithWaitPolicy(client.WorkflowUpdateStageAccepted),
			),
		)
		if err != nil {
			return nil, shoppingCartOptions.convertError(fmt.Errorf("error executing update with start: %w", err))
		}
		activity.RecordHeartbeat(ctx, run.ID(), run.RunID(), handle.UpdateID())
	}

	// return early if detached
	if input.GetDetached() {
		return nil, nil
	}

	// initialize heartbeat interval duration
	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatTimeout := activity.GetInfo(ctx).HeartbeatTimeout
		if heartbeatTimeout > 0 {
			heartbeatInterval = heartbeatTimeout / 2
		} else {
			heartbeatInterval = time.Second * 30
		}
	}

	// wait for update to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		defer close(doneCh)
		out, err = handle.Get(ctx)
	}()

	// heartbeat activity while waiting for update to complete
	for {
		select {
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID(), run.RunID(), handle.UpdateID())

		case <-activity.GetWorkerStopChannel(ctx):
			return nil, shoppingCartOptions.convertError(temporal.NewApplicationError("worker is stopping", "WorkerStopping"))

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return nil, shoppingCartOptions.convertError(temporal.NewApplicationError("worker is stopping", "WorkerStopping"))
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(ctx, time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, shoppingCartOptions.convertError(err)
					}
				}
				return nil, shoppingCartOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		case <-doneCh:
			return out, shoppingCartOptions.convertError(err)
		}
	}
}

// Describe executes a(n) example.shoppingcart.v1.ShoppingCart.Describe query via an activity
func (a *shoppingCartActivities) Describe(ctx context.Context, input *xnsv1.QueryRequest) (resp *v1.DescribeOutput, err error) {
	// unmarshal query request
	var req v1.DescribeInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return nil, shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling query request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/shoppingcart/v1.DescribeInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}
	// execute signal in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = a.client.Describe(ctx, input.GetWorkflowId(), input.GetRunId(), &req)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 10
	}

	// heartbeat activity while waiting for signal to complete
	for {
		select {
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx)
		case <-ctx.Done():
			return nil, shoppingCartOptions.convertError(ctx.Err())
		case <-doneCh:
			return resp, shoppingCartOptions.convertError(err)
		}
	}
}

// Checkout executes a(n) example.shoppingcart.v1.ShoppingCart.Checkout signal via an activity
func (a *shoppingCartActivities) Checkout(ctx context.Context, input *xnsv1.SignalRequest) (err error) {
	// unmarshal signal request
	var req v1.CheckoutInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling signal request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/shoppingcart/v1.CheckoutInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}
	// execute signal in child goroutine
	doneCh := make(chan struct{})
	go func() {
		err = a.client.Checkout(ctx, input.GetWorkflowId(), input.GetRunId(), &req)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 10
	}

	// heartbeat activity while waiting for signal to complete
	for {
		select {
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx)
		case <-ctx.Done():
			shoppingCartOptions.convertError(ctx.Err())
		case <-doneCh:
			return shoppingCartOptions.convertError(err)
		}
	}
}

// UpdateCart executes a(n) example.shoppingcart.v1.ShoppingCart.UpdateCart update via an activity
func (a *shoppingCartActivities) UpdateCart(ctx context.Context, input *xnsv1.UpdateRequest) (resp *v1.UpdateCartOutput, err error) {
	var handle v1.UpdateCartHandle
	if activity.HasHeartbeatDetails(ctx) {
		// extract update id from heartbeat details
		var updateID string
		if err := activity.GetHeartbeatDetails(ctx, &updateID); err != nil {
			return nil, shoppingCartOptions.convertError(err)
		}

		// retrieve handle for existing update
		handle, err = a.client.GetUpdateCart(ctx, client.GetWorkflowUpdateHandleOptions{
			WorkflowID: input.GetUpdateWorkflowOptions().GetWorkflowId(),
			RunID:      input.GetUpdateWorkflowOptions().GetRunId(),
			UpdateID:   updateID,
		})
		if err != nil {
			return nil, shoppingCartOptions.convertError(err)
		}
	} else {
		// unmarshal update request
		var req v1.UpdateCartInput
		if err := input.Request.UnmarshalTo(&req); err != nil {
			return nil, shoppingCartOptions.convertError(temporal.NewNonRetryableApplicationError(
				fmt.Sprintf("error unmarshalling update request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/shoppingcart/v1.UpdateCartInput", input.Request.GetTypeUrl()),
				"InvalidArgument",
				err,
			))
		}

		uo := xns.UnmarshalUpdateWorkflowOptions(input.GetUpdateWorkflowOptions())
		uo.WaitForStage = client.WorkflowUpdateStageAccepted

		// initialize update execution
		handle, err = a.client.UpdateCartAsync(
			ctx,
			input.GetUpdateWorkflowOptions().GetWorkflowId(),
			input.GetUpdateWorkflowOptions().GetRunId(),
			&req,
			v1.NewUpdateCartOptions().WithUpdateWorkflowOptions(uo),
		)
		if err != nil {
			return nil, shoppingCartOptions.convertError(err)
		}
		activity.RecordHeartbeat(ctx, handle.UpdateID())
	}

	// wait for update to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = handle.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Minute
	}

	// heartbeat activity while waiting for workflow update to complete
	for {
		select {
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, handle.UpdateID())
		case <-ctx.Done():
			return nil, shoppingCartOptions.convertError(ctx.Err())
		case <-doneCh:
			return resp, shoppingCartOptions.convertError(err)
		}
	}
}
