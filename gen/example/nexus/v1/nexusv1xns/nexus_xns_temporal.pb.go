// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal 1.14.4-next (d2f9bfc0a16171313109a7b80bc10fabc41196e0)
//	go go1.22.6
//	protoc (unknown)
//
// source: example/nexus/v1/nexus.proto
package nexusv1xns

import (
	"context"
	"errors"
	"fmt"
	v1 "github.com/cludden/protoc-gen-go-temporal/gen/example/nexus/v1"
	temporalv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	xnsv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/xns/v1"
	xns "github.com/cludden/protoc-gen-go-temporal/pkg/xns"
	uuid "github.com/google/uuid"
	enumsv1 "go.temporal.io/api/enums/v1"
	activity "go.temporal.io/sdk/activity"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	"time"
)

// OrdersOptions is used to configure example.nexus.v1.Orders xns activity registration
type OrdersOptions struct {
	// errorConverter is used to customize error
	errorConverter func(error) error
	// filter is used to filter xns activity registrations. It receives as
	// input the original activity name, and should return one of the following:
	// 1. the original activity name, for no changes
	// 2. a modified activity name, to override the original activity name
	// 3. an empty string, to skip registration
	filter func(string) string
}

// NewOrdersOptions initializes a new OrdersOptions value
func NewOrdersOptions() *OrdersOptions {
	return &OrdersOptions{}
}

// WithErrorConverter overrides the default error converter applied to xns activity errors
func (opts *OrdersOptions) WithErrorConverter(errorConverter func(error) error) *OrdersOptions {
	opts.errorConverter = errorConverter
	return opts
}

// Filter is used to filter registered xns activities or customize their name
func (opts *OrdersOptions) WithFilter(filter func(string) string) *OrdersOptions {
	opts.filter = filter
	return opts
}

// convertError is applied to all xns activity errors
func (opts *OrdersOptions) convertError(err error) error {
	if err == nil {
		return nil
	}
	if opts != nil && opts.errorConverter != nil {
		return opts.errorConverter(err)
	}
	return xns.ErrorToApplicationError(err)
}

// filterActivity is used to filter xns activity registrations
func (opts *OrdersOptions) filterActivity(name string) string {
	if opts == nil || opts.filter == nil {
		return name
	}
	return opts.filter(name)
}

// ordersOptions is a reference to the OrdersOptions initialized at registration
var ordersOptions *OrdersOptions

// RegisterOrdersActivities registers example.nexus.v1.Orders cross-namespace activities
func RegisterOrdersActivities(r worker.ActivityRegistry, c v1.OrdersClient, options ...*OrdersOptions) {
	if ordersOptions == nil && len(options) > 0 && options[0] != nil {
		ordersOptions = options[0]
	}
	a := &ordersActivities{c}
	if name := ordersOptions.filterActivity("example.nexus.v1.Orders.CancelWorkflow"); name != "" {
		r.RegisterActivityWithOptions(a.CancelWorkflow, activity.RegisterOptions{Name: name})
	}
	if name := ordersOptions.filterActivity(v1.CreateOrderWorkflowName); name != "" {
		r.RegisterActivityWithOptions(a.CreateOrder, activity.RegisterOptions{Name: name})
	}
}

// CreateOrderWorkflowOptions are used to configure a(n) example.nexus.v1.Orders.CreateOrder workflow execution
type CreateOrderWorkflowOptions struct {
	ActivityOptions      *workflow.ActivityOptions
	Detached             bool
	HeartbeatInterval    time.Duration
	ParentClosePolicy    enumsv1.ParentClosePolicy
	StartWorkflowOptions *client.StartWorkflowOptions
}

// NewCreateOrderWorkflowOptions initializes a new CreateOrderWorkflowOptions value
func NewCreateOrderWorkflowOptions() *CreateOrderWorkflowOptions {
	return &CreateOrderWorkflowOptions{}
}

// WithActivityOptions can be used to customize the activity options
func (opts *CreateOrderWorkflowOptions) WithActivityOptions(ao workflow.ActivityOptions) *CreateOrderWorkflowOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithDetached can be used to start a workflow execution and exit immediately
func (opts *CreateOrderWorkflowOptions) WithDetached(d bool) *CreateOrderWorkflowOptions {
	opts.Detached = d
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *CreateOrderWorkflowOptions) WithHeartbeatInterval(d time.Duration) *CreateOrderWorkflowOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (opts *CreateOrderWorkflowOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *CreateOrderWorkflowOptions {
	opts.ParentClosePolicy = policy
	return opts
}

// WithStartWorkflowOptions can be used to customize the start workflow options
func (opts *CreateOrderWorkflowOptions) WithStartWorkflow(swo client.StartWorkflowOptions) *CreateOrderWorkflowOptions {
	opts.StartWorkflowOptions = &swo
	return opts
}

// CreateOrderRun provides a handle to a example.nexus.v1.Orders.CreateOrder workflow execution
type CreateOrderRun interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) (*v1.CreateOrderOutput, error)

	// ID returns the workflow id
	ID() string
}

// createOrderRun provides a(n) CreateOrderRun implementation
type createOrderRun struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow execution
func (r *createOrderRun) Cancel(ctx workflow.Context) error {
	if r.cancel != nil {
		r.cancel()
		if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
			return err
		}
		return nil
	}
	return CancelOrdersWorkflow(ctx, r.id, "")
}

// Future returns the underlying activity future
func (r *createOrderRun) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying workflow result
func (r *createOrderRun) Get(ctx workflow.Context) (*v1.CreateOrderOutput, error) {
	var resp v1.CreateOrderOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *createOrderRun) ID() string {
	return r.id
}

// CreateOrder executes a(n) example.nexus.v1.Orders.CreateOrder workflow and blocks until error or response is received
func CreateOrder(ctx workflow.Context, req *v1.CreateOrderInput, opts ...*CreateOrderWorkflowOptions) (*v1.CreateOrderOutput, error) {
	run, err := CreateOrderAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// CreateOrderAsync executes a(n) example.nexus.v1.Orders.CreateOrder workflow and returns a handle to the underlying activity
func CreateOrderAsync(ctx workflow.Context, req *v1.CreateOrderInput, opts ...*CreateOrderWorkflowOptions) (CreateOrderRun, error) {
	activityName := ordersOptions.filterActivity(v1.CreateOrderWorkflowName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.CreateOrderWorkflowName),
			"Unimplemented",
			nil,
		)
	}

	opt := &CreateOrderWorkflowOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = time.Second * 30
	}

	// configure activity options
	ao := workflow.GetActivityOptions(ctx)
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 30000000000 // 30 seconds
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	// configure start workflow options
	wo := client.StartWorkflowOptions{}
	if opt.StartWorkflowOptions != nil {
		wo = *opt.StartWorkflowOptions
	}
	if wo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating workflow id", "error", err)
				return nil
			}
			return id
		}).Get(&wo.ID); err != nil {
			return nil, err
		}
	}
	if wo.ID == "" {
		return nil, temporal.NewNonRetryableApplicationError("workflow id is required", "InvalidArgument", nil)
	}

	// marshal start workflow options protobuf message
	swo, err := xns.MarshalStartWorkflowOptions(wo)
	if err != nil {
		return nil, fmt.Errorf("error marshalling start workflow options: %w", err)
	}

	// marshal workflow request protobuf message
	wreq, err := anypb.New(req)
	if err != nil {
		return nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	var parentClosePolicy temporalv1.ParentClosePolicy
	switch opt.ParentClosePolicy {
	case enumsv1.PARENT_CLOSE_POLICY_ABANDON:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON
	case enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL
	case enumsv1.PARENT_CLOSE_POLICY_TERMINATE:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE
	}

	ctx, cancel := workflow.WithCancel(ctx)
	return &createOrderRun{
		cancel: cancel,
		id:     wo.ID,
		future: workflow.ExecuteActivity(ctx, activityName, &xnsv1.WorkflowRequest{
			Detached:             opt.Detached,
			HeartbeatInterval:    durationpb.New(opt.HeartbeatInterval),
			ParentClosePolicy:    parentClosePolicy,
			Request:              wreq,
			StartWorkflowOptions: swo,
		}),
	}, nil
}

// CancelOrdersWorkflow cancels an existing workflow
func CancelOrdersWorkflow(ctx workflow.Context, workflowID string, runID string) error {
	return CancelOrdersWorkflowAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// CancelOrdersWorkflowAsync cancels an existing workflow
func CancelOrdersWorkflowAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	activityName := ordersOptions.filterActivity("example.nexus.v1.Orders.CancelWorkflow")
	if activityName == "" {
		f, s := workflow.NewFuture(ctx)
		s.SetError(temporal.NewNonRetryableApplicationError(
			"no activity registered for example.nexus.v1.Orders.CancelWorkflow",
			"Unimplemented",
			nil,
		))
		return f
	}
	ao := workflow.GetActivityOptions(ctx)
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.StartToCloseTimeout = time.Minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)
	return workflow.ExecuteActivity(ctx, activityName, workflowID, runID)
}

// ordersActivities provides activities that can be used to interact with a(n) Orders service's workflow, queries, signals, and updates across namespaces
type ordersActivities struct {
	client v1.OrdersClient
}

// CancelWorkflow cancels an existing workflow execution
func (a *ordersActivities) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return a.client.CancelWorkflow(ctx, workflowID, runID)
}

// CreateOrder executes a(n) example.nexus.v1.Orders.CreateOrder workflow via an activity
func (a *ordersActivities) CreateOrder(ctx context.Context, input *xnsv1.WorkflowRequest) (resp *v1.CreateOrderOutput, err error) {
	// unmarshal workflow request
	var req v1.CreateOrderInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return nil, ordersOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/nexus/v1.CreateOrderInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// initialize workflow execution
	var run v1.CreateOrderRun
	run, err = a.client.CreateOrderAsync(ctx, &req, v1.NewCreateOrderOptions().WithStartWorkflowOptions(
		xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions()),
	))
	if err != nil {
		return nil, ordersOptions.convertError(err)
	}

	// exit early if detached enabled
	if input.GetDetached() {
		return nil, nil
	}

	// otherwise, wait for execution to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = run.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	// heartbeat activity while waiting for workflow execution to complete
	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID())

		// return retryable error on worker close
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, ordersOptions.convertError(err)
					}
				}
				return nil, ordersOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-doneCh:
			return resp, ordersOptions.convertError(err)
		}
	}
}

// BillingOptions is used to configure example.nexus.v1.Billing xns activity registration
type BillingOptions struct {
	// errorConverter is used to customize error
	errorConverter func(error) error
	// filter is used to filter xns activity registrations. It receives as
	// input the original activity name, and should return one of the following:
	// 1. the original activity name, for no changes
	// 2. a modified activity name, to override the original activity name
	// 3. an empty string, to skip registration
	filter func(string) string
}

// NewBillingOptions initializes a new BillingOptions value
func NewBillingOptions() *BillingOptions {
	return &BillingOptions{}
}

// WithErrorConverter overrides the default error converter applied to xns activity errors
func (opts *BillingOptions) WithErrorConverter(errorConverter func(error) error) *BillingOptions {
	opts.errorConverter = errorConverter
	return opts
}

// Filter is used to filter registered xns activities or customize their name
func (opts *BillingOptions) WithFilter(filter func(string) string) *BillingOptions {
	opts.filter = filter
	return opts
}

// convertError is applied to all xns activity errors
func (opts *BillingOptions) convertError(err error) error {
	if err == nil {
		return nil
	}
	if opts != nil && opts.errorConverter != nil {
		return opts.errorConverter(err)
	}
	return xns.ErrorToApplicationError(err)
}

// filterActivity is used to filter xns activity registrations
func (opts *BillingOptions) filterActivity(name string) string {
	if opts == nil || opts.filter == nil {
		return name
	}
	return opts.filter(name)
}

// billingOptions is a reference to the BillingOptions initialized at registration
var billingOptions *BillingOptions

// RegisterBillingActivities registers example.nexus.v1.Billing cross-namespace activities
func RegisterBillingActivities(r worker.ActivityRegistry, c v1.BillingClient, options ...*BillingOptions) {
	if billingOptions == nil && len(options) > 0 && options[0] != nil {
		billingOptions = options[0]
	}
	a := &billingActivities{c}
	if name := billingOptions.filterActivity("example.nexus.v1.Billing.CancelWorkflow"); name != "" {
		r.RegisterActivityWithOptions(a.CancelWorkflow, activity.RegisterOptions{Name: name})
	}
	if name := billingOptions.filterActivity(v1.ChargeWorkflowName); name != "" {
		r.RegisterActivityWithOptions(a.Charge, activity.RegisterOptions{Name: name})
	}
}

// ChargeWorkflowOptions are used to configure a(n) example.nexus.v1.Billing.Charge workflow execution
type ChargeWorkflowOptions struct {
	ActivityOptions      *workflow.ActivityOptions
	Detached             bool
	HeartbeatInterval    time.Duration
	ParentClosePolicy    enumsv1.ParentClosePolicy
	StartWorkflowOptions *client.StartWorkflowOptions
}

// NewChargeWorkflowOptions initializes a new ChargeWorkflowOptions value
func NewChargeWorkflowOptions() *ChargeWorkflowOptions {
	return &ChargeWorkflowOptions{}
}

// WithActivityOptions can be used to customize the activity options
func (opts *ChargeWorkflowOptions) WithActivityOptions(ao workflow.ActivityOptions) *ChargeWorkflowOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithDetached can be used to start a workflow execution and exit immediately
func (opts *ChargeWorkflowOptions) WithDetached(d bool) *ChargeWorkflowOptions {
	opts.Detached = d
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *ChargeWorkflowOptions) WithHeartbeatInterval(d time.Duration) *ChargeWorkflowOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (opts *ChargeWorkflowOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *ChargeWorkflowOptions {
	opts.ParentClosePolicy = policy
	return opts
}

// WithStartWorkflowOptions can be used to customize the start workflow options
func (opts *ChargeWorkflowOptions) WithStartWorkflow(swo client.StartWorkflowOptions) *ChargeWorkflowOptions {
	opts.StartWorkflowOptions = &swo
	return opts
}

// ChargeRun provides a handle to a example.nexus.v1.Billing.Charge workflow execution
type ChargeRun interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) (*v1.ChargeOutput, error)

	// ID returns the workflow id
	ID() string
}

// chargeRun provides a(n) ChargeRun implementation
type chargeRun struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow execution
func (r *chargeRun) Cancel(ctx workflow.Context) error {
	if r.cancel != nil {
		r.cancel()
		if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
			return err
		}
		return nil
	}
	return CancelBillingWorkflow(ctx, r.id, "")
}

// Future returns the underlying activity future
func (r *chargeRun) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying workflow result
func (r *chargeRun) Get(ctx workflow.Context) (*v1.ChargeOutput, error) {
	var resp v1.ChargeOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *chargeRun) ID() string {
	return r.id
}

// Charge executes a(n) example.nexus.v1.Billing.Charge workflow and blocks until error or response is received
func Charge(ctx workflow.Context, req *v1.ChargeInput, opts ...*ChargeWorkflowOptions) (*v1.ChargeOutput, error) {
	run, err := ChargeAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// ChargeAsync executes a(n) example.nexus.v1.Billing.Charge workflow and returns a handle to the underlying activity
func ChargeAsync(ctx workflow.Context, req *v1.ChargeInput, opts ...*ChargeWorkflowOptions) (ChargeRun, error) {
	activityName := billingOptions.filterActivity(v1.ChargeWorkflowName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.ChargeWorkflowName),
			"Unimplemented",
			nil,
		)
	}

	opt := &ChargeWorkflowOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = time.Second * 30
	}

	// configure activity options
	ao := workflow.GetActivityOptions(ctx)
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 3600000000000 // 1 hour
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	// configure start workflow options
	wo := client.StartWorkflowOptions{}
	if opt.StartWorkflowOptions != nil {
		wo = *opt.StartWorkflowOptions
	}
	if wo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating workflow id", "error", err)
				return nil
			}
			return id
		}).Get(&wo.ID); err != nil {
			return nil, err
		}
	}
	if wo.ID == "" {
		return nil, temporal.NewNonRetryableApplicationError("workflow id is required", "InvalidArgument", nil)
	}

	// marshal start workflow options protobuf message
	swo, err := xns.MarshalStartWorkflowOptions(wo)
	if err != nil {
		return nil, fmt.Errorf("error marshalling start workflow options: %w", err)
	}

	// marshal workflow request protobuf message
	wreq, err := anypb.New(req)
	if err != nil {
		return nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	var parentClosePolicy temporalv1.ParentClosePolicy
	switch opt.ParentClosePolicy {
	case enumsv1.PARENT_CLOSE_POLICY_ABANDON:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON
	case enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL
	case enumsv1.PARENT_CLOSE_POLICY_TERMINATE:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE
	}

	ctx, cancel := workflow.WithCancel(ctx)
	return &chargeRun{
		cancel: cancel,
		id:     wo.ID,
		future: workflow.ExecuteActivity(ctx, activityName, &xnsv1.WorkflowRequest{
			Detached:             opt.Detached,
			HeartbeatInterval:    durationpb.New(opt.HeartbeatInterval),
			ParentClosePolicy:    parentClosePolicy,
			Request:              wreq,
			StartWorkflowOptions: swo,
		}),
	}, nil
}

// CancelBillingWorkflow cancels an existing workflow
func CancelBillingWorkflow(ctx workflow.Context, workflowID string, runID string) error {
	return CancelBillingWorkflowAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// CancelBillingWorkflowAsync cancels an existing workflow
func CancelBillingWorkflowAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	activityName := billingOptions.filterActivity("example.nexus.v1.Billing.CancelWorkflow")
	if activityName == "" {
		f, s := workflow.NewFuture(ctx)
		s.SetError(temporal.NewNonRetryableApplicationError(
			"no activity registered for example.nexus.v1.Billing.CancelWorkflow",
			"Unimplemented",
			nil,
		))
		return f
	}
	ao := workflow.GetActivityOptions(ctx)
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.StartToCloseTimeout = time.Minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)
	return workflow.ExecuteActivity(ctx, activityName, workflowID, runID)
}

// billingActivities provides activities that can be used to interact with a(n) Billing service's workflow, queries, signals, and updates across namespaces
type billingActivities struct {
	client v1.BillingClient
}

// CancelWorkflow cancels an existing workflow execution
func (a *billingActivities) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return a.client.CancelWorkflow(ctx, workflowID, runID)
}

// Charge executes a(n) example.nexus.v1.Billing.Charge workflow via an activity
func (a *billingActivities) Charge(ctx context.Context, input *xnsv1.WorkflowRequest) (resp *v1.ChargeOutput, err error) {
	// unmarshal workflow request
	var req v1.ChargeInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return nil, billingOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/nexus/v1.ChargeInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// initialize workflow execution
	var run v1.ChargeRun
	run, err = a.client.ChargeAsync(ctx, &req, v1.NewChargeOptions().WithStartWorkflowOptions(
		xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions()),
	))
	if err != nil {
		return nil, billingOptions.convertError(err)
	}

	// exit early if detached enabled
	if input.GetDetached() {
		return nil, nil
	}

	// otherwise, wait for execution to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = run.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	// heartbeat activity while waiting for workflow execution to complete
	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID())

		// return retryable error on worker close
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, billingOptions.convertError(err)
					}
				}
				return nil, billingOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-doneCh:
			return resp, billingOptions.convertError(err)
		}
	}
}

// ShippingOptions is used to configure example.nexus.v1.Shipping xns activity registration
type ShippingOptions struct {
	// errorConverter is used to customize error
	errorConverter func(error) error
	// filter is used to filter xns activity registrations. It receives as
	// input the original activity name, and should return one of the following:
	// 1. the original activity name, for no changes
	// 2. a modified activity name, to override the original activity name
	// 3. an empty string, to skip registration
	filter func(string) string
}

// NewShippingOptions initializes a new ShippingOptions value
func NewShippingOptions() *ShippingOptions {
	return &ShippingOptions{}
}

// WithErrorConverter overrides the default error converter applied to xns activity errors
func (opts *ShippingOptions) WithErrorConverter(errorConverter func(error) error) *ShippingOptions {
	opts.errorConverter = errorConverter
	return opts
}

// Filter is used to filter registered xns activities or customize their name
func (opts *ShippingOptions) WithFilter(filter func(string) string) *ShippingOptions {
	opts.filter = filter
	return opts
}

// convertError is applied to all xns activity errors
func (opts *ShippingOptions) convertError(err error) error {
	if err == nil {
		return nil
	}
	if opts != nil && opts.errorConverter != nil {
		return opts.errorConverter(err)
	}
	return xns.ErrorToApplicationError(err)
}

// filterActivity is used to filter xns activity registrations
func (opts *ShippingOptions) filterActivity(name string) string {
	if opts == nil || opts.filter == nil {
		return name
	}
	return opts.filter(name)
}

// shippingOptions is a reference to the ShippingOptions initialized at registration
var shippingOptions *ShippingOptions

// RegisterShippingActivities registers example.nexus.v1.Shipping cross-namespace activities
func RegisterShippingActivities(r worker.ActivityRegistry, c v1.ShippingClient, options ...*ShippingOptions) {
	if shippingOptions == nil && len(options) > 0 && options[0] != nil {
		shippingOptions = options[0]
	}
	a := &shippingActivities{c}
	if name := shippingOptions.filterActivity("example.nexus.v1.Shipping.CancelWorkflow"); name != "" {
		r.RegisterActivityWithOptions(a.CancelWorkflow, activity.RegisterOptions{Name: name})
	}
	if name := shippingOptions.filterActivity(v1.ShipmentWorkflowName); name != "" {
		r.RegisterActivityWithOptions(a.Shipment, activity.RegisterOptions{Name: name})
	}
}

// ShipmentWorkflowOptions are used to configure a(n) example.nexus.v1.Shipping.Shipment workflow execution
type ShipmentWorkflowOptions struct {
	ActivityOptions      *workflow.ActivityOptions
	Detached             bool
	HeartbeatInterval    time.Duration
	ParentClosePolicy    enumsv1.ParentClosePolicy
	StartWorkflowOptions *client.StartWorkflowOptions
}

// NewShipmentWorkflowOptions initializes a new ShipmentWorkflowOptions value
func NewShipmentWorkflowOptions() *ShipmentWorkflowOptions {
	return &ShipmentWorkflowOptions{}
}

// WithActivityOptions can be used to customize the activity options
func (opts *ShipmentWorkflowOptions) WithActivityOptions(ao workflow.ActivityOptions) *ShipmentWorkflowOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithDetached can be used to start a workflow execution and exit immediately
func (opts *ShipmentWorkflowOptions) WithDetached(d bool) *ShipmentWorkflowOptions {
	opts.Detached = d
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *ShipmentWorkflowOptions) WithHeartbeatInterval(d time.Duration) *ShipmentWorkflowOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (opts *ShipmentWorkflowOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *ShipmentWorkflowOptions {
	opts.ParentClosePolicy = policy
	return opts
}

// WithStartWorkflowOptions can be used to customize the start workflow options
func (opts *ShipmentWorkflowOptions) WithStartWorkflow(swo client.StartWorkflowOptions) *ShipmentWorkflowOptions {
	opts.StartWorkflowOptions = &swo
	return opts
}

// ShipmentRun provides a handle to a example.nexus.v1.Shipping.Shipment workflow execution
type ShipmentRun interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) error

	// ID returns the workflow id
	ID() string
}

// shipmentRun provides a(n) ShipmentRun implementation
type shipmentRun struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow execution
func (r *shipmentRun) Cancel(ctx workflow.Context) error {
	if r.cancel != nil {
		r.cancel()
		if err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
			return err
		}
		return nil
	}
	return CancelShippingWorkflow(ctx, r.id, "")
}

// Future returns the underlying activity future
func (r *shipmentRun) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying workflow result
func (r *shipmentRun) Get(ctx workflow.Context) error {
	if err := r.future.Get(ctx, nil); err != nil {
		return err
	}
	return nil
}

// ID returns the underlying workflow id
func (r *shipmentRun) ID() string {
	return r.id
}

// Shipment executes a(n) example.nexus.v1.Shipping.Shipment workflow and blocks until error or response is received
func Shipment(ctx workflow.Context, req *v1.ShipmentInput, opts ...*ShipmentWorkflowOptions) error {
	run, err := ShipmentAsync(ctx, req, opts...)
	if err != nil {
		return err
	}
	return run.Get(ctx)
}

// ShipmentAsync executes a(n) example.nexus.v1.Shipping.Shipment workflow and returns a handle to the underlying activity
func ShipmentAsync(ctx workflow.Context, req *v1.ShipmentInput, opts ...*ShipmentWorkflowOptions) (ShipmentRun, error) {
	activityName := shippingOptions.filterActivity(v1.ShipmentWorkflowName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.ShipmentWorkflowName),
			"Unimplemented",
			nil,
		)
	}

	opt := &ShipmentWorkflowOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = time.Second * 30
	}

	// configure activity options
	ao := workflow.GetActivityOptions(ctx)
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 3600000000000 // 1 hour
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	// configure start workflow options
	wo := client.StartWorkflowOptions{}
	if opt.StartWorkflowOptions != nil {
		wo = *opt.StartWorkflowOptions
	}
	if wo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating workflow id", "error", err)
				return nil
			}
			return id
		}).Get(&wo.ID); err != nil {
			return nil, err
		}
	}
	if wo.ID == "" {
		return nil, temporal.NewNonRetryableApplicationError("workflow id is required", "InvalidArgument", nil)
	}

	// marshal start workflow options protobuf message
	swo, err := xns.MarshalStartWorkflowOptions(wo)
	if err != nil {
		return nil, fmt.Errorf("error marshalling start workflow options: %w", err)
	}

	// marshal workflow request protobuf message
	wreq, err := anypb.New(req)
	if err != nil {
		return nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	var parentClosePolicy temporalv1.ParentClosePolicy
	switch opt.ParentClosePolicy {
	case enumsv1.PARENT_CLOSE_POLICY_ABANDON:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON
	case enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL
	case enumsv1.PARENT_CLOSE_POLICY_TERMINATE:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE
	}

	ctx, cancel := workflow.WithCancel(ctx)
	return &shipmentRun{
		cancel: cancel,
		id:     wo.ID,
		future: workflow.ExecuteActivity(ctx, activityName, &xnsv1.WorkflowRequest{
			Detached:             opt.Detached,
			HeartbeatInterval:    durationpb.New(opt.HeartbeatInterval),
			ParentClosePolicy:    parentClosePolicy,
			Request:              wreq,
			StartWorkflowOptions: swo,
		}),
	}, nil
}

// CancelShippingWorkflow cancels an existing workflow
func CancelShippingWorkflow(ctx workflow.Context, workflowID string, runID string) error {
	return CancelShippingWorkflowAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// CancelShippingWorkflowAsync cancels an existing workflow
func CancelShippingWorkflowAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	activityName := shippingOptions.filterActivity("example.nexus.v1.Shipping.CancelWorkflow")
	if activityName == "" {
		f, s := workflow.NewFuture(ctx)
		s.SetError(temporal.NewNonRetryableApplicationError(
			"no activity registered for example.nexus.v1.Shipping.CancelWorkflow",
			"Unimplemented",
			nil,
		))
		return f
	}
	ao := workflow.GetActivityOptions(ctx)
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.StartToCloseTimeout = time.Minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)
	return workflow.ExecuteActivity(ctx, activityName, workflowID, runID)
}

// shippingActivities provides activities that can be used to interact with a(n) Shipping service's workflow, queries, signals, and updates across namespaces
type shippingActivities struct {
	client v1.ShippingClient
}

// CancelWorkflow cancels an existing workflow execution
func (a *shippingActivities) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return a.client.CancelWorkflow(ctx, workflowID, runID)
}

// Shipment executes a(n) example.nexus.v1.Shipping.Shipment workflow via an activity
func (a *shippingActivities) Shipment(ctx context.Context, input *xnsv1.WorkflowRequest) (err error) {
	// unmarshal workflow request
	var req v1.ShipmentInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return shippingOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/nexus/v1.ShipmentInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// initialize workflow execution
	var run v1.ShipmentRun
	run, err = a.client.ShipmentAsync(ctx, &req, v1.NewShipmentOptions().WithStartWorkflowOptions(
		xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions()),
	))
	if err != nil {
		return shippingOptions.convertError(err)
	}

	// exit early if detached enabled
	if input.GetDetached() {
		return nil
	}

	// otherwise, wait for execution to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		err = run.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	// heartbeat activity while waiting for workflow execution to complete
	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID())

		// return retryable error on worker close
		case <-activity.GetWorkerStopChannel(ctx):
			return temporal.NewApplicationError("worker is stopping", "WorkerStopped")

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return temporal.NewApplicationError("worker is stopping", "WorkerStopped")
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return shippingOptions.convertError(err)
					}
				}
				return shippingOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-doneCh:
			return shippingOptions.convertError(err)
		}
	}
}
