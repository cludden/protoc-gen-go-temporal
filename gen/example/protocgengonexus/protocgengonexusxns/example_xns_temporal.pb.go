// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal 1.15.1-next (f1e76430351366c0f5ba139a759e99d0ffa098d7)
//	go go1.23.5
//	protoc (unknown)
//
// source: example/protocgengonexus/example.proto
package protocgengonexusxns

import (
	"context"
	"errors"
	"fmt"
	protocgengonexus "github.com/cludden/protoc-gen-go-temporal/gen/example/protocgengonexus"
	temporalv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	xnsv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/xns/v1"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	xns "github.com/cludden/protoc-gen-go-temporal/pkg/xns"
	uuid "github.com/google/uuid"
	enumsv1 "go.temporal.io/api/enums/v1"
	activity "go.temporal.io/sdk/activity"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	"time"
)

// GreetingOptions is used to configure example.protocgengonexus.Greeting xns activity registration
type GreetingOptions struct {
	// errorConverter is used to customize error
	errorConverter func(error) error
	// filter is used to filter xns activity registrations. It receives as
	// input the original activity name, and should return one of the following:
	// 1. the original activity name, for no changes
	// 2. a modified activity name, to override the original activity name
	// 3. an empty string, to skip registration
	filter func(string) string
}

// NewGreetingOptions initializes a new GreetingOptions value
func NewGreetingOptions() *GreetingOptions {
	return &GreetingOptions{}
}

// WithErrorConverter overrides the default error converter applied to xns activity errors
func (opts *GreetingOptions) WithErrorConverter(errorConverter func(error) error) *GreetingOptions {
	opts.errorConverter = errorConverter
	return opts
}

// Filter is used to filter registered xns activities or customize their name
func (opts *GreetingOptions) WithFilter(filter func(string) string) *GreetingOptions {
	opts.filter = filter
	return opts
}

// convertError is applied to all xns activity errors
func (opts *GreetingOptions) convertError(err error) error {
	if err == nil {
		return nil
	}
	if opts != nil && opts.errorConverter != nil {
		return opts.errorConverter(err)
	}
	return xns.ErrorToApplicationError(err)
}

// filterActivity is used to filter xns activity registrations
func (opts *GreetingOptions) filterActivity(name string) string {
	if opts == nil || opts.filter == nil {
		return name
	}
	return opts.filter(name)
}

// greetingOptions is a reference to the GreetingOptions initialized at registration
var greetingOptions *GreetingOptions

// RegisterGreetingActivities registers example.protocgengonexus.Greeting cross-namespace activities
func RegisterGreetingActivities(r worker.ActivityRegistry, c protocgengonexus.GreetingClient, options ...*GreetingOptions) {
	if greetingOptions == nil && len(options) > 0 && options[0] != nil {
		greetingOptions = options[0]
	}
	a := &greetingActivities{c}
	if name := greetingOptions.filterActivity("example.protocgengonexus.Greeting.CancelWorkflow"); name != "" {
		r.RegisterActivityWithOptions(a.CancelWorkflow, activity.RegisterOptions{Name: name})
	}
	if name := greetingOptions.filterActivity(protocgengonexus.GreetWorkflowName); name != "" {
		r.RegisterActivityWithOptions(a.Greet, activity.RegisterOptions{Name: name})
	}
}

// GreetWorkflowOptions are used to configure a(n) example.protocgengonexus.Greeting.Greet workflow execution
type GreetWorkflowOptions struct {
	ActivityOptions      *workflow.ActivityOptions
	Detached             bool
	HeartbeatInterval    time.Duration
	ParentClosePolicy    enumsv1.ParentClosePolicy
	StartWorkflowOptions *client.StartWorkflowOptions
}

// NewGreetWorkflowOptions initializes a new GreetWorkflowOptions value
func NewGreetWorkflowOptions() *GreetWorkflowOptions {
	return &GreetWorkflowOptions{}
}

// WithActivityOptions can be used to customize the activity options
func (opts *GreetWorkflowOptions) WithActivityOptions(ao workflow.ActivityOptions) *GreetWorkflowOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithDetached can be used to start a workflow execution and exit immediately
func (opts *GreetWorkflowOptions) WithDetached(d bool) *GreetWorkflowOptions {
	opts.Detached = d
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *GreetWorkflowOptions) WithHeartbeatInterval(d time.Duration) *GreetWorkflowOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (opts *GreetWorkflowOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *GreetWorkflowOptions {
	opts.ParentClosePolicy = policy
	return opts
}

// WithStartWorkflowOptions can be used to customize the start workflow options
func (opts *GreetWorkflowOptions) WithStartWorkflow(swo client.StartWorkflowOptions) *GreetWorkflowOptions {
	opts.StartWorkflowOptions = &swo
	return opts
}

// GreetRun provides a handle to a example.protocgengonexus.Greeting.Greet workflow execution
type GreetRun interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) (*protocgengonexus.GreetOutput, error)

	// ID returns the workflow id
	ID() string
}

// greetRun provides a(n) GreetRun implementation
type greetRun struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow execution
func (r *greetRun) Cancel(ctx workflow.Context) error {
	if r.cancel != nil {
		r.cancel()
		if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
			return err
		}
		return nil
	}
	return CancelGreetingWorkflow(ctx, r.id, "")
}

// Future returns the underlying activity future
func (r *greetRun) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying workflow result
func (r *greetRun) Get(ctx workflow.Context) (*protocgengonexus.GreetOutput, error) {
	var resp protocgengonexus.GreetOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *greetRun) ID() string {
	return r.id
}

// Greet executes a(n) example.protocgengonexus.Greeting.Greet workflow and blocks until error or response is received
func Greet(ctx workflow.Context, req *protocgengonexus.GreetInput, opts ...*GreetWorkflowOptions) (*protocgengonexus.GreetOutput, error) {
	run, err := GreetAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// GreetAsync executes a(n) example.protocgengonexus.Greeting.Greet workflow and returns a handle to the underlying activity
func GreetAsync(ctx workflow.Context, req *protocgengonexus.GreetInput, opts ...*GreetWorkflowOptions) (GreetRun, error) {
	activityName := greetingOptions.filterActivity(protocgengonexus.GreetWorkflowName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", protocgengonexus.GreetWorkflowName),
			"Unimplemented",
			nil,
		)
	}

	opt := &GreetWorkflowOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = time.Second * 30
	}

	// configure activity options
	ao := workflow.GetActivityOptions(ctx)
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 86400000000000 // 1 day
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	// configure start workflow options
	wo := client.StartWorkflowOptions{}
	if opt.StartWorkflowOptions != nil {
		wo = *opt.StartWorkflowOptions
	}
	if wo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := expression.EvalExpression(protocgengonexus.GreetIdexpression, req.ProtoReflect())
			if err != nil {
				workflow.GetLogger(ctx).Error("error evaluating id expression for \"example.protocgengonexus.Greeting.Greet\" workflow", "error", err)
				return nil
			}
			return id
		}).Get(&wo.ID); err != nil {
			return nil, err
		}
	}
	if wo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating workflow id", "error", err)
				return nil
			}
			return id
		}).Get(&wo.ID); err != nil {
			return nil, err
		}
	}
	if wo.ID == "" {
		return nil, temporal.NewNonRetryableApplicationError("workflow id is required", "InvalidArgument", nil)
	}

	// marshal start workflow options protobuf message
	swo, err := xns.MarshalStartWorkflowOptions(wo)
	if err != nil {
		return nil, fmt.Errorf("error marshalling start workflow options: %w", err)
	}

	// marshal workflow request protobuf message
	wreq, err := anypb.New(req)
	if err != nil {
		return nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	var parentClosePolicy temporalv1.ParentClosePolicy
	switch opt.ParentClosePolicy {
	case enumsv1.PARENT_CLOSE_POLICY_ABANDON:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON
	case enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL
	case enumsv1.PARENT_CLOSE_POLICY_TERMINATE:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE
	}

	ctx, cancel := workflow.WithCancel(ctx)
	return &greetRun{
		cancel: cancel,
		id:     wo.ID,
		future: workflow.ExecuteActivity(ctx, activityName, &xnsv1.WorkflowRequest{
			Detached:             opt.Detached,
			HeartbeatInterval:    durationpb.New(opt.HeartbeatInterval),
			ParentClosePolicy:    parentClosePolicy,
			Request:              wreq,
			StartWorkflowOptions: swo,
		}),
	}, nil
}

// CancelGreetingWorkflow cancels an existing workflow
func CancelGreetingWorkflow(ctx workflow.Context, workflowID string, runID string) error {
	return CancelGreetingWorkflowAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// CancelGreetingWorkflowAsync cancels an existing workflow
func CancelGreetingWorkflowAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	activityName := greetingOptions.filterActivity("example.protocgengonexus.Greeting.CancelWorkflow")
	if activityName == "" {
		f, s := workflow.NewFuture(ctx)
		s.SetError(temporal.NewNonRetryableApplicationError(
			"no activity registered for example.protocgengonexus.Greeting.CancelWorkflow",
			"Unimplemented",
			nil,
		))
		return f
	}
	ao := workflow.GetActivityOptions(ctx)
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.StartToCloseTimeout = time.Minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)
	return workflow.ExecuteActivity(ctx, activityName, workflowID, runID)
}

// greetingActivities provides activities that can be used to interact with a(n) Greeting service's workflow, queries, signals, and updates across namespaces
type greetingActivities struct {
	client protocgengonexus.GreetingClient
}

// CancelWorkflow cancels an existing workflow execution
func (a *greetingActivities) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return a.client.CancelWorkflow(ctx, workflowID, runID)
}

// Greet executes a(n) example.protocgengonexus.Greeting.Greet workflow via an activity
func (a *greetingActivities) Greet(ctx context.Context, input *xnsv1.WorkflowRequest) (resp *protocgengonexus.GreetOutput, err error) {
	// unmarshal workflow request
	var req protocgengonexus.GreetInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return nil, greetingOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/protocgengonexus.GreetInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// initialize workflow execution
	var run protocgengonexus.GreetRun
	run, err = a.client.GreetAsync(ctx, &req, protocgengonexus.NewGreetOptions().WithStartWorkflowOptions(
		xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions()),
	))
	if err != nil {
		return nil, greetingOptions.convertError(err)
	}

	// exit early if detached enabled
	if input.GetDetached() {
		return nil, nil
	}

	// otherwise, wait for execution to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = run.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	// heartbeat activity while waiting for workflow execution to complete
	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID())

		// return retryable error on worker close
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, greetingOptions.convertError(err)
					}
				}
				return nil, greetingOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-doneCh:
			return resp, greetingOptions.convertError(err)
		}
	}
}

// CallerOptions is used to configure example.protocgengonexus.Caller xns activity registration
type CallerOptions struct {
	// errorConverter is used to customize error
	errorConverter func(error) error
	// filter is used to filter xns activity registrations. It receives as
	// input the original activity name, and should return one of the following:
	// 1. the original activity name, for no changes
	// 2. a modified activity name, to override the original activity name
	// 3. an empty string, to skip registration
	filter func(string) string
}

// NewCallerOptions initializes a new CallerOptions value
func NewCallerOptions() *CallerOptions {
	return &CallerOptions{}
}

// WithErrorConverter overrides the default error converter applied to xns activity errors
func (opts *CallerOptions) WithErrorConverter(errorConverter func(error) error) *CallerOptions {
	opts.errorConverter = errorConverter
	return opts
}

// Filter is used to filter registered xns activities or customize their name
func (opts *CallerOptions) WithFilter(filter func(string) string) *CallerOptions {
	opts.filter = filter
	return opts
}

// convertError is applied to all xns activity errors
func (opts *CallerOptions) convertError(err error) error {
	if err == nil {
		return nil
	}
	if opts != nil && opts.errorConverter != nil {
		return opts.errorConverter(err)
	}
	return xns.ErrorToApplicationError(err)
}

// filterActivity is used to filter xns activity registrations
func (opts *CallerOptions) filterActivity(name string) string {
	if opts == nil || opts.filter == nil {
		return name
	}
	return opts.filter(name)
}

// callerOptions is a reference to the CallerOptions initialized at registration
var callerOptions *CallerOptions

// RegisterCallerActivities registers example.protocgengonexus.Caller cross-namespace activities
func RegisterCallerActivities(r worker.ActivityRegistry, c protocgengonexus.CallerClient, options ...*CallerOptions) {
	if callerOptions == nil && len(options) > 0 && options[0] != nil {
		callerOptions = options[0]
	}
	a := &callerActivities{c}
	if name := callerOptions.filterActivity("example.protocgengonexus.Caller.CancelWorkflow"); name != "" {
		r.RegisterActivityWithOptions(a.CancelWorkflow, activity.RegisterOptions{Name: name})
	}
	if name := callerOptions.filterActivity(protocgengonexus.CallGreetWorkflowName); name != "" {
		r.RegisterActivityWithOptions(a.CallGreet, activity.RegisterOptions{Name: name})
	}
}

// CallGreetWorkflowOptions are used to configure a(n) example.protocgengonexus.Caller.CallGreet workflow execution
type CallGreetWorkflowOptions struct {
	ActivityOptions      *workflow.ActivityOptions
	Detached             bool
	HeartbeatInterval    time.Duration
	ParentClosePolicy    enumsv1.ParentClosePolicy
	StartWorkflowOptions *client.StartWorkflowOptions
}

// NewCallGreetWorkflowOptions initializes a new CallGreetWorkflowOptions value
func NewCallGreetWorkflowOptions() *CallGreetWorkflowOptions {
	return &CallGreetWorkflowOptions{}
}

// WithActivityOptions can be used to customize the activity options
func (opts *CallGreetWorkflowOptions) WithActivityOptions(ao workflow.ActivityOptions) *CallGreetWorkflowOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithDetached can be used to start a workflow execution and exit immediately
func (opts *CallGreetWorkflowOptions) WithDetached(d bool) *CallGreetWorkflowOptions {
	opts.Detached = d
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *CallGreetWorkflowOptions) WithHeartbeatInterval(d time.Duration) *CallGreetWorkflowOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (opts *CallGreetWorkflowOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *CallGreetWorkflowOptions {
	opts.ParentClosePolicy = policy
	return opts
}

// WithStartWorkflowOptions can be used to customize the start workflow options
func (opts *CallGreetWorkflowOptions) WithStartWorkflow(swo client.StartWorkflowOptions) *CallGreetWorkflowOptions {
	opts.StartWorkflowOptions = &swo
	return opts
}

// CallGreetRun provides a handle to a example.protocgengonexus.Caller.CallGreet workflow execution
type CallGreetRun interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) (*protocgengonexus.CallGreetOutput, error)

	// ID returns the workflow id
	ID() string
}

// callGreetRun provides a(n) CallGreetRun implementation
type callGreetRun struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow execution
func (r *callGreetRun) Cancel(ctx workflow.Context) error {
	if r.cancel != nil {
		r.cancel()
		if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
			return err
		}
		return nil
	}
	return CancelCallerWorkflow(ctx, r.id, "")
}

// Future returns the underlying activity future
func (r *callGreetRun) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying workflow result
func (r *callGreetRun) Get(ctx workflow.Context) (*protocgengonexus.CallGreetOutput, error) {
	var resp protocgengonexus.CallGreetOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *callGreetRun) ID() string {
	return r.id
}

// CallGreet executes a(n) example.protocgengonexus.Caller.CallGreet workflow and blocks until error or response is received
func CallGreet(ctx workflow.Context, req *protocgengonexus.CallGreetInput, opts ...*CallGreetWorkflowOptions) (*protocgengonexus.CallGreetOutput, error) {
	run, err := CallGreetAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// CallGreetAsync executes a(n) example.protocgengonexus.Caller.CallGreet workflow and returns a handle to the underlying activity
func CallGreetAsync(ctx workflow.Context, req *protocgengonexus.CallGreetInput, opts ...*CallGreetWorkflowOptions) (CallGreetRun, error) {
	activityName := callerOptions.filterActivity(protocgengonexus.CallGreetWorkflowName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", protocgengonexus.CallGreetWorkflowName),
			"Unimplemented",
			nil,
		)
	}

	opt := &CallGreetWorkflowOptions{}
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	}
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = time.Second * 30
	}

	// configure activity options
	ao := workflow.GetActivityOptions(ctx)
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = opt.HeartbeatInterval * 2
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 86400000000000 // 1 day
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	// configure start workflow options
	wo := client.StartWorkflowOptions{}
	if opt.StartWorkflowOptions != nil {
		wo = *opt.StartWorkflowOptions
	}
	if wo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := expression.EvalExpression(protocgengonexus.CallGreetIdexpression, req.ProtoReflect())
			if err != nil {
				workflow.GetLogger(ctx).Error("error evaluating id expression for \"example.protocgengonexus.Caller.CallGreet\" workflow", "error", err)
				return nil
			}
			return id
		}).Get(&wo.ID); err != nil {
			return nil, err
		}
	}
	if wo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating workflow id", "error", err)
				return nil
			}
			return id
		}).Get(&wo.ID); err != nil {
			return nil, err
		}
	}
	if wo.ID == "" {
		return nil, temporal.NewNonRetryableApplicationError("workflow id is required", "InvalidArgument", nil)
	}

	// marshal start workflow options protobuf message
	swo, err := xns.MarshalStartWorkflowOptions(wo)
	if err != nil {
		return nil, fmt.Errorf("error marshalling start workflow options: %w", err)
	}

	// marshal workflow request protobuf message
	wreq, err := anypb.New(req)
	if err != nil {
		return nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	var parentClosePolicy temporalv1.ParentClosePolicy
	switch opt.ParentClosePolicy {
	case enumsv1.PARENT_CLOSE_POLICY_ABANDON:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON
	case enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL
	case enumsv1.PARENT_CLOSE_POLICY_TERMINATE:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE
	}

	ctx, cancel := workflow.WithCancel(ctx)
	return &callGreetRun{
		cancel: cancel,
		id:     wo.ID,
		future: workflow.ExecuteActivity(ctx, activityName, &xnsv1.WorkflowRequest{
			Detached:             opt.Detached,
			HeartbeatInterval:    durationpb.New(opt.HeartbeatInterval),
			ParentClosePolicy:    parentClosePolicy,
			Request:              wreq,
			StartWorkflowOptions: swo,
		}),
	}, nil
}

// CancelCallerWorkflow cancels an existing workflow
func CancelCallerWorkflow(ctx workflow.Context, workflowID string, runID string) error {
	return CancelCallerWorkflowAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// CancelCallerWorkflowAsync cancels an existing workflow
func CancelCallerWorkflowAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	activityName := callerOptions.filterActivity("example.protocgengonexus.Caller.CancelWorkflow")
	if activityName == "" {
		f, s := workflow.NewFuture(ctx)
		s.SetError(temporal.NewNonRetryableApplicationError(
			"no activity registered for example.protocgengonexus.Caller.CancelWorkflow",
			"Unimplemented",
			nil,
		))
		return f
	}
	ao := workflow.GetActivityOptions(ctx)
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.StartToCloseTimeout = time.Minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)
	return workflow.ExecuteActivity(ctx, activityName, workflowID, runID)
}

// callerActivities provides activities that can be used to interact with a(n) Caller service's workflow, queries, signals, and updates across namespaces
type callerActivities struct {
	client protocgengonexus.CallerClient
}

// CancelWorkflow cancels an existing workflow execution
func (a *callerActivities) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return a.client.CancelWorkflow(ctx, workflowID, runID)
}

// CallGreet executes a(n) example.protocgengonexus.Caller.CallGreet workflow via an activity
func (a *callerActivities) CallGreet(ctx context.Context, input *xnsv1.WorkflowRequest) (resp *protocgengonexus.CallGreetOutput, err error) {
	// unmarshal workflow request
	var req protocgengonexus.CallGreetInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return nil, callerOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/example/protocgengonexus.CallGreetInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// initialize workflow execution
	var run protocgengonexus.CallGreetRun
	run, err = a.client.CallGreetAsync(ctx, &req, protocgengonexus.NewCallGreetOptions().WithStartWorkflowOptions(
		xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions()),
	))
	if err != nil {
		return nil, callerOptions.convertError(err)
	}

	// exit early if detached enabled
	if input.GetDetached() {
		return nil, nil
	}

	// otherwise, wait for execution to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = run.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	// heartbeat activity while waiting for workflow execution to complete
	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID())

		// return retryable error on worker close
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, callerOptions.convertError(err)
					}
				}
				return nil, callerOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-doneCh:
			return resp, callerOptions.convertError(err)
		}
	}
}
