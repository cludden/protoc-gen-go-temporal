// Code generated by protoc-gen-go-nexus. DO NOT EDIT.
// versions:
//
//	protoc-gen-go-nexus dev (latest)
//	go go1.23.5
//	protoc (unknown)
//
// source: example/protocgengonexus/example.proto
package protocgengonexusnexus

import (
	"context"
	protocgengonexus "github.com/cludden/protoc-gen-go-temporal/gen/example/protocgengonexus"
	nexusproto "github.com/nexus-rpc/sdk-go/contrib/nexusproto"
	nexus "github.com/nexus-rpc/sdk-go/nexus"
)

// GreetingServiceName defines the fully-qualified name for the example.protocgengonexus.Greeting service.
const GreetingServiceName = "example.protocgengonexus.Greeting"

// GreetingGenerateGreetingOperationName defines the fully-qualified name for the GenerateGreeting operation.
const GreetingGenerateGreetingOperationName = "GenerateGreeting"

var GreetingGenerateGreetingOperation = nexus.NewOperationReference[*protocgengonexus.GenerateGreetingInput, *protocgengonexus.GenerateGreetingOutput](GreetingGenerateGreetingOperationName)

// GreetingGreetOperationName defines the fully-qualified name for the Greet operation.
const GreetingGreetOperationName = "Greet"

var GreetingGreetOperation = nexus.NewOperationReference[*protocgengonexus.GreetInput, *protocgengonexus.GreetOutput](GreetingGreetOperationName)

type GreetingNexusHandler interface {
	mustEmbedUnimplementedGreetingNexusHandler()
	GenerateGreeting(name string) nexus.Operation[*protocgengonexus.GenerateGreetingInput, *protocgengonexus.GenerateGreetingOutput]
	Greet(name string) nexus.Operation[*protocgengonexus.GreetInput, *protocgengonexus.GreetOutput]
}

func NewGreetingNexusService(h GreetingNexusHandler) (*nexus.Service, error) {
	svc := nexus.NewService(GreetingServiceName)
	err := svc.Register(h.GenerateGreeting(GreetingGenerateGreetingOperationName), h.Greet(GreetingGreetOperationName))
	if err != nil {
		return nil, err
	}
	return svc, nil
}

type UnimplementedGreetingNexusHandler struct{}

func (h *UnimplementedGreetingNexusHandler) mustEmbedUnimplementedGreetingNexusHandler() {}
func (h *UnimplementedGreetingNexusHandler) GenerateGreeting(name string) nexus.Operation[*protocgengonexus.GenerateGreetingInput, *protocgengonexus.GenerateGreetingOutput] {
	panic("TODO")
}
func (h *UnimplementedGreetingNexusHandler) Greet(name string) nexus.Operation[*protocgengonexus.GreetInput, *protocgengonexus.GreetOutput] {
	panic("TODO")
}

type GreetingNexusHTTPClient struct {
	client nexus.HTTPClient
}

// NewGreetingNexusHTTPClient initializes a new GreetingNexusHTTPClient.
// options.Service is overridden with the defined proto service name.
func NewGreetingNexusHTTPClient(options nexus.HTTPClientOptions) (*GreetingNexusHTTPClient, error) {
	options.Service = GreetingServiceName
	if options.Serializer == nil {
		options.Serializer = nexusproto.Serializer(nexusproto.SerializerModePreferJSON)
	}
	client, err := nexus.NewHTTPClient(options)
	if err != nil {
		return nil, err
	}
	return &GreetingNexusHTTPClient{
		client: *client,
	}, nil
}

type GreetingGenerateGreetingOperationStartResult struct {
	Successful *protocgengonexus.GenerateGreetingOutput
	Pending    *nexus.OperationHandle[*protocgengonexus.GenerateGreetingOutput]
	Links      []nexus.Link
}

func (c *GreetingNexusHTTPClient) GenerateGreetingAsync(ctx context.Context, input *protocgengonexus.GenerateGreetingInput, options nexus.StartOperationOptions) (*GreetingGenerateGreetingOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, GreetingGenerateGreetingOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := GreetingGenerateGreetingOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *GreetingNexusHTTPClient) GenerateGreeting(ctx context.Context, input *protocgengonexus.GenerateGreetingInput, options nexus.ExecuteOperationOptions) (*protocgengonexus.GenerateGreetingOutput, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, GreetingGenerateGreetingOperation, input, options)
	return output, err
}

type GreetingGreetOperationStartResult struct {
	Successful *protocgengonexus.GreetOutput
	Pending    *nexus.OperationHandle[*protocgengonexus.GreetOutput]
	Links      []nexus.Link
}

func (c *GreetingNexusHTTPClient) GreetAsync(ctx context.Context, input *protocgengonexus.GreetInput, options nexus.StartOperationOptions) (*GreetingGreetOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, GreetingGreetOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := GreetingGreetOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *GreetingNexusHTTPClient) Greet(ctx context.Context, input *protocgengonexus.GreetInput, options nexus.ExecuteOperationOptions) (*protocgengonexus.GreetOutput, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, GreetingGreetOperation, input, options)
	return output, err
}

// CallerServiceName defines the fully-qualified name for the example.protocgengonexus.Caller service.
const CallerServiceName = "example.protocgengonexus.Caller"

// CallerCallGreetOperationName defines the fully-qualified name for the CallGreet operation.
const CallerCallGreetOperationName = "CallGreet"

var CallerCallGreetOperation = nexus.NewOperationReference[*protocgengonexus.CallGreetInput, *protocgengonexus.CallGreetOutput](CallerCallGreetOperationName)

type CallerNexusHandler interface {
	mustEmbedUnimplementedCallerNexusHandler()
	CallGreet(name string) nexus.Operation[*protocgengonexus.CallGreetInput, *protocgengonexus.CallGreetOutput]
}

func NewCallerNexusService(h CallerNexusHandler) (*nexus.Service, error) {
	svc := nexus.NewService(CallerServiceName)
	err := svc.Register(h.CallGreet(CallerCallGreetOperationName))
	if err != nil {
		return nil, err
	}
	return svc, nil
}

type UnimplementedCallerNexusHandler struct{}

func (h *UnimplementedCallerNexusHandler) mustEmbedUnimplementedCallerNexusHandler() {}
func (h *UnimplementedCallerNexusHandler) CallGreet(name string) nexus.Operation[*protocgengonexus.CallGreetInput, *protocgengonexus.CallGreetOutput] {
	panic("TODO")
}

type CallerNexusHTTPClient struct {
	client nexus.HTTPClient
}

// NewCallerNexusHTTPClient initializes a new CallerNexusHTTPClient.
// options.Service is overridden with the defined proto service name.
func NewCallerNexusHTTPClient(options nexus.HTTPClientOptions) (*CallerNexusHTTPClient, error) {
	options.Service = CallerServiceName
	if options.Serializer == nil {
		options.Serializer = nexusproto.Serializer(nexusproto.SerializerModePreferJSON)
	}
	client, err := nexus.NewHTTPClient(options)
	if err != nil {
		return nil, err
	}
	return &CallerNexusHTTPClient{
		client: *client,
	}, nil
}

type CallerCallGreetOperationStartResult struct {
	Successful *protocgengonexus.CallGreetOutput
	Pending    *nexus.OperationHandle[*protocgengonexus.CallGreetOutput]
	Links      []nexus.Link
}

func (c *CallerNexusHTTPClient) CallGreetAsync(ctx context.Context, input *protocgengonexus.CallGreetInput, options nexus.StartOperationOptions) (*CallerCallGreetOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CallerCallGreetOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CallerCallGreetOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CallerNexusHTTPClient) CallGreet(ctx context.Context, input *protocgengonexus.CallGreetInput, options nexus.ExecuteOperationOptions) (*protocgengonexus.CallGreetOutput, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CallerCallGreetOperation, input, options)
	return output, err
}
