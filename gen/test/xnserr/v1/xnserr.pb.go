// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: test/xnserr/v1/xnserr.proto

package xnserrv1

import (
	_ "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	v1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/xns/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FailureInfo int32

const (
	FailureInfo_FAILURE_INFO_UNSPECIFIED              FailureInfo = 0
	FailureInfo_FAILURE_INFO_APPLICATION_ERROR        FailureInfo = 1
	FailureInfo_FAILURE_INFO_TIMEOUT                  FailureInfo = 2
	FailureInfo_FAILURE_INFO_CANCELED                 FailureInfo = 3
	FailureInfo_FAILURE_INFO_TERMINATED               FailureInfo = 4
	FailureInfo_FAILURE_INFO_ACTIVITY                 FailureInfo = 5
	FailureInfo_FAILURE_INFO_WORKFLOW_EXECUTION       FailureInfo = 6
	FailureInfo_FAILURE_INFO_CHILD_WORKFLOW_EXECUTION FailureInfo = 7
)

// Enum value maps for FailureInfo.
var (
	FailureInfo_name = map[int32]string{
		0: "FAILURE_INFO_UNSPECIFIED",
		1: "FAILURE_INFO_APPLICATION_ERROR",
		2: "FAILURE_INFO_TIMEOUT",
		3: "FAILURE_INFO_CANCELED",
		4: "FAILURE_INFO_TERMINATED",
		5: "FAILURE_INFO_ACTIVITY",
		6: "FAILURE_INFO_WORKFLOW_EXECUTION",
		7: "FAILURE_INFO_CHILD_WORKFLOW_EXECUTION",
	}
	FailureInfo_value = map[string]int32{
		"FAILURE_INFO_UNSPECIFIED":              0,
		"FAILURE_INFO_APPLICATION_ERROR":        1,
		"FAILURE_INFO_TIMEOUT":                  2,
		"FAILURE_INFO_CANCELED":                 3,
		"FAILURE_INFO_TERMINATED":               4,
		"FAILURE_INFO_ACTIVITY":                 5,
		"FAILURE_INFO_WORKFLOW_EXECUTION":       6,
		"FAILURE_INFO_CHILD_WORKFLOW_EXECUTION": 7,
	}
)

func (x FailureInfo) Enum() *FailureInfo {
	p := new(FailureInfo)
	*p = x
	return p
}

func (x FailureInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_test_xnserr_v1_xnserr_proto_enumTypes[0].Descriptor()
}

func (FailureInfo) Type() protoreflect.EnumType {
	return &file_test_xnserr_v1_xnserr_proto_enumTypes[0]
}

func (x FailureInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureInfo.Descriptor instead.
func (FailureInfo) EnumDescriptor() ([]byte, []int) {
	return file_test_xnserr_v1_xnserr_proto_rawDescGZIP(), []int{0}
}

type CallSleepRequest struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	Sleep                *durationpb.Duration     `protobuf:"bytes,1,opt,name=sleep,proto3" json:"sleep,omitempty"`
	Failure              *Failure                 `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	StartWorkflowOptions *v1.StartWorkflowOptions `protobuf:"bytes,3,opt,name=start_workflow_options,json=startWorkflowOptions,proto3" json:"start_workflow_options,omitempty"`
	RetryPolicy          *v1.RetryPolicy          `protobuf:"bytes,4,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CallSleepRequest) Reset() {
	*x = CallSleepRequest{}
	mi := &file_test_xnserr_v1_xnserr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallSleepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallSleepRequest) ProtoMessage() {}

func (x *CallSleepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnserr_v1_xnserr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallSleepRequest.ProtoReflect.Descriptor instead.
func (*CallSleepRequest) Descriptor() ([]byte, []int) {
	return file_test_xnserr_v1_xnserr_proto_rawDescGZIP(), []int{0}
}

func (x *CallSleepRequest) GetSleep() *durationpb.Duration {
	if x != nil {
		return x.Sleep
	}
	return nil
}

func (x *CallSleepRequest) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *CallSleepRequest) GetStartWorkflowOptions() *v1.StartWorkflowOptions {
	if x != nil {
		return x.StartWorkflowOptions
	}
	return nil
}

func (x *CallSleepRequest) GetRetryPolicy() *v1.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

type SleepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sleep         *durationpb.Duration   `protobuf:"bytes,1,opt,name=sleep,proto3" json:"sleep,omitempty"`
	Failure       *Failure               `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SleepRequest) Reset() {
	*x = SleepRequest{}
	mi := &file_test_xnserr_v1_xnserr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SleepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepRequest) ProtoMessage() {}

func (x *SleepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnserr_v1_xnserr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepRequest.ProtoReflect.Descriptor instead.
func (*SleepRequest) Descriptor() ([]byte, []int) {
	return file_test_xnserr_v1_xnserr_proto_rawDescGZIP(), []int{1}
}

func (x *SleepRequest) GetSleep() *durationpb.Duration {
	if x != nil {
		return x.Sleep
	}
	return nil
}

func (x *SleepRequest) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type Failure struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Message              string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	NonRetryable         bool                   `protobuf:"varint,2,opt,name=non_retryable,json=nonRetryable,proto3" json:"non_retryable,omitempty"`
	Info                 FailureInfo            `protobuf:"varint,3,opt,name=info,proto3,enum=test.xnserr.v1.FailureInfo" json:"info,omitempty"`
	ApplicationErrorType string                 `protobuf:"bytes,4,opt,name=application_error_type,json=applicationErrorType,proto3" json:"application_error_type,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Failure) Reset() {
	*x = Failure{}
	mi := &file_test_xnserr_v1_xnserr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnserr_v1_xnserr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_test_xnserr_v1_xnserr_proto_rawDescGZIP(), []int{2}
}

func (x *Failure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Failure) GetNonRetryable() bool {
	if x != nil {
		return x.NonRetryable
	}
	return false
}

func (x *Failure) GetInfo() FailureInfo {
	if x != nil {
		return x.Info
	}
	return FailureInfo_FAILURE_INFO_UNSPECIFIED
}

func (x *Failure) GetApplicationErrorType() string {
	if x != nil {
		return x.ApplicationErrorType
	}
	return ""
}

var File_test_xnserr_v1_xnserr_proto protoreflect.FileDescriptor

var file_test_xnserr_v1_xnserr_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2f, 0x78, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x78, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x78, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x72, 0x0a, 0x0c, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xaf, 0x01, 0x0a,
	0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73,
	0x65, 0x72, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x8c,
	0x02, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x32, 0x74, 0x0a,
	0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x05, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x12, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x13, 0x8a, 0xc4, 0x03, 0x0f, 0x30, 0x03, 0x40, 0x03,
	0x82, 0x01, 0x08, 0x2a, 0x02, 0x08, 0x1e, 0x42, 0x02, 0x08, 0x0a, 0x1a, 0x16, 0x8a, 0xc4, 0x03,
	0x12, 0x0a, 0x10, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x76, 0x31, 0x32, 0x6d, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x09, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0x8a, 0xc4, 0x03, 0x00, 0x1a, 0x16, 0x8a, 0xc4, 0x03, 0x12,
	0x0a, 0x10, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x76, 0x31, 0x42, 0xc2, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x58, 0x6e, 0x73, 0x65, 0x72,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x75, 0x64, 0x64, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x78, 0x6e, 0x73,
	0x65, 0x72, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x78, 0x6e, 0x73, 0x65, 0x72, 0x72, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x58, 0x6e, 0x73,
	0x65, 0x72, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x58, 0x6e,
	0x73, 0x65, 0x72, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x58,
	0x6e, 0x73, 0x65, 0x72, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x54, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x58, 0x6e, 0x73,
	0x65, 0x72, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_xnserr_v1_xnserr_proto_rawDescOnce sync.Once
	file_test_xnserr_v1_xnserr_proto_rawDescData = file_test_xnserr_v1_xnserr_proto_rawDesc
)

func file_test_xnserr_v1_xnserr_proto_rawDescGZIP() []byte {
	file_test_xnserr_v1_xnserr_proto_rawDescOnce.Do(func() {
		file_test_xnserr_v1_xnserr_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_xnserr_v1_xnserr_proto_rawDescData)
	})
	return file_test_xnserr_v1_xnserr_proto_rawDescData
}

var file_test_xnserr_v1_xnserr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_xnserr_v1_xnserr_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_test_xnserr_v1_xnserr_proto_goTypes = []any{
	(FailureInfo)(0),                // 0: test.xnserr.v1.FailureInfo
	(*CallSleepRequest)(nil),        // 1: test.xnserr.v1.CallSleepRequest
	(*SleepRequest)(nil),            // 2: test.xnserr.v1.SleepRequest
	(*Failure)(nil),                 // 3: test.xnserr.v1.Failure
	(*durationpb.Duration)(nil),     // 4: google.protobuf.Duration
	(*v1.StartWorkflowOptions)(nil), // 5: temporal.xns.v1.StartWorkflowOptions
	(*v1.RetryPolicy)(nil),          // 6: temporal.xns.v1.RetryPolicy
	(*emptypb.Empty)(nil),           // 7: google.protobuf.Empty
}
var file_test_xnserr_v1_xnserr_proto_depIdxs = []int32{
	4, // 0: test.xnserr.v1.CallSleepRequest.sleep:type_name -> google.protobuf.Duration
	3, // 1: test.xnserr.v1.CallSleepRequest.failure:type_name -> test.xnserr.v1.Failure
	5, // 2: test.xnserr.v1.CallSleepRequest.start_workflow_options:type_name -> temporal.xns.v1.StartWorkflowOptions
	6, // 3: test.xnserr.v1.CallSleepRequest.retry_policy:type_name -> temporal.xns.v1.RetryPolicy
	4, // 4: test.xnserr.v1.SleepRequest.sleep:type_name -> google.protobuf.Duration
	3, // 5: test.xnserr.v1.SleepRequest.failure:type_name -> test.xnserr.v1.Failure
	0, // 6: test.xnserr.v1.Failure.info:type_name -> test.xnserr.v1.FailureInfo
	2, // 7: test.xnserr.v1.Server.Sleep:input_type -> test.xnserr.v1.SleepRequest
	1, // 8: test.xnserr.v1.Client.CallSleep:input_type -> test.xnserr.v1.CallSleepRequest
	7, // 9: test.xnserr.v1.Server.Sleep:output_type -> google.protobuf.Empty
	7, // 10: test.xnserr.v1.Client.CallSleep:output_type -> google.protobuf.Empty
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_test_xnserr_v1_xnserr_proto_init() }
func file_test_xnserr_v1_xnserr_proto_init() {
	if File_test_xnserr_v1_xnserr_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_xnserr_v1_xnserr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_test_xnserr_v1_xnserr_proto_goTypes,
		DependencyIndexes: file_test_xnserr_v1_xnserr_proto_depIdxs,
		EnumInfos:         file_test_xnserr_v1_xnserr_proto_enumTypes,
		MessageInfos:      file_test_xnserr_v1_xnserr_proto_msgTypes,
	}.Build()
	File_test_xnserr_v1_xnserr_proto = out.File
	file_test_xnserr_v1_xnserr_proto_rawDesc = nil
	file_test_xnserr_v1_xnserr_proto_goTypes = nil
	file_test_xnserr_v1_xnserr_proto_depIdxs = nil
}
