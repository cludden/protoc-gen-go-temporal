// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal dev (latest)
//	protoc (unknown)
//
// source: test/issue-125/v1/issue-125.proto
package issue_125v1xns

import (
	"context"
	"errors"
	"fmt"
	temporalv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	xnsv1 "github.com/cludden/protoc-gen-go-temporal/gen/temporal/xns/v1"
	v1 "github.com/cludden/protoc-gen-go-temporal/gen/test/issue-125/v1"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	xns "github.com/cludden/protoc-gen-go-temporal/pkg/xns"
	uuid "github.com/google/uuid"
	enumsv1 "go.temporal.io/api/enums/v1"
	activity "go.temporal.io/sdk/activity"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	"time"
)

// Issue125ServiceOptions is used to configure issue_125.v1.Issue125Service xns activity registration
type Issue125ServiceOptions struct {
	// errorConverter is used to customize error
	errorConverter func(error) error
	// filter is used to filter xns activity registrations. It receives as
	// input the original activity name, and should return one of the following:
	// 1. the original activity name, for no changes
	// 2. a modified activity name, to override the original activity name
	// 3. an empty string, to skip registration
	filter func(string) string
}

// NewIssue125ServiceOptions initializes a new Issue125ServiceOptions value
func NewIssue125ServiceOptions() *Issue125ServiceOptions {
	return &Issue125ServiceOptions{}
}

// WithErrorConverter overrides the default error converter applied to xns activity errors
func (opts *Issue125ServiceOptions) WithErrorConverter(errorConverter func(error) error) *Issue125ServiceOptions {
	opts.errorConverter = errorConverter
	return opts
}

// Filter is used to filter registered xns activities or customize their name
func (opts *Issue125ServiceOptions) WithFilter(filter func(string) string) *Issue125ServiceOptions {
	opts.filter = filter
	return opts
}

// convertError is applied to all xns activity errors
func (opts *Issue125ServiceOptions) convertError(err error) error {
	if err == nil {
		return nil
	}
	if opts != nil && opts.errorConverter != nil {
		return opts.errorConverter(err)
	}
	return xns.ErrorToApplicationError(err)
}

// filterActivity is used to filter xns activity registrations
func (opts *Issue125ServiceOptions) filterActivity(name string) string {
	if opts == nil || opts.filter == nil {
		return name
	}
	return opts.filter(name)
}

// issue125ServiceOptions is a reference to the Issue125ServiceOptions initialized at registration
var issue125ServiceOptions *Issue125ServiceOptions

// RegisterIssue125ServiceActivities registers issue_125.v1.Issue125Service cross-namespace activities
func RegisterIssue125ServiceActivities(r worker.ActivityRegistry, c v1.Issue125ServiceClient, options ...*Issue125ServiceOptions) {
	if issue125ServiceOptions == nil && len(options) > 0 && options[0] != nil {
		issue125ServiceOptions = options[0]
	}
	a := &issue125ServiceActivities{c}
	if name := issue125ServiceOptions.filterActivity("issue_125.v1.Issue125Service.CancelWorkflow"); name != "" {
		r.RegisterActivityWithOptions(a.CancelWorkflow, activity.RegisterOptions{Name: name})
	}
	if name := issue125ServiceOptions.filterActivity(v1.FooWorkflowName); name != "" {
		r.RegisterActivityWithOptions(a.Foo, activity.RegisterOptions{Name: name})
	}
	if name := issue125ServiceOptions.filterActivity("issue_125.v1.Issue125Service.GetFoo"); name != "" {
		r.RegisterActivityWithOptions(a.GetFoo, activity.RegisterOptions{Name: name})
	}
	if name := issue125ServiceOptions.filterActivity(v1.BarUpdateName); name != "" {
		r.RegisterActivityWithOptions(a.Bar, activity.RegisterOptions{Name: name})
	}
	if name := issue125ServiceOptions.filterActivity(v1.BazUpdateName); name != "" {
		r.RegisterActivityWithOptions(a.Baz, activity.RegisterOptions{Name: name})
	}
}

// FooWorkflowOptions are used to configure a(n) issue_125.v1.Issue125Service.Foo workflow execution
type FooWorkflowOptions struct {
	ActivityOptions      *workflow.ActivityOptions
	Detached             bool
	HeartbeatInterval    time.Duration
	HeartbeatTimeout     time.Duration
	ParentClosePolicy    enumsv1.ParentClosePolicy
	StartWorkflowOptions *client.StartWorkflowOptions
}

// NewFooWorkflowOptions initializes a new FooWorkflowOptions value
func NewFooWorkflowOptions() *FooWorkflowOptions {
	return &FooWorkflowOptions{}
}

// Build initializes the activity context and input
func (opts *FooWorkflowOptions) Build(ctx workflow.Context, input *v1.FooInput) (workflow.Context, *xnsv1.WorkflowRequest, error) {
	// initialize start workflow options
	swo := client.StartWorkflowOptions{}
	if opts.StartWorkflowOptions != nil {
		swo = *opts.StartWorkflowOptions
	}

	// initialize workflow id if not set
	if swo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := expression.EvalExpression(v1.FooIdexpression, input.ProtoReflect())
			if err != nil {
				workflow.GetLogger(ctx).Error("error evaluating id expression for \"issue_125.v1.Issue125Service.Foo\" workflow", "error", err)
				return nil
			}
			return id
		}).Get(&swo.ID); err != nil {
			return nil, nil, err
		}
	}
	if swo.ID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating workflow id", "error", err)
				return nil
			}
			return id
		}).Get(&swo.ID); err != nil {
			return nil, nil, err
		}
	}
	if swo.ID == "" {
		return nil, nil, temporal.NewNonRetryableApplicationError("workflow id is required", "InvalidArgument", nil)
	}

	// marshal workflow request protobuf message
	inputpb, err := anypb.New(input)
	if err != nil {
		return ctx, nil, fmt.Errorf("error marshalling workflow request: %w", err)
	}

	// marshal start workflow options protobuf message
	swopb, err := xns.MarshalStartWorkflowOptions(swo)
	if err != nil {
		return ctx, nil, fmt.Errorf("error marshalling start workflow options: %w", err)
	}

	// marshal parent close policy protobuf message
	var parentClosePolicy temporalv1.ParentClosePolicy
	switch opts.ParentClosePolicy {
	case enumsv1.PARENT_CLOSE_POLICY_ABANDON:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON
	case enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL
	case enumsv1.PARENT_CLOSE_POLICY_TERMINATE:
		parentClosePolicy = temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE
	}

	// initialize xns activity options
	ao := workflow.ActivityOptions{}
	if opts.ActivityOptions != nil {
		ao = *opts.ActivityOptions
	}

	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = time.Second * 60
	}

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = time.Hour * 24
	}

	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	// configure heartbeat interval
	if opts.HeartbeatInterval == 0 {
		opts.HeartbeatInterval = ao.HeartbeatTimeout / 2
	}

	ctx = workflow.WithActivityOptions(ctx, ao)

	return ctx, &xnsv1.WorkflowRequest{
		Detached:             opts.Detached,
		HeartbeatInterval:    durationpb.New(opts.HeartbeatInterval),
		ParentClosePolicy:    parentClosePolicy,
		Request:              inputpb,
		StartWorkflowOptions: swopb,
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (opts *FooWorkflowOptions) WithActivityOptions(ao workflow.ActivityOptions) *FooWorkflowOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithDetached can be used to start a workflow execution and exit immediately
func (opts *FooWorkflowOptions) WithDetached(d bool) *FooWorkflowOptions {
	opts.Detached = d
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *FooWorkflowOptions) WithHeartbeatInterval(d time.Duration) *FooWorkflowOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithHeartbeatTimeout can be used to customize the activity heartbeat timeout
func (opts *FooWorkflowOptions) WithHeartbeatTimeout(d time.Duration) *FooWorkflowOptions {
	opts.HeartbeatTimeout = d
	return opts
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (opts *FooWorkflowOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *FooWorkflowOptions {
	opts.ParentClosePolicy = policy
	return opts
}

// WithStartWorkflowOptions can be used to customize the start workflow options
func (opts *FooWorkflowOptions) WithStartWorkflow(swo client.StartWorkflowOptions) *FooWorkflowOptions {
	opts.StartWorkflowOptions = &swo
	return opts
}

// FooRun provides a handle to a issue_125.v1.Issue125Service.Foo workflow execution
type FooRun interface {
	// Cancel cancels the workflow
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get returns the inner workflow.Future
	Get(workflow.Context) (*v1.FooOutput, error)

	// ID returns the workflow id
	ID() string

	// Bar executes a(n) issue_125.v1.Issue125Service.Bar update and blocks until completion
	Bar(workflow.Context, *v1.BarInput, ...*BarUpdateOptions) (*v1.BarOutput, error)

	// BarAsync executes a(n) issue_125.v1.Issue125Service.Bar update and returns a handle to the underlying activity
	BarAsync(workflow.Context, *v1.BarInput, ...*BarUpdateOptions) (BarHandle, error)

	// Baz executes a(n) issue_125.v1.Issue125Service.Baz update and blocks until completion
	Baz(workflow.Context, *v1.BazInput, ...*BazUpdateOptions) (*v1.BazOutput, error)

	// BazAsync executes a(n) issue_125.v1.Issue125Service.Baz update and returns a handle to the underlying activity
	BazAsync(workflow.Context, *v1.BazInput, ...*BazUpdateOptions) (BazHandle, error)
}

// fooRun provides a(n) FooRun implementation
type fooRun struct {
	cancel            func()
	ctx               workflow.Context
	future            workflow.Future
	id                string
	heartbeatInterval time.Duration
	parentClosePolicy enumsv1.ParentClosePolicy
}

// Cancel the underlying workflow execution
func (r *fooRun) Cancel(ctx workflow.Context) error {
	if r.cancel != nil {
		r.cancel()
		if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
			return err
		}
		return nil
	}
	return CancelIssue125ServiceWorkflow(ctx, r.id, "")
}

// Future returns the underlying activity future
func (r *fooRun) Future() workflow.Future {
	if r.future == nil {
		rr := GetFooAsync(r.ctx, r.id, "").(*fooRun)
		r.future = rr.future
		r.cancel = rr.cancel
	}
	return r.future
}

// Get blocks on activity completion and returns the underlying workflow result
func (r *fooRun) Get(ctx workflow.Context) (*v1.FooOutput, error) {
	ctx, cancel := workflow.WithCancel(ctx)
	if r.future == nil {
		rr := GetFooAsync(ctx, r.id, "", NewGetFooOptions().WithParentClosePolicy(r.parentClosePolicy).WithHeartbeatInterval(r.heartbeatInterval)).(*fooRun)
		r.future = rr.future
		r.cancel = cancel
	}
	var resp v1.FooOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *fooRun) ID() string {
	return r.id
}

// Bar executes a(n) issue_125.v1.Issue125Service.Bar update and blocks until completion
func (r *fooRun) Bar(ctx workflow.Context, req *v1.BarInput, opts ...*BarUpdateOptions) (*v1.BarOutput, error) {
	return Bar(ctx, r.ID(), "", req, opts...)
}

// BarAsync executes a(n) issue_125.v1.Issue125Service.Bar update and returns a handle to the underlying activity
func (r *fooRun) BarAsync(ctx workflow.Context, req *v1.BarInput, opts ...*BarUpdateOptions) (BarHandle, error) {
	return BarAsync(ctx, r.ID(), "", req, opts...)
}

// Baz executes a(n) issue_125.v1.Issue125Service.Baz update and blocks until completion
func (r *fooRun) Baz(ctx workflow.Context, req *v1.BazInput, opts ...*BazUpdateOptions) (*v1.BazOutput, error) {
	return Baz(ctx, r.ID(), "", req, opts...)
}

// BazAsync executes a(n) issue_125.v1.Issue125Service.Baz update and returns a handle to the underlying activity
func (r *fooRun) BazAsync(ctx workflow.Context, req *v1.BazInput, opts ...*BazUpdateOptions) (BazHandle, error) {
	return BazAsync(ctx, r.ID(), "", req, opts...)
}

// Foo executes a(n) issue_125.v1.Issue125Service.Foo workflow and blocks until error or response is received
func Foo(ctx workflow.Context, req *v1.FooInput, opts ...*FooWorkflowOptions) (*v1.FooOutput, error) {
	run, err := FooAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// FooAsync executes a(n) issue_125.v1.Issue125Service.Foo workflow and returns a handle to the underlying activity
func FooAsync(ctx workflow.Context, input *v1.FooInput, opts ...*FooWorkflowOptions) (FooRun, error) {
	activityName := issue125ServiceOptions.filterActivity(v1.FooWorkflowName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.FooWorkflowName),
			"Unimplemented",
			nil,
		)
	}

	var opt *FooWorkflowOptions
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	} else {
		opt = NewFooWorkflowOptions()
	}
	ctx, req, err := opt.Build(ctx, input)
	if err != nil {
		return nil, issue125ServiceOptions.convertError(err)
	}
	ctx, cancel := workflow.WithCancel(ctx)
	return &fooRun{
		cancel: cancel,
		future: workflow.ExecuteActivity(ctx, activityName, req),
		id:     req.GetStartWorkflowOptions().GetId(),
	}, nil
}

// GetFoo returns a(n) issue_125.v1.Issue125Service.Foo workflow execution
func GetFoo(ctx workflow.Context, workflowID string, runID string, options ...*GetFooOptions) (out *v1.FooOutput, err error) {
	out, err = GetFooAsync(ctx, workflowID, runID, options...).Get(ctx)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetFooAsync returns a handle to a(n) issue_125.v1.Issue125Service.Foo workflow execution
func GetFooAsync(ctx workflow.Context, workflowID string, runID string, options ...*GetFooOptions) FooRun {
	activityName := issue125ServiceOptions.filterActivity("issue_125.v1.Issue125Service.GetFoo")
	if activityName == "" {
		f, set := workflow.NewFuture(ctx)
		set.SetError(temporal.NewNonRetryableApplicationError(fmt.Sprintf("no activity registered for %s", activityName), "Unimplemented", nil))
		return &fooRun{
			future: f,
			id:     workflowID,
		}
	}
	var opt *GetFooOptions
	if len(options) > 0 && options[0] != nil {
		opt = options[0]
	} else {
		opt = NewGetFooOptions()
	}
	ctx, req, err := opt.Build(ctx, workflowID, runID)
	if err != nil {
		f, set := workflow.NewFuture(ctx)
		set.SetError(issue125ServiceOptions.convertError(temporal.NewNonRetryableApplicationError(fmt.Sprintf("no activity registered for %s", activityName), "Unimplemented", nil)))
		return &fooRun{
			future: f,
			id:     workflowID,
		}
	}
	ctx, cancel := workflow.WithCancel(ctx)
	return &fooRun{
		cancel: cancel,
		future: workflow.ExecuteActivity(ctx, activityName, req),
		id:     workflowID,
	}
}

// GetFooOptions are used to configure a(n) issue_125.v1.Issue125Service.Foo workflow execution getter activity
type GetFooOptions struct {
	activityOptions   *workflow.ActivityOptions
	heartbeatInterval time.Duration
	parentClosePolicy enumsv1.ParentClosePolicy
}

// NewGetFooOptions initializes a new GetFooOptions value
func NewGetFooOptions() *GetFooOptions {
	return &GetFooOptions{}
}

// Build initializes the activity context and input
func (opt *GetFooOptions) Build(ctx workflow.Context, workflowID string, runID string) (workflow.Context, *xnsv1.GetWorkflowRequest, error) {
	if opt.heartbeatInterval == 0 {
		opt.heartbeatInterval = 30000000000 // 30 seconds
	}

	// configure activity options
	var ao workflow.ActivityOptions
	if opt.activityOptions != nil {
		ao = *opt.activityOptions
	} else {
		ao = workflow.ActivityOptions{}
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = 60000000000 // 1 minute
	}
	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = 86400000000000 // 1 day
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	return ctx, &xnsv1.GetWorkflowRequest{
		HeartbeatInterval: durationpb.New(opt.heartbeatInterval),
		ParentClosePolicy: opt.parentClosePolicy,
		RunId:             runID,
		WorkflowId:        workflowID,
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (o *GetFooOptions) WithActivityOptions(ao workflow.ActivityOptions) *GetFooOptions {
	o.activityOptions = &ao
	return o
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (o *GetFooOptions) WithHeartbeatInterval(d time.Duration) *GetFooOptions {
	o.heartbeatInterval = d
	return o
}

// WithParentClosePolicy can be used to customize the cancellation propagation behavior
func (o *GetFooOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *GetFooOptions {
	o.parentClosePolicy = policy
	return o
}

// BarUpdateOptions are used to configure a(n) issue_125.v1.Issue125Service.Bar update execution
type BarUpdateOptions struct {
	ActivityOptions       *workflow.ActivityOptions
	HeartbeatInterval     time.Duration
	UpdateWorkflowOptions *client.UpdateWorkflowOptions
}

// NewBarUpdateOptions initializes a new BarUpdateOptions value
func NewBarUpdateOptions() *BarUpdateOptions {
	return &BarUpdateOptions{}
}

// Build initializes the update options
func (opt *BarUpdateOptions) Build(ctx workflow.Context, workflowID string, runID string, input *v1.BarInput) (workflow.Context, *xnsv1.UpdateRequest, error) {
	// configure activity options
	var ao workflow.ActivityOptions
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	} else {
		ao = workflow.ActivityOptions{}
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = 60000000000 // 1 minute
	}
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = time.Hour * 24
	}

	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	// configure heartbeat interval
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = 30000000000 // 30 seconds
	}

	ctx = workflow.WithActivityOptions(ctx, ao)

	uo := client.UpdateWorkflowOptions{}
	if opt.UpdateWorkflowOptions != nil {
		uo = *opt.UpdateWorkflowOptions
	}
	uo.WorkflowID = workflowID
	uo.RunID = runID
	if uo.UpdateID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating update id", "error", err)
				return nil
			}
			return id
		}).Get(&uo.UpdateID); err != nil {
			return nil, nil, err
		}
	}
	if uo.UpdateID == "" {
		return nil, nil, temporal.NewNonRetryableApplicationError("update id is required", "InvalidArgument", nil)
	}

	uopb, err := xns.MarshalUpdateWorkflowOptions(uo)
	if err != nil {
		return nil, nil, fmt.Errorf("error marshalling update workflow options: %w", err)
	}

	inpb, err := anypb.New(input)
	if err != nil {
		return nil, nil, fmt.Errorf("error marshalling update request: %w", err)
	}

	return ctx, &xnsv1.UpdateRequest{
		HeartbeatInterval:     durationpb.New(opt.HeartbeatInterval),
		Request:               inpb,
		UpdateWorkflowOptions: uopb,
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (opts *BarUpdateOptions) WithActivityOptions(ao workflow.ActivityOptions) *BarUpdateOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *BarUpdateOptions) WithHeartbeatInterval(d time.Duration) *BarUpdateOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithUpdateWorkflowOptions can be used to customize the update workflow options
func (opts *BarUpdateOptions) WithUpdateWorkflowOptions(uwo client.UpdateWorkflowOptions) *BarUpdateOptions {
	opts.UpdateWorkflowOptions = &uwo
	return opts
}

// BarHandle provides a handle to a issue_125.v1.Issue125Service.Bar workflow update
type BarHandle interface {
	// Cancel cancels the update activity
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get blocks on update completion and returns the result
	Get(workflow.Context) (*v1.BarOutput, error)

	// ID returns the update id
	ID() string
}

// barHandle provides a(n) BarHandle implementation
type barHandle struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow update
func (r *barHandle) Cancel(ctx workflow.Context) error {
	r.cancel()
	if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
		return err
	}
	return nil
}

// Future returns the underlying activity future
func (r *barHandle) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying update result
func (r *barHandle) Get(ctx workflow.Context) (*v1.BarOutput, error) {
	var resp v1.BarOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *barHandle) ID() string {
	return r.id
}

// Bar executes a(n) issue_125.v1.Issue125Service.Bar update and blocks until error or response received
func Bar(ctx workflow.Context, workflowID string, runID string, req *v1.BarInput, opts ...*BarUpdateOptions) (*v1.BarOutput, error) {
	run, err := BarAsync(ctx, workflowID, runID, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// BarAsync executes a(n) issue_125.v1.Issue125Service.Bar update and blocks until error or response received
func BarAsync(ctx workflow.Context, workflowID string, runID string, input *v1.BarInput, opts ...*BarUpdateOptions) (BarHandle, error) {
	activityName := issue125ServiceOptions.filterActivity(v1.BarUpdateName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.BarUpdateName),
			"Unimplemented",
			nil,
		)
	}

	var opt *BarUpdateOptions
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	} else {
		opt = NewBarUpdateOptions()
	}

	ctx, req, err := opt.Build(ctx, workflowID, runID, input)
	if err != nil {
		return nil, err
	}
	ctx, cancel := workflow.WithCancel(ctx)
	return &barHandle{
		cancel: cancel,
		id:     req.GetUpdateWorkflowOptions().GetUpdateId(),
		future: workflow.ExecuteActivity(ctx, activityName, req),
	}, nil
}

// BazUpdateOptions are used to configure a(n) issue_125.v1.Issue125Service.Baz update execution
type BazUpdateOptions struct {
	ActivityOptions       *workflow.ActivityOptions
	HeartbeatInterval     time.Duration
	UpdateWorkflowOptions *client.UpdateWorkflowOptions
}

// NewBazUpdateOptions initializes a new BazUpdateOptions value
func NewBazUpdateOptions() *BazUpdateOptions {
	return &BazUpdateOptions{}
}

// Build initializes the update options
func (opt *BazUpdateOptions) Build(ctx workflow.Context, workflowID string, runID string, input *v1.BazInput) (workflow.Context, *xnsv1.UpdateRequest, error) {
	// configure activity options
	var ao workflow.ActivityOptions
	if opt.ActivityOptions != nil {
		ao = *opt.ActivityOptions
	} else {
		ao = workflow.ActivityOptions{}
	}
	if ao.HeartbeatTimeout == 0 {
		ao.HeartbeatTimeout = 60000000000 // 1 minute
	}
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.ScheduleToCloseTimeout = time.Hour * 24
	}

	// WaitForCancellation must be set otherwise the underlying workflow is not guaranteed to be canceled
	ao.WaitForCancellation = true

	// configure heartbeat interval
	if opt.HeartbeatInterval == 0 {
		opt.HeartbeatInterval = 30000000000 // 30 seconds
	}

	ctx = workflow.WithActivityOptions(ctx, ao)

	uo := client.UpdateWorkflowOptions{}
	if opt.UpdateWorkflowOptions != nil {
		uo = *opt.UpdateWorkflowOptions
	}
	uo.WorkflowID = workflowID
	uo.RunID = runID
	if uo.UpdateID == "" {
		if err := workflow.SideEffect(ctx, func(ctx workflow.Context) any {
			id, err := uuid.NewRandom()
			if err != nil {
				workflow.GetLogger(ctx).Error("error generating update id", "error", err)
				return nil
			}
			return id
		}).Get(&uo.UpdateID); err != nil {
			return nil, nil, err
		}
	}
	if uo.UpdateID == "" {
		return nil, nil, temporal.NewNonRetryableApplicationError("update id is required", "InvalidArgument", nil)
	}

	uopb, err := xns.MarshalUpdateWorkflowOptions(uo)
	if err != nil {
		return nil, nil, fmt.Errorf("error marshalling update workflow options: %w", err)
	}

	inpb, err := anypb.New(input)
	if err != nil {
		return nil, nil, fmt.Errorf("error marshalling update request: %w", err)
	}

	return ctx, &xnsv1.UpdateRequest{
		HeartbeatInterval:     durationpb.New(opt.HeartbeatInterval),
		Request:               inpb,
		UpdateWorkflowOptions: uopb,
	}, nil
}

// WithActivityOptions can be used to customize the activity options
func (opts *BazUpdateOptions) WithActivityOptions(ao workflow.ActivityOptions) *BazUpdateOptions {
	opts.ActivityOptions = &ao
	return opts
}

// WithHeartbeatInterval can be used to customize the activity heartbeat interval
func (opts *BazUpdateOptions) WithHeartbeatInterval(d time.Duration) *BazUpdateOptions {
	opts.HeartbeatInterval = d
	return opts
}

// WithUpdateWorkflowOptions can be used to customize the update workflow options
func (opts *BazUpdateOptions) WithUpdateWorkflowOptions(uwo client.UpdateWorkflowOptions) *BazUpdateOptions {
	opts.UpdateWorkflowOptions = &uwo
	return opts
}

// BazHandle provides a handle to a issue_125.v1.Issue125Service.Baz workflow update
type BazHandle interface {
	// Cancel cancels the update activity
	Cancel(workflow.Context) error

	// Future returns the inner workflow.Future
	Future() workflow.Future

	// Get blocks on update completion and returns the result
	Get(workflow.Context) (*v1.BazOutput, error)

	// ID returns the update id
	ID() string
}

// bazHandle provides a(n) BazHandle implementation
type bazHandle struct {
	cancel func()
	future workflow.Future
	id     string
}

// Cancel the underlying workflow update
func (r *bazHandle) Cancel(ctx workflow.Context) error {
	r.cancel()
	if _, err := r.Get(ctx); err != nil && !errors.Is(err, workflow.ErrCanceled) {
		return err
	}
	return nil
}

// Future returns the underlying activity future
func (r *bazHandle) Future() workflow.Future {
	return r.future
}

// Get blocks on activity completion and returns the underlying update result
func (r *bazHandle) Get(ctx workflow.Context) (*v1.BazOutput, error) {
	var resp v1.BazOutput
	if err := r.future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ID returns the underlying workflow id
func (r *bazHandle) ID() string {
	return r.id
}

// Baz executes a(n) issue_125.v1.Issue125Service.Baz update and blocks until error or response received
func Baz(ctx workflow.Context, workflowID string, runID string, req *v1.BazInput, opts ...*BazUpdateOptions) (*v1.BazOutput, error) {
	run, err := BazAsync(ctx, workflowID, runID, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// BazAsync executes a(n) issue_125.v1.Issue125Service.Baz update and blocks until error or response received
func BazAsync(ctx workflow.Context, workflowID string, runID string, input *v1.BazInput, opts ...*BazUpdateOptions) (BazHandle, error) {
	activityName := issue125ServiceOptions.filterActivity(v1.BazUpdateName)
	if activityName == "" {
		return nil, temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("no activity registered for %s", v1.BazUpdateName),
			"Unimplemented",
			nil,
		)
	}

	var opt *BazUpdateOptions
	if len(opts) > 0 && opts[0] != nil {
		opt = opts[0]
	} else {
		opt = NewBazUpdateOptions()
	}

	ctx, req, err := opt.Build(ctx, workflowID, runID, input)
	if err != nil {
		return nil, err
	}
	ctx, cancel := workflow.WithCancel(ctx)
	return &bazHandle{
		cancel: cancel,
		id:     req.GetUpdateWorkflowOptions().GetUpdateId(),
		future: workflow.ExecuteActivity(ctx, activityName, req),
	}, nil
}

// CancelIssue125ServiceWorkflow cancels an existing workflow
func CancelIssue125ServiceWorkflow(ctx workflow.Context, workflowID string, runID string) error {
	return CancelIssue125ServiceWorkflowAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// CancelIssue125ServiceWorkflowAsync cancels an existing workflow
func CancelIssue125ServiceWorkflowAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	activityName := issue125ServiceOptions.filterActivity("issue_125.v1.Issue125Service.CancelWorkflow")
	if activityName == "" {
		f, s := workflow.NewFuture(ctx)
		s.SetError(temporal.NewNonRetryableApplicationError(
			"no activity registered for issue_125.v1.Issue125Service.CancelWorkflow",
			"Unimplemented",
			nil,
		))
		return f
	}
	ao := workflow.GetActivityOptions(ctx)
	if ao.StartToCloseTimeout == 0 && ao.ScheduleToCloseTimeout == 0 {
		ao.StartToCloseTimeout = time.Minute
	}
	ctx = workflow.WithActivityOptions(ctx, ao)
	return workflow.ExecuteActivity(ctx, activityName, workflowID, runID)
}

// issue125ServiceActivities provides activities that can be used to interact with a(n) Issue125Service service's workflow, queries, signals, and updates across namespaces
type issue125ServiceActivities struct {
	client v1.Issue125ServiceClient
}

// CancelWorkflow cancels an existing workflow execution
func (a *issue125ServiceActivities) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return a.client.CancelWorkflow(ctx, workflowID, runID)
}

// GetFoo retrieves a(n) issue_125.v1.Issue125Service.Foo workflow via an activity
func (a *issue125ServiceActivities) GetFoo(ctx context.Context, input *xnsv1.GetWorkflowRequest) (out *v1.FooOutput, err error) {
	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	actx, cancel := context.WithCancel(context.Background())
	defer cancel()
	run := a.client.GetFoo(actx, input.GetWorkflowId(), input.GetRunId())
	done := make(chan struct{})
	go func() {
		defer close(done)
		out, err = run.Get(actx)
	}()

	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx)

		// return retryable error if the worker is stopping
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, issue125ServiceOptions.convertError(temporal.NewApplicationError("worker is stopping", "WorkerStopped"))

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				activity.GetLogger(ctx).Info("worker is stopping")
				return nil, issue125ServiceOptions.convertError(temporal.NewApplicationError("worker is stopping", "WorkerStopped"))
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, issue125ServiceOptions.convertError(err)
					}
				}
				return nil, issue125ServiceOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-done:
			return out, issue125ServiceOptions.convertError(err)
		}
	}
}

// Foo executes a(n) issue_125.v1.Issue125Service.Foo workflow via an activity
func (a *issue125ServiceActivities) Foo(ctx context.Context, input *xnsv1.WorkflowRequest) (resp *v1.FooOutput, err error) {
	// unmarshal workflow request
	var req v1.FooInput
	if err := input.Request.UnmarshalTo(&req); err != nil {
		return nil, issue125ServiceOptions.convertError(temporal.NewNonRetryableApplicationError(
			fmt.Sprintf("error unmarshalling workflow request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/test/issue-125/v1.FooInput", input.Request.GetTypeUrl()),
			"InvalidArgument",
			err,
		))
	}

	// initialize workflow execution
	actx := ctx
	if !input.GetDetached() {
		var cancel context.CancelFunc
		actx, cancel = context.WithCancel(context.Background())
		defer cancel()
	}
	var run v1.FooRun
	run, err = a.client.FooAsync(actx, &req, v1.NewFooOptions().WithStartWorkflowOptions(
		xns.UnmarshalStartWorkflowOptions(input.GetStartWorkflowOptions()),
	))
	if err != nil {
		return nil, issue125ServiceOptions.convertError(err)
	}

	// exit early if detached enabled
	if input.GetDetached() {
		return nil, nil
	}

	// otherwise, wait for execution to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = run.Get(actx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Second * 30
	}

	// heartbeat activity while waiting for workflow execution to complete
	for {
		select {
		// send heartbeats periodically
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, run.ID())

		// return retryable error on worker close
		case <-activity.GetWorkerStopChannel(ctx):
			return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")

		// catch parent activity context cancellation. in most cases, this should indicate a
		// server-sent cancellation, but there's a non-zero possibility that this cancellation
		// is received due to the worker stopping, prior to detecting the closing of the worker
		// stop channel. to give us an opportunity to detect a cancellation stemming from the
		// worker closing, we again check to see if the worker stop channel is closed before
		// propagating the cancellation
		case <-ctx.Done():
			select {
			case <-activity.GetWorkerStopChannel(ctx):
				return nil, temporal.NewApplicationError("worker is stopping", "WorkerStopped")
			default:
				parentClosePolicy := input.GetParentClosePolicy()
				if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL || parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE {
					disconnectedCtx, cancel := context.WithTimeout(context.Background(), time.Minute)
					defer cancel()
					if parentClosePolicy == temporalv1.ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL {
						err = run.Cancel(disconnectedCtx)
					} else {
						err = run.Terminate(disconnectedCtx, "xns activity cancellation received", "error", ctx.Err())
					}
					if err != nil {
						return nil, issue125ServiceOptions.convertError(err)
					}
				}
				return nil, issue125ServiceOptions.convertError(temporal.NewCanceledError(ctx.Err().Error()))
			}

		// handle workflow completion
		case <-doneCh:
			return resp, issue125ServiceOptions.convertError(err)
		}
	}
}

// Bar executes a(n) issue_125.v1.Issue125Service.Bar update via an activity
func (a *issue125ServiceActivities) Bar(ctx context.Context, input *xnsv1.UpdateRequest) (resp *v1.BarOutput, err error) {
	var handle v1.BarHandle
	if activity.HasHeartbeatDetails(ctx) {
		// extract update id from heartbeat details
		var updateID string
		if err := activity.GetHeartbeatDetails(ctx, &updateID); err != nil {
			return nil, issue125ServiceOptions.convertError(err)
		}

		// retrieve handle for existing update
		handle, err = a.client.GetBar(ctx, client.GetWorkflowUpdateHandleOptions{
			WorkflowID: input.GetUpdateWorkflowOptions().GetWorkflowId(),
			RunID:      input.GetUpdateWorkflowOptions().GetRunId(),
			UpdateID:   updateID,
		})
		if err != nil {
			return nil, issue125ServiceOptions.convertError(err)
		}
	} else {
		// unmarshal update request
		var req v1.BarInput
		if err := input.Request.UnmarshalTo(&req); err != nil {
			return nil, issue125ServiceOptions.convertError(temporal.NewNonRetryableApplicationError(
				fmt.Sprintf("error unmarshalling update request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/test/issue-125/v1.BarInput", input.Request.GetTypeUrl()),
				"InvalidArgument",
				err,
			))
		}

		uo := xns.UnmarshalUpdateWorkflowOptions(input.GetUpdateWorkflowOptions())
		uo.WaitForStage = client.WorkflowUpdateStageAccepted

		// initialize update execution
		handle, err = a.client.BarAsync(
			ctx,
			input.GetUpdateWorkflowOptions().GetWorkflowId(),
			input.GetUpdateWorkflowOptions().GetRunId(),
			&req,
			v1.NewBarOptions().WithUpdateWorkflowOptions(uo),
		)
		if err != nil {
			return nil, issue125ServiceOptions.convertError(err)
		}
		activity.RecordHeartbeat(ctx, handle.UpdateID())
	}

	// wait for update to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = handle.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Minute
	}

	// heartbeat activity while waiting for workflow update to complete
	for {
		select {
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, handle.UpdateID())
		case <-ctx.Done():
			return nil, issue125ServiceOptions.convertError(ctx.Err())
		case <-doneCh:
			return resp, issue125ServiceOptions.convertError(err)
		}
	}
}

// Baz executes a(n) issue_125.v1.Issue125Service.Baz update via an activity
func (a *issue125ServiceActivities) Baz(ctx context.Context, input *xnsv1.UpdateRequest) (resp *v1.BazOutput, err error) {
	var handle v1.BazHandle
	if activity.HasHeartbeatDetails(ctx) {
		// extract update id from heartbeat details
		var updateID string
		if err := activity.GetHeartbeatDetails(ctx, &updateID); err != nil {
			return nil, issue125ServiceOptions.convertError(err)
		}

		// retrieve handle for existing update
		handle, err = a.client.GetBaz(ctx, client.GetWorkflowUpdateHandleOptions{
			WorkflowID: input.GetUpdateWorkflowOptions().GetWorkflowId(),
			RunID:      input.GetUpdateWorkflowOptions().GetRunId(),
			UpdateID:   updateID,
		})
		if err != nil {
			return nil, issue125ServiceOptions.convertError(err)
		}
	} else {
		// unmarshal update request
		var req v1.BazInput
		if err := input.Request.UnmarshalTo(&req); err != nil {
			return nil, issue125ServiceOptions.convertError(temporal.NewNonRetryableApplicationError(
				fmt.Sprintf("error unmarshalling update request of type %s as github.com/cludden/protoc-gen-go-temporal/gen/test/issue-125/v1.BazInput", input.Request.GetTypeUrl()),
				"InvalidArgument",
				err,
			))
		}

		uo := xns.UnmarshalUpdateWorkflowOptions(input.GetUpdateWorkflowOptions())
		uo.WaitForStage = client.WorkflowUpdateStageAccepted

		// initialize update execution
		handle, err = a.client.BazAsync(
			ctx,
			input.GetUpdateWorkflowOptions().GetWorkflowId(),
			input.GetUpdateWorkflowOptions().GetRunId(),
			&req,
			v1.NewBazOptions().WithUpdateWorkflowOptions(uo),
		)
		if err != nil {
			return nil, issue125ServiceOptions.convertError(err)
		}
		activity.RecordHeartbeat(ctx, handle.UpdateID())
	}

	// wait for update to complete in child goroutine
	doneCh := make(chan struct{})
	go func() {
		resp, err = handle.Get(ctx)
		close(doneCh)
	}()

	heartbeatInterval := input.GetHeartbeatInterval().AsDuration()
	if heartbeatInterval == 0 {
		heartbeatInterval = time.Minute
	}

	// heartbeat activity while waiting for workflow update to complete
	for {
		select {
		case <-time.After(heartbeatInterval):
			activity.RecordHeartbeat(ctx, handle.UpdateID())
		case <-ctx.Done():
			return nil, issue125ServiceOptions.convertError(ctx.Err())
		case <-doneCh:
			return resp, issue125ServiceOptions.convertError(err)
		}
	}
}
