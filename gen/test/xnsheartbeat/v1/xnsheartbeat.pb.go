// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: test/xnsheartbeat/v1/xnsheartbeat.proto

package xnsheartbeatv1

import (
	_ "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSignalInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSignalInput) Reset() {
	*x = TestSignalInput{}
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSignalInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSignalInput) ProtoMessage() {}

func (x *TestSignalInput) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSignalInput.ProtoReflect.Descriptor instead.
func (*TestSignalInput) Descriptor() ([]byte, []int) {
	return file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescGZIP(), []int{0}
}

type TestUpdateInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestUpdateInput) Reset() {
	*x = TestUpdateInput{}
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUpdateInput) ProtoMessage() {}

func (x *TestUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUpdateInput.ProtoReflect.Descriptor instead.
func (*TestUpdateInput) Descriptor() ([]byte, []int) {
	return file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescGZIP(), []int{1}
}

type TestUpdateOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestUpdateOutput) Reset() {
	*x = TestUpdateOutput{}
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestUpdateOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUpdateOutput) ProtoMessage() {}

func (x *TestUpdateOutput) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUpdateOutput.ProtoReflect.Descriptor instead.
func (*TestUpdateOutput) Descriptor() ([]byte, []int) {
	return file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescGZIP(), []int{2}
}

type TestWorkflowInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestWorkflowInput) Reset() {
	*x = TestWorkflowInput{}
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestWorkflowInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWorkflowInput) ProtoMessage() {}

func (x *TestWorkflowInput) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWorkflowInput.ProtoReflect.Descriptor instead.
func (*TestWorkflowInput) Descriptor() ([]byte, []int) {
	return file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescGZIP(), []int{3}
}

type TestWorkflowOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestWorkflowOutput) Reset() {
	*x = TestWorkflowOutput{}
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestWorkflowOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWorkflowOutput) ProtoMessage() {}

func (x *TestWorkflowOutput) ProtoReflect() protoreflect.Message {
	mi := &file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWorkflowOutput.ProtoReflect.Descriptor instead.
func (*TestWorkflowOutput) Descriptor() ([]byte, []int) {
	return file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescGZIP(), []int{4}
}

var File_test_xnsheartbeat_v1_xnsheartbeat_proto protoreflect.FileDescriptor

var file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDesc = string([]byte{
	0x0a, 0x27, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x78, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x78, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x54,
	0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x12,
	0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0xff, 0x02,
	0x0a, 0x13, 0x58, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x04, 0xa2, 0xc4, 0x03, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e,
	0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x04, 0xaa, 0xc4, 0x03, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x27, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x37, 0x8a, 0xc4, 0x03, 0x33, 0x12, 0x0c, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x1a, 0x18, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x08, 0x2a, 0x02, 0x08, 0x1e, 0x42, 0x02, 0x08, 0x0a, 0x18, 0x01, 0x82, 0x01, 0x08,
	0x2a, 0x02, 0x08, 0x1e, 0x42, 0x02, 0x08, 0x0a, 0x1a, 0x15, 0x8a, 0xc4, 0x03, 0x11, 0x0a, 0x0f,
	0x78, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2d, 0x76, 0x31, 0x32,
	0x83, 0x01, 0x0a, 0x19, 0x58, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x10, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x04, 0x8a, 0xc4, 0x03, 0x00, 0x1a, 0x1c, 0x8a, 0xc4, 0x03, 0x18, 0x0a, 0x16, 0x78,
	0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2d, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x2d, 0x76, 0x31, 0x42, 0xf2, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x78, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x42, 0x11, 0x58, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x75, 0x64, 0x64, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x78, 0x6e, 0x73, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x78, 0x6e, 0x73, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58,
	0xaa, 0x02, 0x14, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x58, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x58,
	0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x20, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x58, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x16, 0x54, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x58, 0x6e, 0x73, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescOnce sync.Once
	file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescData []byte
)

func file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescGZIP() []byte {
	file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescOnce.Do(func() {
		file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDesc), len(file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDesc)))
	})
	return file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDescData
}

var file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_test_xnsheartbeat_v1_xnsheartbeat_proto_goTypes = []any{
	(*TestSignalInput)(nil),    // 0: test.xnsheartbeat.v1.TestSignalInput
	(*TestUpdateInput)(nil),    // 1: test.xnsheartbeat.v1.TestUpdateInput
	(*TestUpdateOutput)(nil),   // 2: test.xnsheartbeat.v1.TestUpdateOutput
	(*TestWorkflowInput)(nil),  // 3: test.xnsheartbeat.v1.TestWorkflowInput
	(*TestWorkflowOutput)(nil), // 4: test.xnsheartbeat.v1.TestWorkflowOutput
	(*emptypb.Empty)(nil),      // 5: google.protobuf.Empty
}
var file_test_xnsheartbeat_v1_xnsheartbeat_proto_depIdxs = []int32{
	0, // 0: test.xnsheartbeat.v1.XnsHeartbeatService.TestSignal:input_type -> test.xnsheartbeat.v1.TestSignalInput
	1, // 1: test.xnsheartbeat.v1.XnsHeartbeatService.TestUpdate:input_type -> test.xnsheartbeat.v1.TestUpdateInput
	3, // 2: test.xnsheartbeat.v1.XnsHeartbeatService.TestWorkflow:input_type -> test.xnsheartbeat.v1.TestWorkflowInput
	5, // 3: test.xnsheartbeat.v1.XnsHeartbeatCallerService.CallTestWorkflow:input_type -> google.protobuf.Empty
	5, // 4: test.xnsheartbeat.v1.XnsHeartbeatService.TestSignal:output_type -> google.protobuf.Empty
	2, // 5: test.xnsheartbeat.v1.XnsHeartbeatService.TestUpdate:output_type -> test.xnsheartbeat.v1.TestUpdateOutput
	4, // 6: test.xnsheartbeat.v1.XnsHeartbeatService.TestWorkflow:output_type -> test.xnsheartbeat.v1.TestWorkflowOutput
	5, // 7: test.xnsheartbeat.v1.XnsHeartbeatCallerService.CallTestWorkflow:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_test_xnsheartbeat_v1_xnsheartbeat_proto_init() }
func file_test_xnsheartbeat_v1_xnsheartbeat_proto_init() {
	if File_test_xnsheartbeat_v1_xnsheartbeat_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDesc), len(file_test_xnsheartbeat_v1_xnsheartbeat_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_test_xnsheartbeat_v1_xnsheartbeat_proto_goTypes,
		DependencyIndexes: file_test_xnsheartbeat_v1_xnsheartbeat_proto_depIdxs,
		MessageInfos:      file_test_xnsheartbeat_v1_xnsheartbeat_proto_msgTypes,
	}.Build()
	File_test_xnsheartbeat_v1_xnsheartbeat_proto = out.File
	file_test_xnsheartbeat_v1_xnsheartbeat_proto_goTypes = nil
	file_test_xnsheartbeat_v1_xnsheartbeat_proto_depIdxs = nil
}
