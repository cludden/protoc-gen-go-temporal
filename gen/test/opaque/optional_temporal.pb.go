// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal 1.17.5-next (efa7ab451a198269bf7460cb7a4f6f34b94ebd4b)
//	protoc (unknown)
//
// source: test/opaque/optional.proto
package opaque

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	convert "github.com/cludden/protoc-gen-go-temporal/pkg/convert"
	helpers "github.com/cludden/protoc-gen-go-temporal/pkg/helpers"
	scheme "github.com/cludden/protoc-gen-go-temporal/pkg/scheme"
	gohomedir "github.com/mitchellh/go-homedir"
	v2 "github.com/urfave/cli/v2"
	enumsv1 "go.temporal.io/api/enums/v1"
	client "go.temporal.io/sdk/client"
	converter "go.temporal.io/sdk/converter"
	temporal "go.temporal.io/sdk/temporal"
	testsuite "go.temporal.io/sdk/testsuite"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	protojson "google.golang.org/protobuf/encoding/protojson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	"log/slog"
	"os"
	"sort"
	"strconv"
	"sync"
	"sync/atomic"
	"time"
)

// OptionalTaskQueue is the default task-queue for a test.opaque.Optional worker
var OptionalTaskQueue = "opaque-optional"

// test.opaque.Optional workflow names
const (
	PutOptionalExampleWorkflowName = "test.opaque.Optional.PutOptionalExample"
)

// test.opaque.Optional signal names
const (
	SignalOptionalSignalName = "test.opaque.Optional.SignalOptional"
)

// OptionalClient describes a client for a(n) test.opaque.Optional worker
type OptionalClient interface {
	// PutOptionalExample executes a(n) test.opaque.Optional.PutOptionalExample workflow and blocks until error or response received
	PutOptionalExample(ctx context.Context, req *OptionalExample, opts ...*PutOptionalExampleOptions) (*OptionalExample, error)

	// PutOptionalExampleAsync starts a(n) test.opaque.Optional.PutOptionalExample workflow and returns a handle to the workflow run
	PutOptionalExampleAsync(ctx context.Context, req *OptionalExample, opts ...*PutOptionalExampleOptions) (PutOptionalExampleRun, error)

	// GetPutOptionalExample retrieves a handle to an existing test.opaque.Optional.PutOptionalExample workflow execution
	GetPutOptionalExample(ctx context.Context, workflowID string, runID string) PutOptionalExampleRun

	// PutOptionalExampleWithSignalOptional sends a(n) test.opaque.Optional.SignalOptional signal to a(n) test.opaque.Optional.PutOptionalExample workflow, starting it if necessary, and blocks until workflow completion
	PutOptionalExampleWithSignalOptional(ctx context.Context, req *OptionalExample, signal *OptionalExample, opts ...*PutOptionalExampleOptions) (*OptionalExample, error)

	// PutOptionalExampleWithSignalOptionalAsync sends a(n) test.opaque.Optional.SignalOptional signal to a(n) test.opaque.Optional.PutOptionalExample workflow, starting it if necessary, and returns a handle to the workflow execution
	PutOptionalExampleWithSignalOptionalAsync(ctx context.Context, req *OptionalExample, signal *OptionalExample, opts ...*PutOptionalExampleOptions) (PutOptionalExampleRun, error)

	// CancelWorkflow requests cancellation of an existing workflow execution
	CancelWorkflow(ctx context.Context, workflowID string, runID string) error

	// TerminateWorkflow an existing workflow execution
	TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error

	// test.opaque.Optional.SignalOptional sends a(n) test.opaque.Optional.SignalOptional signal
	SignalOptional(ctx context.Context, workflowID string, runID string, signal *OptionalExample) error
}

// optionalClient implements a temporal client for a test.opaque.Optional service
type optionalClient struct {
	client client.Client
	log    *slog.Logger
}

// NewOptionalClient initializes a new test.opaque.Optional client
func NewOptionalClient(c client.Client, options ...*optionalClientOptions) OptionalClient {
	var cfg *optionalClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewOptionalClientOptions()
	}
	return &optionalClient{
		client: c,
		log:    cfg.getLogger(),
	}
}

// NewOptionalClientWithOptions initializes a new Optional client with the given options
func NewOptionalClientWithOptions(c client.Client, opts client.Options, options ...*optionalClientOptions) (OptionalClient, error) {
	var err error
	c, err = client.NewClientFromExisting(c, opts)
	if err != nil {
		return nil, fmt.Errorf("error initializing client with options: %w", err)
	}
	var cfg *optionalClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewOptionalClientOptions()
	}
	return &optionalClient{
		client: c,
		log:    cfg.getLogger(),
	}, nil
}

// optionalClientOptions describes optional runtime configuration for a OptionalClient
type optionalClientOptions struct {
	log *slog.Logger
}

// NewOptionalClientOptions initializes a new optionalClientOptions value
func NewOptionalClientOptions() *optionalClientOptions {
	return &optionalClientOptions{}
}

// WithLogger can be used to override the default logger
func (opts *optionalClientOptions) WithLogger(l *slog.Logger) *optionalClientOptions {
	if l != nil {
		opts.log = l
	}
	return opts
}

// getLogger returns the configured logger, or the default logger
func (opts *optionalClientOptions) getLogger() *slog.Logger {
	if opts != nil && opts.log != nil {
		return opts.log
	}
	return slog.Default()
}

// test.opaque.Optional.PutOptionalExample executes a test.opaque.Optional.PutOptionalExample workflow and blocks until error or response received
func (c *optionalClient) PutOptionalExample(ctx context.Context, req *OptionalExample, options ...*PutOptionalExampleOptions) (*OptionalExample, error) {
	run, err := c.PutOptionalExampleAsync(ctx, req, options...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// PutOptionalExampleAsync starts a(n) test.opaque.Optional.PutOptionalExample workflow and returns a handle to the workflow run
func (c *optionalClient) PutOptionalExampleAsync(ctx context.Context, req *OptionalExample, options ...*PutOptionalExampleOptions) (PutOptionalExampleRun, error) {
	var o *PutOptionalExampleOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewPutOptionalExampleOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	run, err := c.client.ExecuteWorkflow(ctx, opts, PutOptionalExampleWorkflowName, req)
	if err != nil {
		return nil, err
	}
	if run == nil {
		return nil, errors.New("execute workflow returned nil run")
	}
	return &putOptionalExampleRun{
		client: c,
		run:    run,
	}, nil
}

// GetPutOptionalExample fetches an existing test.opaque.Optional.PutOptionalExample execution
func (c *optionalClient) GetPutOptionalExample(ctx context.Context, workflowID string, runID string) PutOptionalExampleRun {
	return &putOptionalExampleRun{
		client: c,
		run:    c.client.GetWorkflow(ctx, workflowID, runID),
	}
}

// PutOptionalExampleWithSignalOptional starts a(n) test.opaque.Optional.PutOptionalExample workflow and sends a(n) test.opaque.Optional.SignalOptional signal in a transaction
func (c *optionalClient) PutOptionalExampleWithSignalOptional(ctx context.Context, req *OptionalExample, signal *OptionalExample, options ...*PutOptionalExampleOptions) (*OptionalExample, error) {
	run, err := c.PutOptionalExampleWithSignalOptionalAsync(ctx, req, signal, options...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// PutOptionalExampleWithSignalOptionalAsync starts a(n) test.opaque.Optional.PutOptionalExample workflow and sends a(n) test.opaque.Optional.SignalOptional signal in a transaction
func (c *optionalClient) PutOptionalExampleWithSignalOptionalAsync(ctx context.Context, req *OptionalExample, signal *OptionalExample, options ...*PutOptionalExampleOptions) (PutOptionalExampleRun, error) {
	var o *PutOptionalExampleOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewPutOptionalExampleOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	run, err := c.client.SignalWithStartWorkflow(ctx, opts.ID, SignalOptionalSignalName, signal, opts, PutOptionalExampleWorkflowName, req)
	if run == nil || err != nil {
		return nil, err
	}
	return &putOptionalExampleRun{
		client: c,
		run:    run,
	}, nil
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *optionalClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return c.client.CancelWorkflow(ctx, workflowID, runID)
}

// TerminateWorkflow terminates an existing workflow execution
func (c *optionalClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.client.TerminateWorkflow(ctx, workflowID, runID, reason, details...)
}

// test.opaque.Optional.SignalOptional sends a(n) test.opaque.Optional.SignalOptional signal to an existing workflow
func (c *optionalClient) SignalOptional(ctx context.Context, workflowID string, runID string, signal *OptionalExample) error {
	return c.client.SignalWorkflow(ctx, workflowID, runID, SignalOptionalSignalName, signal)
}

// PutOptionalExampleOptions provides configuration for a test.opaque.Optional.PutOptionalExample workflow operation
type PutOptionalExampleOptions struct {
	options                  client.StartWorkflowOptions
	executionTimeout         *time.Duration
	id                       *string
	idReusePolicy            enumsv1.WorkflowIdReusePolicy
	retryPolicy              *temporal.RetryPolicy
	runTimeout               *time.Duration
	searchAttributes         map[string]any
	taskQueue                *string
	taskTimeout              *time.Duration
	workflowIdConflictPolicy enumsv1.WorkflowIdConflictPolicy
}

// NewPutOptionalExampleOptions initializes a new PutOptionalExampleOptions value
func NewPutOptionalExampleOptions() *PutOptionalExampleOptions {
	return &PutOptionalExampleOptions{}
}

// Build initializes a new go.temporal.io/sdk/client.StartWorkflowOptions value with defaults and overrides applied
func (o *PutOptionalExampleOptions) Build(req protoreflect.Message) (client.StartWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.ID = *v
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	}
	if v := o.workflowIdConflictPolicy; v != enumsv1.WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED {
		opts.WorkflowIDConflictPolicy = v
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = OptionalTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	return opts, nil
}

// WithStartWorkflowOptions sets the initial go.temporal.io/sdk/client.StartWorkflowOptions
func (o *PutOptionalExampleOptions) WithStartWorkflowOptions(options client.StartWorkflowOptions) *PutOptionalExampleOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *PutOptionalExampleOptions) WithExecutionTimeout(d time.Duration) *PutOptionalExampleOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the ID value
func (o *PutOptionalExampleOptions) WithID(id string) *PutOptionalExampleOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *PutOptionalExampleOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *PutOptionalExampleOptions {
	o.idReusePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *PutOptionalExampleOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *PutOptionalExampleOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *PutOptionalExampleOptions) WithRunTimeout(d time.Duration) *PutOptionalExampleOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *PutOptionalExampleOptions) WithSearchAttributes(sa map[string]any) *PutOptionalExampleOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *PutOptionalExampleOptions) WithTaskTimeout(d time.Duration) *PutOptionalExampleOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *PutOptionalExampleOptions) WithTaskQueue(tq string) *PutOptionalExampleOptions {
	o.taskQueue = &tq
	return o
}

// WithWorkflowIdConflictPolicy sets the WorkflowIdConflictPolicy value
func (o *PutOptionalExampleOptions) WithWorkflowIdConflictPolicy(policy enumsv1.WorkflowIdConflictPolicy) *PutOptionalExampleOptions {
	o.workflowIdConflictPolicy = policy
	return o
}

// PutOptionalExampleRun describes a(n) test.opaque.Optional.PutOptionalExample workflow run
type PutOptionalExampleRun interface {
	// ID returns the workflow ID
	ID() string

	// RunID returns the workflow instance ID
	RunID() string

	// Run returns the inner client.WorkflowRun
	Run() client.WorkflowRun

	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) (*OptionalExample, error)

	// Cancel requests cancellation of a workflow in execution, returning an error if applicable
	Cancel(ctx context.Context) error

	// Terminate terminates a workflow in execution, returning an error if applicable
	Terminate(ctx context.Context, reason string, details ...interface{}) error

	// test.opaque.Optional.SignalOptional sends a(n) test.opaque.Optional.SignalOptional signal
	SignalOptional(ctx context.Context, req *OptionalExample) error
}

// putOptionalExampleRun provides an internal implementation of a(n) PutOptionalExampleRunRun
type putOptionalExampleRun struct {
	client *optionalClient
	run    client.WorkflowRun
}

// ID returns the workflow ID
func (r *putOptionalExampleRun) ID() string {
	return r.run.GetID()
}

// Run returns the inner client.WorkflowRun
func (r *putOptionalExampleRun) Run() client.WorkflowRun {
	return r.run
}

// RunID returns the execution ID
func (r *putOptionalExampleRun) RunID() string {
	return r.run.GetRunID()
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *putOptionalExampleRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get blocks until the workflow is complete, returning the result if applicable
func (r *putOptionalExampleRun) Get(ctx context.Context) (*OptionalExample, error) {
	var resp OptionalExample
	if err := r.run.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *putOptionalExampleRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// test.opaque.Optional.SignalOptional sends a(n) test.opaque.Optional.SignalOptional signal
func (r *putOptionalExampleRun) SignalOptional(ctx context.Context, req *OptionalExample) error {
	return r.client.SignalOptional(ctx, r.ID(), "", req)
}

// Reference to generated workflow functions
var (
	// optionalRegistrationMutex is a mutex for registering test.opaque.Optional workflows
	optionalRegistrationMutex sync.Mutex
	// PutOptionalExampleFunction implements a "test.opaque.Optional.PutOptionalExample" workflow
	PutOptionalExampleFunction func(workflow.Context, *OptionalExample) (*OptionalExample, error)
)

// OptionalWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
type (
	// OptionalWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
	OptionalWorkflowFunctions interface {
		// PutOptionalExample executes a "test.opaque.Optional.PutOptionalExample" workflow inline
		PutOptionalExample(workflow.Context, *OptionalExample) (*OptionalExample, error)
	}
	// optionalWorkflowFunctions provides an internal OptionalWorkflowFunctions implementation
	optionalWorkflowFunctions struct{}
)

func NewOptionalWorkflowFunctions() OptionalWorkflowFunctions {
	return &optionalWorkflowFunctions{}
}

// PutOptionalExample executes a "test.opaque.Optional.PutOptionalExample" workflow inline
func (f *optionalWorkflowFunctions) PutOptionalExample(ctx workflow.Context, req *OptionalExample) (*OptionalExample, error) {
	if PutOptionalExampleFunction == nil {
		return nil, errors.New("PutOptionalExample requires workflow registration via RegisterOptionalWorkflows or RegisterPutOptionalExampleWorkflow")
	}
	return PutOptionalExampleFunction(ctx, req)
}

// OptionalWorkflows provides methods for initializing new test.opaque.Optional workflow values
type OptionalWorkflows interface {
	// PutOptionalExample initializes a new a(n) PutOptionalExampleWorkflow implementation
	PutOptionalExample(ctx workflow.Context, input *PutOptionalExampleWorkflowInput) (PutOptionalExampleWorkflow, error)
}

// RegisterOptionalWorkflows registers test.opaque.Optional workflows with the given worker
func RegisterOptionalWorkflows(r worker.WorkflowRegistry, workflows OptionalWorkflows) {
	RegisterPutOptionalExampleWorkflow(r, workflows.PutOptionalExample)
}

// RegisterPutOptionalExampleWorkflow registers a test.opaque.Optional.PutOptionalExample workflow with the given worker
func RegisterPutOptionalExampleWorkflow(r worker.WorkflowRegistry, wf func(workflow.Context, *PutOptionalExampleWorkflowInput) (PutOptionalExampleWorkflow, error)) {
	optionalRegistrationMutex.Lock()
	defer optionalRegistrationMutex.Unlock()
	PutOptionalExampleFunction = buildPutOptionalExample(wf)
	r.RegisterWorkflowWithOptions(PutOptionalExampleFunction, workflow.RegisterOptions{Name: PutOptionalExampleWorkflowName})
}

// buildPutOptionalExample converts a PutOptionalExample workflow struct into a valid workflow function
func buildPutOptionalExample(ctor func(workflow.Context, *PutOptionalExampleWorkflowInput) (PutOptionalExampleWorkflow, error)) func(workflow.Context, *OptionalExample) (*OptionalExample, error) {
	return func(ctx workflow.Context, req *OptionalExample) (*OptionalExample, error) {
		input := &PutOptionalExampleWorkflowInput{
			Req: req,
			SignalOptional: &SignalOptionalSignal{
				Channel: workflow.GetSignalChannel(ctx, SignalOptionalSignalName),
			},
		}
		wf, err := ctor(ctx, input)
		if err != nil {
			return nil, err
		}
		if initializable, ok := wf.(helpers.Initializable); ok {
			if err := initializable.Initialize(ctx); err != nil {
				return nil, err
			}
		}
		return wf.Execute(ctx)
	}
}

// PutOptionalExampleWorkflowInput describes the input to a(n) test.opaque.Optional.PutOptionalExample workflow constructor
type PutOptionalExampleWorkflowInput struct {
	Req            *OptionalExample
	SignalOptional *SignalOptionalSignal
}

// PutOptionalExampleWorkflow describes a(n) test.opaque.Optional.PutOptionalExample workflow implementation
type PutOptionalExampleWorkflow interface {
	// Execute defines the entrypoint to a(n) test.opaque.Optional.PutOptionalExample workflow
	Execute(ctx workflow.Context) (*OptionalExample, error)
}

// PutOptionalExampleChild executes a child test.opaque.Optional.PutOptionalExample workflow and blocks until error or response received
func PutOptionalExampleChild(ctx workflow.Context, req *OptionalExample, options ...*PutOptionalExampleChildOptions) (*OptionalExample, error) {
	childRun, err := PutOptionalExampleChildAsync(ctx, req, options...)
	if err != nil {
		return nil, err
	}
	return childRun.Get(ctx)
}

// PutOptionalExampleChildAsync starts a child test.opaque.Optional.PutOptionalExample workflow and returns a handle to the child workflow run
func PutOptionalExampleChildAsync(ctx workflow.Context, req *OptionalExample, options ...*PutOptionalExampleChildOptions) (*PutOptionalExampleChildRun, error) {
	var o *PutOptionalExampleChildOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewPutOptionalExampleChildOptions()
	}
	opts, err := o.Build(ctx, req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing workflow.ChildWorkflowOptions: %w", err)
	}
	ctx = workflow.WithChildOptions(ctx, opts)
	if o.dc != nil {
		ctx = workflow.WithDataConverter(ctx, o.dc)
	}
	return &PutOptionalExampleChildRun{Future: workflow.ExecuteChildWorkflow(ctx, PutOptionalExampleWorkflowName, req)}, nil
}

// PutOptionalExampleChildOptions provides configuration for a child test.opaque.Optional.PutOptionalExample workflow operation
type PutOptionalExampleChildOptions struct {
	options                  workflow.ChildWorkflowOptions
	executionTimeout         *time.Duration
	id                       *string
	idReusePolicy            enumsv1.WorkflowIdReusePolicy
	retryPolicy              *temporal.RetryPolicy
	runTimeout               *time.Duration
	searchAttributes         map[string]any
	taskQueue                *string
	taskTimeout              *time.Duration
	workflowIdConflictPolicy enumsv1.WorkflowIdConflictPolicy
	dc                       converter.DataConverter
	parentClosePolicy        enumsv1.ParentClosePolicy
	waitForCancellation      *bool
}

// NewPutOptionalExampleChildOptions initializes a new PutOptionalExampleChildOptions value
func NewPutOptionalExampleChildOptions() *PutOptionalExampleChildOptions {
	return &PutOptionalExampleChildOptions{}
}

// Build initializes a new go.temporal.io/sdk/workflow.ChildWorkflowOptions value with defaults and overrides applied
func (o *PutOptionalExampleChildOptions) Build(ctx workflow.Context, req protoreflect.Message) (workflow.ChildWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.WorkflowID = *v
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = OptionalTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	if v := o.parentClosePolicy; v != enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		opts.ParentClosePolicy = v
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return opts, nil
}

// WithChildWorkflowOptions sets the initial go.temporal.io/sdk/workflow.ChildWorkflowOptions
func (o *PutOptionalExampleChildOptions) WithChildWorkflowOptions(options workflow.ChildWorkflowOptions) *PutOptionalExampleChildOptions {
	o.options = options
	return o
}

// WithDataConverter registers a DataConverter for the child workflow
func (o *PutOptionalExampleChildOptions) WithDataConverter(dc converter.DataConverter) *PutOptionalExampleChildOptions {
	o.dc = dc
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *PutOptionalExampleChildOptions) WithExecutionTimeout(d time.Duration) *PutOptionalExampleChildOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the WorkflowID value
func (o *PutOptionalExampleChildOptions) WithID(id string) *PutOptionalExampleChildOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *PutOptionalExampleChildOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *PutOptionalExampleChildOptions {
	o.idReusePolicy = policy
	return o
}

// WithParentClosePolicy sets the WorkflowIDReusePolicy value
func (o *PutOptionalExampleChildOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *PutOptionalExampleChildOptions {
	o.parentClosePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *PutOptionalExampleChildOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *PutOptionalExampleChildOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *PutOptionalExampleChildOptions) WithRunTimeout(d time.Duration) *PutOptionalExampleChildOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *PutOptionalExampleChildOptions) WithSearchAttributes(sa map[string]any) *PutOptionalExampleChildOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *PutOptionalExampleChildOptions) WithTaskTimeout(d time.Duration) *PutOptionalExampleChildOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *PutOptionalExampleChildOptions) WithTaskQueue(tq string) *PutOptionalExampleChildOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *PutOptionalExampleChildOptions) WithWaitForCancellation(wait bool) *PutOptionalExampleChildOptions {
	o.waitForCancellation = &wait
	return o
}

// WithWorkflowIdConflictPolicy sets the WorkflowIdConflictPolicy value
func (o *PutOptionalExampleChildOptions) WithWorkflowIdConflictPolicy(policy enumsv1.WorkflowIdConflictPolicy) *PutOptionalExampleChildOptions {
	o.workflowIdConflictPolicy = policy
	return o
}

// PutOptionalExampleChildRun describes a child PutOptionalExample workflow run
type PutOptionalExampleChildRun struct {
	Future workflow.ChildWorkflowFuture
}

// Get blocks until the workflow is completed, returning the response value
func (r *PutOptionalExampleChildRun) Get(ctx workflow.Context) (*OptionalExample, error) {
	var resp OptionalExample
	if err := r.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds this completion to the selector. Callback can be nil.
func (r *PutOptionalExampleChildRun) Select(sel workflow.Selector, fn func(*PutOptionalExampleChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future, func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// SelectStart adds waiting for start to the selector. Callback can be nil.
func (r *PutOptionalExampleChildRun) SelectStart(sel workflow.Selector, fn func(*PutOptionalExampleChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future.GetChildWorkflowExecution(), func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// WaitStart waits for the child workflow to start
func (r *PutOptionalExampleChildRun) WaitStart(ctx workflow.Context) (*workflow.Execution, error) {
	var exec workflow.Execution
	if err := r.Future.GetChildWorkflowExecution().Get(ctx, &exec); err != nil {
		return nil, err
	}
	return &exec, nil
}

// SignalOptional sends a(n) "test.opaque.Optional.SignalOptional" signal request to the child workflow
func (r *PutOptionalExampleChildRun) SignalOptional(ctx workflow.Context, input *OptionalExample) error {
	return r.SignalOptionalAsync(ctx, input).Get(ctx, nil)
}

// SignalOptionalAsync sends a(n) "test.opaque.Optional.SignalOptional" signal request to the child workflow
func (r *PutOptionalExampleChildRun) SignalOptionalAsync(ctx workflow.Context, input *OptionalExample) workflow.Future {
	return r.Future.SignalChildWorkflow(ctx, SignalOptionalSignalName, input)
}

// SignalOptionalSignal describes a(n) test.opaque.Optional.SignalOptional signal
type SignalOptionalSignal struct {
	Channel workflow.ReceiveChannel
}

// NewSignalOptionalSignal initializes a new test.opaque.Optional.SignalOptional signal wrapper
func NewSignalOptionalSignal(ctx workflow.Context) *SignalOptionalSignal {
	return &SignalOptionalSignal{Channel: workflow.GetSignalChannel(ctx, SignalOptionalSignalName)}
}

// Receive blocks until a(n) test.opaque.Optional.SignalOptional signal is received
func (s *SignalOptionalSignal) Receive(ctx workflow.Context) (*OptionalExample, bool) {
	var resp OptionalExample
	more := s.Channel.Receive(ctx, &resp)
	return &resp, more
}

// ReceiveAsync checks for a test.opaque.Optional.SignalOptional signal without blocking
func (s *SignalOptionalSignal) ReceiveAsync() *OptionalExample {
	var resp OptionalExample
	if ok := s.Channel.ReceiveAsync(&resp); !ok {
		return nil
	}
	return &resp
}

// ReceiveWithTimeout blocks until a(n) test.opaque.Optional.SignalOptional signal is received or timeout expires.
// Returns more value of false when Channel is closed.
// Returns ok value of false when no value was found in the channel for the duration of timeout or the ctx was canceled.
// resp will be nil if ok is false.
func (s *SignalOptionalSignal) ReceiveWithTimeout(ctx workflow.Context, timeout time.Duration) (resp *OptionalExample, ok bool, more bool) {
	resp = &OptionalExample{}
	if ok, more = s.Channel.ReceiveWithTimeout(ctx, timeout, &resp); !ok {
		return nil, false, more
	}
	return
}

// Select checks for a(n) test.opaque.Optional.SignalOptional signal without blocking
func (s *SignalOptionalSignal) Select(sel workflow.Selector, fn func(*OptionalExample)) workflow.Selector {
	return sel.AddReceive(s.Channel, func(workflow.ReceiveChannel, bool) {
		req := s.ReceiveAsync()
		if fn != nil {
			fn(req)
		}
	})
}

// SignalOptionalExternal sends a(n) test.opaque.Optional.SignalOptional signal to an existing workflow
func SignalOptionalExternal(ctx workflow.Context, workflowID string, runID string, req *OptionalExample) error {
	return SignalOptionalExternalAsync(ctx, workflowID, runID, req).Get(ctx, nil)
}

// SignalOptionalExternalAsync sends a(n) test.opaque.Optional.SignalOptional signal to an existing workflow
func SignalOptionalExternalAsync(ctx workflow.Context, workflowID string, runID string, req *OptionalExample) workflow.Future {
	return workflow.SignalExternalWorkflow(ctx, workflowID, runID, SignalOptionalSignalName, req)
}

// OptionalActivities describes available worker activities
type OptionalActivities interface{}

// RegisterOptionalActivities registers activities with a worker
func RegisterOptionalActivities(r worker.ActivityRegistry, activities OptionalActivities) {}

// TestClient provides a testsuite-compatible Client
type TestOptionalClient struct {
	env       *testsuite.TestWorkflowEnvironment
	workflows OptionalWorkflows
}

var _ OptionalClient = &TestOptionalClient{}

// NewTestOptionalClient initializes a new TestOptionalClient value
func NewTestOptionalClient(env *testsuite.TestWorkflowEnvironment, workflows OptionalWorkflows, activities OptionalActivities) *TestOptionalClient {
	if workflows != nil {
		RegisterOptionalWorkflows(env, workflows)
	}
	if activities != nil {
		RegisterOptionalActivities(env, activities)
	}
	return &TestOptionalClient{env, workflows}
}

// PutOptionalExample executes a(n) test.opaque.Optional.PutOptionalExample workflow in the test environment
func (c *TestOptionalClient) PutOptionalExample(ctx context.Context, req *OptionalExample, opts ...*PutOptionalExampleOptions) (*OptionalExample, error) {
	run, err := c.PutOptionalExampleAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// PutOptionalExampleAsync executes a(n) test.opaque.Optional.PutOptionalExample workflow in the test environment
func (c *TestOptionalClient) PutOptionalExampleAsync(ctx context.Context, req *OptionalExample, options ...*PutOptionalExampleOptions) (PutOptionalExampleRun, error) {
	var o *PutOptionalExampleOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewPutOptionalExampleOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	return &testPutOptionalExampleRun{client: c, env: c.env, opts: &opts, req: req, workflows: c.workflows}, nil
}

// GetPutOptionalExample is a noop
func (c *TestOptionalClient) GetPutOptionalExample(ctx context.Context, workflowID string, runID string) PutOptionalExampleRun {
	return &testPutOptionalExampleRun{env: c.env, workflows: c.workflows}
}

// PutOptionalExampleWithSignalOptional sends a(n) test.opaque.Optional.SignalOptional signal to a(n) test.opaque.Optional.PutOptionalExample workflow, starting it if necessary
func (c *TestOptionalClient) PutOptionalExampleWithSignalOptional(ctx context.Context, req *OptionalExample, signal *OptionalExample, opts ...*PutOptionalExampleOptions) (*OptionalExample, error) {
	c.env.RegisterDelayedCallback(func() {
		c.env.SignalWorkflow(SignalOptionalSignalName, signal)
	}, 0)
	return c.PutOptionalExample(ctx, req, opts...)
}

// PutOptionalExampleWithSignalOptionalAsync sends a(n) test.opaque.Optional.SignalOptional signal to a(n) test.opaque.Optional.PutOptionalExample workflow, starting it if necessary
func (c *TestOptionalClient) PutOptionalExampleWithSignalOptionalAsync(ctx context.Context, req *OptionalExample, signal *OptionalExample, opts ...*PutOptionalExampleOptions) (PutOptionalExampleRun, error) {
	c.env.RegisterDelayedCallback(func() {
		c.env.SignalWorkflow(SignalOptionalSignalName, signal)
	}, 0)
	return c.PutOptionalExampleAsync(ctx, req, opts...)
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *TestOptionalClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	c.env.CancelWorkflow()
	return nil
}

// TerminateWorkflow terminates an existing workflow execution
func (c *TestOptionalClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.CancelWorkflow(ctx, workflowID, runID)
}

// SignalOptional executes a test.opaque.Optional.SignalOptional signal
func (c *TestOptionalClient) SignalOptional(ctx context.Context, workflowID string, runID string, req *OptionalExample) error {
	c.env.SignalWorkflow(SignalOptionalSignalName, req)
	return nil
}

var _ PutOptionalExampleRun = &testPutOptionalExampleRun{}

// testPutOptionalExampleRun provides convenience methods for interacting with a(n) test.opaque.Optional.PutOptionalExample workflow in the test environment
type testPutOptionalExampleRun struct {
	client    *TestOptionalClient
	env       *testsuite.TestWorkflowEnvironment
	isStarted atomic.Bool
	opts      *client.StartWorkflowOptions
	req       *OptionalExample
	workflows OptionalWorkflows
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *testPutOptionalExampleRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get retrieves a test test.opaque.Optional.PutOptionalExample workflow result
func (r *testPutOptionalExampleRun) Get(context.Context) (*OptionalExample, error) {
	if r.isStarted.CompareAndSwap(false, true) {
		r.env.ExecuteWorkflow(PutOptionalExampleWorkflowName, r.req)
	}
	if !r.env.IsWorkflowCompleted() {
		return nil, errors.New("workflow in progress")
	}
	if err := r.env.GetWorkflowError(); err != nil {
		return nil, err
	}
	var result OptionalExample
	if err := r.env.GetWorkflowResult(&result); err != nil {
		return nil, err
	}
	return &result, nil
}

// ID returns a test test.opaque.Optional.PutOptionalExample workflow run's workflow ID
func (r *testPutOptionalExampleRun) ID() string {
	if r.opts != nil {
		return r.opts.ID
	}
	return ""
}

// Run noop implementation
func (r *testPutOptionalExampleRun) Run() client.WorkflowRun {
	return nil
}

// RunID noop implementation
func (r *testPutOptionalExampleRun) RunID() string {
	return ""
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *testPutOptionalExampleRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// SignalOptional executes a test.opaque.Optional.SignalOptional signal against a test test.opaque.Optional.PutOptionalExample workflow
func (r *testPutOptionalExampleRun) SignalOptional(ctx context.Context, req *OptionalExample) error {
	return r.client.SignalOptional(ctx, r.ID(), r.RunID(), req)
}

// OptionalCliOptions describes runtime configuration for test.opaque.Optional cli
type OptionalCliOptions struct {
	after            func(*v2.Context) error
	before           func(*v2.Context) error
	clientForCommand func(*v2.Context) (client.Client, error)
	worker           func(*v2.Context, client.Client) (worker.Worker, error)
}

// NewOptionalCliOptions initializes a new OptionalCliOptions value
func NewOptionalCliOptions() *OptionalCliOptions {
	return &OptionalCliOptions{}
}

// WithAfter injects a custom After hook to be run after any command invocation
func (opts *OptionalCliOptions) WithAfter(fn func(*v2.Context) error) *OptionalCliOptions {
	opts.after = fn
	return opts
}

// WithBefore injects a custom Before hook to be run prior to any command invocation
func (opts *OptionalCliOptions) WithBefore(fn func(*v2.Context) error) *OptionalCliOptions {
	opts.before = fn
	return opts
}

// WithClient provides a Temporal client factory for use by commands
func (opts *OptionalCliOptions) WithClient(fn func(*v2.Context) (client.Client, error)) *OptionalCliOptions {
	opts.clientForCommand = fn
	return opts
}

// WithWorker provides an method for initializing a worker
func (opts *OptionalCliOptions) WithWorker(fn func(*v2.Context, client.Client) (worker.Worker, error)) *OptionalCliOptions {
	opts.worker = fn
	return opts
}

// NewOptionalCli initializes a cli for a(n) test.opaque.Optional service
func NewOptionalCli(options ...*OptionalCliOptions) (*v2.App, error) {
	commands, err := newOptionalCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.App{
		Name:                      "optional",
		Commands:                  commands,
		DisableSliceFlagSeparator: true,
	}, nil
}

// NewOptionalCliCommand initializes a cli command for a test.opaque.Optional service with subcommands for each query, signal, update, and workflow
func NewOptionalCliCommand(options ...*OptionalCliOptions) (*v2.Command, error) {
	subcommands, err := newOptionalCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.Command{
		Name:        "optional",
		Subcommands: subcommands,
	}, nil
}

// newOptionalCommands initializes (sub)commands for a test.opaque.Optional cli or command
func newOptionalCommands(options ...*OptionalCliOptions) ([]*v2.Command, error) {
	opts := &OptionalCliOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if opts.clientForCommand == nil {
		opts.clientForCommand = func(*v2.Context) (client.Client, error) {
			return client.Dial(client.Options{})
		}
	}
	commands := []*v2.Command{
		{
			Name:                   "signal-optional",
			Usage:                  "executes a test.opaque.Optional.SignalOptional signal",
			Category:               "SIGNALS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
				&v2.StringFlag{
					Name:     "input-file",
					Usage:    "path to json-formatted input file",
					Aliases:  []string{"f"},
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "name",
					Usage:    "set the value of the operation's \"Name\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "score",
					Usage:    "set the value of the operation's \"Score\" parameter",
					Category: "INPUT",
				},
				&v2.Float64SliceFlag{
					Name:     "scores",
					Usage:    "set the value of the operation's \"Scores\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "ratio",
					Usage:    "set the value of the operation's \"Ratio\" parameter",
					Category: "INPUT",
				},
				&v2.Float64SliceFlag{
					Name:     "ratios",
					Usage:    "set the value of the operation's \"Ratios\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "age",
					Usage:    "set the value of the operation's \"Age\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "ages",
					Usage:    "set the value of the operation's \"Ages\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "ids",
					Usage:    "set the value of the operation's \"Ids\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "emails",
					Usage:    "set the value of the operation's \"Emails\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "extra",
					Usage:    "set the value of the operation's \"Extra\" parameter (json-encoded: {key: <string>, value: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "status",
					Usage:    "set the value of the operation's \"Status\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "statuses",
					Usage:    "set the value of the operation's \"Statuses\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "size",
					Usage:    "set the value of the operation's \"Size\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "sizes",
					Usage:    "set the value of the operation's \"Sizes\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "length",
					Usage:    "set the value of the operation's \"Length\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "lengths",
					Usage:    "set the value of the operation's \"Lengths\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "connection-id",
					Usage:    "set the value of the operation's \"ConnectionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "connection-ids",
					Usage:    "set the value of the operation's \"ConnectionIds\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "session-id",
					Usage:    "set the value of the operation's \"SessionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "session-ids",
					Usage:    "set the value of the operation's \"SessionIds\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "fixed-size",
					Usage:    "set the value of the operation's \"FixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "fixed-sizes",
					Usage:    "set the value of the operation's \"FixedSizes\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "fixed-length",
					Usage:    "set the value of the operation's \"FixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "fixed-lengths",
					Usage:    "set the value of the operation's \"FixedLengths\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "sfixed-size",
					Usage:    "set the value of the operation's \"SfixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "sfixed-sizes",
					Usage:    "set the value of the operation's \"SfixedSizes\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "sfixed-length",
					Usage:    "set the value of the operation's \"SfixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "sfixed-lengths",
					Usage:    "set the value of the operation's \"SfixedLengths\" parameter",
					Category: "INPUT",
				},
				&v2.BoolFlag{
					Name:     "is-active",
					Usage:    "set the value of the operation's \"IsActive\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "is-actives",
					Usage:    "set the value of the operation's \"IsActives\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "data",
					Usage:    "set the value of the operation's \"Data\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "datas",
					Usage:    "set the value of the operation's \"Datas\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "address",
					Usage:    "set the value of the operation's \"Address\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "previous-addresses",
					Usage:    "set the value of the operation's \"PreviousAddresses\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-name",
					Usage:    "set the value of the operation's \"OneofName\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "oneof-score",
					Usage:    "set the value of the operation's \"OneofScore\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "oneof-ratio",
					Usage:    "set the value of the operation's \"OneofRatio\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-age",
					Usage:    "set the value of the operation's \"OneofAge\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-id",
					Usage:    "set the value of the operation's \"OneofId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-status",
					Usage:    "set the value of the operation's \"OneofStatus\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-size",
					Usage:    "set the value of the operation's \"OneofSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-length",
					Usage:    "set the value of the operation's \"OneofLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-connection-id",
					Usage:    "set the value of the operation's \"OneofConnectionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-session-id",
					Usage:    "set the value of the operation's \"OneofSessionId\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-fixed-size",
					Usage:    "set the value of the operation's \"OneofFixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-fixed-length",
					Usage:    "set the value of the operation's \"OneofFixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-sfixed-size",
					Usage:    "set the value of the operation's \"OneofSfixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-sfixed-length",
					Usage:    "set the value of the operation's \"OneofSfixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.BoolFlag{
					Name:     "oneof-is-active",
					Usage:    "set the value of the operation's \"OneofIsActive\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-data",
					Usage:    "set the value of the operation's \"OneofData\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-address",
					Usage:    "set the value of the operation's \"OneofAddress\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewOptionalClient(c)
				req, err := UnmarshalCliFlagsToOptionalExample(cmd, helpers.UnmarshalCliFlagsOptions{FromFile: "input-file"})
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				if err := client.SignalOptional(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id"), req); err != nil {
					return fmt.Errorf("error sending %q signal: %w", SignalOptionalSignalName, err)
				}
				fmt.Println("success")
				return nil
			},
		},
		{
			Name:                   "put-optional-example",
			Usage:                  "executes a(n) test.opaque.Optional.PutOptionalExample workflow",
			Category:               "WORKFLOWS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow in the background and print workflow and execution id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:    "task-queue",
					Usage:   "task queue name",
					Aliases: []string{"t"},
					EnvVars: []string{"TEMPORAL_TASK_QUEUE_NAME", "TEMPORAL_TASK_QUEUE", "TASK_QUEUE_NAME", "TASK_QUEUE"},
					Value:   "opaque-optional",
				},
				&v2.StringFlag{
					Name:     "input-file",
					Usage:    "path to json-formatted input file",
					Aliases:  []string{"f"},
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "name",
					Usage:    "set the value of the operation's \"Name\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "score",
					Usage:    "set the value of the operation's \"Score\" parameter",
					Category: "INPUT",
				},
				&v2.Float64SliceFlag{
					Name:     "scores",
					Usage:    "set the value of the operation's \"Scores\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "ratio",
					Usage:    "set the value of the operation's \"Ratio\" parameter",
					Category: "INPUT",
				},
				&v2.Float64SliceFlag{
					Name:     "ratios",
					Usage:    "set the value of the operation's \"Ratios\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "age",
					Usage:    "set the value of the operation's \"Age\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "ages",
					Usage:    "set the value of the operation's \"Ages\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "ids",
					Usage:    "set the value of the operation's \"Ids\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "emails",
					Usage:    "set the value of the operation's \"Emails\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "extra",
					Usage:    "set the value of the operation's \"Extra\" parameter (json-encoded: {key: <string>, value: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "status",
					Usage:    "set the value of the operation's \"Status\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "statuses",
					Usage:    "set the value of the operation's \"Statuses\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "size",
					Usage:    "set the value of the operation's \"Size\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "sizes",
					Usage:    "set the value of the operation's \"Sizes\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "length",
					Usage:    "set the value of the operation's \"Length\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "lengths",
					Usage:    "set the value of the operation's \"Lengths\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "connection-id",
					Usage:    "set the value of the operation's \"ConnectionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "connection-ids",
					Usage:    "set the value of the operation's \"ConnectionIds\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "session-id",
					Usage:    "set the value of the operation's \"SessionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "session-ids",
					Usage:    "set the value of the operation's \"SessionIds\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "fixed-size",
					Usage:    "set the value of the operation's \"FixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "fixed-sizes",
					Usage:    "set the value of the operation's \"FixedSizes\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "fixed-length",
					Usage:    "set the value of the operation's \"FixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "fixed-lengths",
					Usage:    "set the value of the operation's \"FixedLengths\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "sfixed-size",
					Usage:    "set the value of the operation's \"SfixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "sfixed-sizes",
					Usage:    "set the value of the operation's \"SfixedSizes\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "sfixed-length",
					Usage:    "set the value of the operation's \"SfixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "sfixed-lengths",
					Usage:    "set the value of the operation's \"SfixedLengths\" parameter",
					Category: "INPUT",
				},
				&v2.BoolFlag{
					Name:     "is-active",
					Usage:    "set the value of the operation's \"IsActive\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "is-actives",
					Usage:    "set the value of the operation's \"IsActives\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "data",
					Usage:    "set the value of the operation's \"Data\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "datas",
					Usage:    "set the value of the operation's \"Datas\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "address",
					Usage:    "set the value of the operation's \"Address\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "previous-addresses",
					Usage:    "set the value of the operation's \"PreviousAddresses\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-name",
					Usage:    "set the value of the operation's \"OneofName\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "oneof-score",
					Usage:    "set the value of the operation's \"OneofScore\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "oneof-ratio",
					Usage:    "set the value of the operation's \"OneofRatio\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-age",
					Usage:    "set the value of the operation's \"OneofAge\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-id",
					Usage:    "set the value of the operation's \"OneofId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-status",
					Usage:    "set the value of the operation's \"OneofStatus\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-size",
					Usage:    "set the value of the operation's \"OneofSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-length",
					Usage:    "set the value of the operation's \"OneofLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-connection-id",
					Usage:    "set the value of the operation's \"OneofConnectionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-session-id",
					Usage:    "set the value of the operation's \"OneofSessionId\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-fixed-size",
					Usage:    "set the value of the operation's \"OneofFixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-fixed-length",
					Usage:    "set the value of the operation's \"OneofFixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-sfixed-size",
					Usage:    "set the value of the operation's \"OneofSfixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-sfixed-length",
					Usage:    "set the value of the operation's \"OneofSfixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.BoolFlag{
					Name:     "oneof-is-active",
					Usage:    "set the value of the operation's \"OneofIsActive\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-data",
					Usage:    "set the value of the operation's \"OneofData\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-address",
					Usage:    "set the value of the operation's \"OneofAddress\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				tc, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer tc.Close()
				c := NewOptionalClient(tc)
				req, err := UnmarshalCliFlagsToOptionalExample(cmd, helpers.UnmarshalCliFlagsOptions{FromFile: "input-file"})
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				opts := client.StartWorkflowOptions{}
				if tq := cmd.String("task-queue"); tq != "" {
					opts.TaskQueue = tq
				}
				run, err := c.PutOptionalExampleAsync(cmd.Context, req, NewPutOptionalExampleOptions().WithStartWorkflowOptions(opts))
				if err != nil {
					return fmt.Errorf("error starting %s workflow: %w", PutOptionalExampleWorkflowName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", run.ID())
					fmt.Printf("run id: %s\n", run.RunID())
					return nil
				}
				if resp, err := run.Get(cmd.Context); err != nil {
					return err
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
		// sends a test.opaque.Optional.SignalOptional signal to a test.opaque.Optional.PutOptionalExample workflow, starting it if necessary,
		{
			Name:                   "put-optional-example-with-signal-optional",
			Usage:                  "sends a test.opaque.Optional.SignalOptional signal to a test.opaque.Optional.PutOptionalExample workflow, starting it if necessary",
			Category:               "WORKFLOWS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow in the background and print workflow and execution id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:     "input-file",
					Usage:    "path to json-formatted input file",
					Aliases:  []string{"f"},
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "name",
					Usage:    "set the value of the operation's \"Name\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "score",
					Usage:    "set the value of the operation's \"Score\" parameter",
					Category: "INPUT",
				},
				&v2.Float64SliceFlag{
					Name:     "scores",
					Usage:    "set the value of the operation's \"Scores\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "ratio",
					Usage:    "set the value of the operation's \"Ratio\" parameter",
					Category: "INPUT",
				},
				&v2.Float64SliceFlag{
					Name:     "ratios",
					Usage:    "set the value of the operation's \"Ratios\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "age",
					Usage:    "set the value of the operation's \"Age\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "ages",
					Usage:    "set the value of the operation's \"Ages\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "ids",
					Usage:    "set the value of the operation's \"Ids\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "emails",
					Usage:    "set the value of the operation's \"Emails\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "extra",
					Usage:    "set the value of the operation's \"Extra\" parameter (json-encoded: {key: <string>, value: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "status",
					Usage:    "set the value of the operation's \"Status\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "statuses",
					Usage:    "set the value of the operation's \"Statuses\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "size",
					Usage:    "set the value of the operation's \"Size\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "sizes",
					Usage:    "set the value of the operation's \"Sizes\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "length",
					Usage:    "set the value of the operation's \"Length\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "lengths",
					Usage:    "set the value of the operation's \"Lengths\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "connection-id",
					Usage:    "set the value of the operation's \"ConnectionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "connection-ids",
					Usage:    "set the value of the operation's \"ConnectionIds\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "session-id",
					Usage:    "set the value of the operation's \"SessionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "session-ids",
					Usage:    "set the value of the operation's \"SessionIds\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "fixed-size",
					Usage:    "set the value of the operation's \"FixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "fixed-sizes",
					Usage:    "set the value of the operation's \"FixedSizes\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "fixed-length",
					Usage:    "set the value of the operation's \"FixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64SliceFlag{
					Name:     "fixed-lengths",
					Usage:    "set the value of the operation's \"FixedLengths\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "sfixed-size",
					Usage:    "set the value of the operation's \"SfixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "sfixed-sizes",
					Usage:    "set the value of the operation's \"SfixedSizes\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "sfixed-length",
					Usage:    "set the value of the operation's \"SfixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64SliceFlag{
					Name:     "sfixed-lengths",
					Usage:    "set the value of the operation's \"SfixedLengths\" parameter",
					Category: "INPUT",
				},
				&v2.BoolFlag{
					Name:     "is-active",
					Usage:    "set the value of the operation's \"IsActive\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "is-actives",
					Usage:    "set the value of the operation's \"IsActives\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "data",
					Usage:    "set the value of the operation's \"Data\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "datas",
					Usage:    "set the value of the operation's \"Datas\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "address",
					Usage:    "set the value of the operation's \"Address\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "previous-addresses",
					Usage:    "set the value of the operation's \"PreviousAddresses\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-name",
					Usage:    "set the value of the operation's \"OneofName\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "oneof-score",
					Usage:    "set the value of the operation's \"OneofScore\" parameter",
					Category: "INPUT",
				},
				&v2.Float64Flag{
					Name:     "oneof-ratio",
					Usage:    "set the value of the operation's \"OneofRatio\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-age",
					Usage:    "set the value of the operation's \"OneofAge\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-id",
					Usage:    "set the value of the operation's \"OneofId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-status",
					Usage:    "set the value of the operation's \"OneofStatus\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-size",
					Usage:    "set the value of the operation's \"OneofSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-length",
					Usage:    "set the value of the operation's \"OneofLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-connection-id",
					Usage:    "set the value of the operation's \"OneofConnectionId\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-session-id",
					Usage:    "set the value of the operation's \"OneofSessionId\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-fixed-size",
					Usage:    "set the value of the operation's \"OneofFixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Uint64Flag{
					Name:     "oneof-fixed-length",
					Usage:    "set the value of the operation's \"OneofFixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-sfixed-size",
					Usage:    "set the value of the operation's \"OneofSfixedSize\" parameter",
					Category: "INPUT",
				},
				&v2.Int64Flag{
					Name:     "oneof-sfixed-length",
					Usage:    "set the value of the operation's \"OneofSfixedLength\" parameter",
					Category: "INPUT",
				},
				&v2.BoolFlag{
					Name:     "oneof-is-active",
					Usage:    "set the value of the operation's \"OneofIsActive\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-data",
					Usage:    "set the value of the operation's \"OneofData\" parameter (base64-encoded)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "oneof-address",
					Usage:    "set the value of the operation's \"OneofAddress\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "signal-file",
					Usage:    "path to json-formatted input file",
					Aliases:  []string{"s"},
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-name",
					Usage:    "set the value of the operation's \"Name\" parameter",
					Category: "SIGNAL",
				},
				&v2.Float64Flag{
					Name:     "signal-optional-score",
					Usage:    "set the value of the operation's \"Score\" parameter",
					Category: "SIGNAL",
				},
				&v2.Float64SliceFlag{
					Name:     "signal-optional-scores",
					Usage:    "set the value of the operation's \"Scores\" parameter",
					Category: "SIGNAL",
				},
				&v2.Float64Flag{
					Name:     "signal-optional-ratio",
					Usage:    "set the value of the operation's \"Ratio\" parameter",
					Category: "SIGNAL",
				},
				&v2.Float64SliceFlag{
					Name:     "signal-optional-ratios",
					Usage:    "set the value of the operation's \"Ratios\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-age",
					Usage:    "set the value of the operation's \"Age\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64SliceFlag{
					Name:     "signal-optional-ages",
					Usage:    "set the value of the operation's \"Ages\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64SliceFlag{
					Name:     "signal-optional-ids",
					Usage:    "set the value of the operation's \"Ids\" parameter",
					Category: "SIGNAL",
				},
				&v2.StringSliceFlag{
					Name:     "signal-optional-emails",
					Usage:    "set the value of the operation's \"Emails\" parameter",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-extra",
					Usage:    "set the value of the operation's \"Extra\" parameter (json-encoded: {key: <string>, value: <string>})",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-status",
					Usage:    "set the value of the operation's \"Status\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "SIGNAL",
				},
				&v2.StringSliceFlag{
					Name:     "signal-optional-statuses",
					Usage:    "set the value of the operation's \"Statuses\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-size",
					Usage:    "set the value of the operation's \"Size\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64SliceFlag{
					Name:     "signal-optional-sizes",
					Usage:    "set the value of the operation's \"Sizes\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-length",
					Usage:    "set the value of the operation's \"Length\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64SliceFlag{
					Name:     "signal-optional-lengths",
					Usage:    "set the value of the operation's \"Lengths\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-connection-id",
					Usage:    "set the value of the operation's \"ConnectionId\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64SliceFlag{
					Name:     "signal-optional-connection-ids",
					Usage:    "set the value of the operation's \"ConnectionIds\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-session-id",
					Usage:    "set the value of the operation's \"SessionId\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64SliceFlag{
					Name:     "signal-optional-session-ids",
					Usage:    "set the value of the operation's \"SessionIds\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-fixed-size",
					Usage:    "set the value of the operation's \"FixedSize\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64SliceFlag{
					Name:     "signal-optional-fixed-sizes",
					Usage:    "set the value of the operation's \"FixedSizes\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-fixed-length",
					Usage:    "set the value of the operation's \"FixedLength\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64SliceFlag{
					Name:     "signal-optional-fixed-lengths",
					Usage:    "set the value of the operation's \"FixedLengths\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-sfixed-size",
					Usage:    "set the value of the operation's \"SfixedSize\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64SliceFlag{
					Name:     "signal-optional-sfixed-sizes",
					Usage:    "set the value of the operation's \"SfixedSizes\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-sfixed-length",
					Usage:    "set the value of the operation's \"SfixedLength\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64SliceFlag{
					Name:     "signal-optional-sfixed-lengths",
					Usage:    "set the value of the operation's \"SfixedLengths\" parameter",
					Category: "SIGNAL",
				},
				&v2.BoolFlag{
					Name:     "signal-optional-is-active",
					Usage:    "set the value of the operation's \"IsActive\" parameter",
					Category: "SIGNAL",
				},
				&v2.StringSliceFlag{
					Name:     "signal-optional-is-actives",
					Usage:    "set the value of the operation's \"IsActives\" parameter",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-data",
					Usage:    "set the value of the operation's \"Data\" parameter (base64-encoded)",
					Category: "SIGNAL",
				},
				&v2.StringSliceFlag{
					Name:     "signal-optional-datas",
					Usage:    "set the value of the operation's \"Datas\" parameter (base64-encoded)",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-address",
					Usage:    "set the value of the operation's \"Address\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "SIGNAL",
				},
				&v2.StringSliceFlag{
					Name:     "signal-optional-previous-addresses",
					Usage:    "set the value of the operation's \"PreviousAddresses\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-oneof-name",
					Usage:    "set the value of the operation's \"OneofName\" parameter",
					Category: "SIGNAL",
				},
				&v2.Float64Flag{
					Name:     "signal-optional-oneof-score",
					Usage:    "set the value of the operation's \"OneofScore\" parameter",
					Category: "SIGNAL",
				},
				&v2.Float64Flag{
					Name:     "signal-optional-oneof-ratio",
					Usage:    "set the value of the operation's \"OneofRatio\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-oneof-age",
					Usage:    "set the value of the operation's \"OneofAge\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-oneof-id",
					Usage:    "set the value of the operation's \"OneofId\" parameter",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-oneof-status",
					Usage:    "set the value of the operation's \"OneofStatus\" parameter (STATUS_UNSPECIFIED, STATUS_OK, STATUS_ERROR)",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-oneof-size",
					Usage:    "set the value of the operation's \"OneofSize\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-oneof-length",
					Usage:    "set the value of the operation's \"OneofLength\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-oneof-connection-id",
					Usage:    "set the value of the operation's \"OneofConnectionId\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-oneof-session-id",
					Usage:    "set the value of the operation's \"OneofSessionId\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-oneof-fixed-size",
					Usage:    "set the value of the operation's \"OneofFixedSize\" parameter",
					Category: "SIGNAL",
				},
				&v2.Uint64Flag{
					Name:     "signal-optional-oneof-fixed-length",
					Usage:    "set the value of the operation's \"OneofFixedLength\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-oneof-sfixed-size",
					Usage:    "set the value of the operation's \"OneofSfixedSize\" parameter",
					Category: "SIGNAL",
				},
				&v2.Int64Flag{
					Name:     "signal-optional-oneof-sfixed-length",
					Usage:    "set the value of the operation's \"OneofSfixedLength\" parameter",
					Category: "SIGNAL",
				},
				&v2.BoolFlag{
					Name:     "signal-optional-oneof-is-active",
					Usage:    "set the value of the operation's \"OneofIsActive\" parameter",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-oneof-data",
					Usage:    "set the value of the operation's \"OneofData\" parameter (base64-encoded)",
					Category: "SIGNAL",
				},
				&v2.StringFlag{
					Name:     "signal-optional-oneof-address",
					Usage:    "set the value of the operation's \"OneofAddress\" parameter (json-encoded: {street: <string>, city: <string>, state: <string>, zip: <string>})",
					Category: "SIGNAL",
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewOptionalClient(c)
				req, err := UnmarshalCliFlagsToOptionalExample(cmd, helpers.UnmarshalCliFlagsOptions{FromFile: "input-file"})
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				signal, err := UnmarshalCliFlagsToOptionalExample(cmd, helpers.UnmarshalCliFlagsOptions{FromFile: "signal-file"}, helpers.UnmarshalCliFlagsOptions{
					Prefix: "signal-optional",
					PrefixFlags: map[string]struct{}{
						"address":             {},
						"age":                 {},
						"ages":                {},
						"connection-id":       {},
						"connection-ids":      {},
						"data":                {},
						"datas":               {},
						"emails":              {},
						"extra":               {},
						"fixed-length":        {},
						"fixed-lengths":       {},
						"fixed-size":          {},
						"fixed-sizes":         {},
						"id":                  {},
						"ids":                 {},
						"is-active":           {},
						"is-actives":          {},
						"length":              {},
						"lengths":             {},
						"name":                {},
						"oneof-address":       {},
						"oneof-age":           {},
						"oneof-connection-id": {},
						"oneof-data":          {},
						"oneof-fixed-length":  {},
						"oneof-fixed-size":    {},
						"oneof-id":            {},
						"oneof-is-active":     {},
						"oneof-length":        {},
						"oneof-name":          {},
						"oneof-ratio":         {},
						"oneof-score":         {},
						"oneof-session-id":    {},
						"oneof-sfixed-length": {},
						"oneof-sfixed-size":   {},
						"oneof-size":          {},
						"oneof-status":        {},
						"previous-addresses":  {},
						"ratio":               {},
						"ratios":              {},
						"score":               {},
						"scores":              {},
						"session-id":          {},
						"session-ids":         {},
						"sfixed-length":       {},
						"sfixed-lengths":      {},
						"sfixed-size":         {},
						"sfixed-sizes":        {},
						"size":                {},
						"sizes":               {},
						"status":              {},
						"statuses":            {},
					},
				})
				if err != nil {
					return fmt.Errorf("error unmarshalling signal: %w", err)
				}
				run, err := client.PutOptionalExampleWithSignalOptionalAsync(cmd.Context, req, signal)
				if err != nil {
					return fmt.Errorf("error starting %s workflow with %s signal: %w", PutOptionalExampleWorkflowName, SignalOptionalSignalName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", run.ID())
					fmt.Printf("run id: %s\n", run.RunID())
					return nil
				}
				if resp, err := run.Get(cmd.Context); err != nil {
					return err
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
	}
	if opts.worker != nil {
		commands = append(commands, []*v2.Command{
			{
				Name:                   "worker",
				Usage:                  "runs a test.opaque.Optional worker process",
				UseShortOptionHandling: true,
				Before:                 opts.before,
				After:                  opts.after,
				Action: func(cmd *v2.Context) error {
					c, err := opts.clientForCommand(cmd)
					if err != nil {
						return fmt.Errorf("error initializing client for command: %w", err)
					}
					defer c.Close()
					w, err := opts.worker(cmd, c)
					if opts.worker != nil {
						if err != nil {
							return fmt.Errorf("error initializing worker: %w", err)
						}
					}
					if err := w.Start(); err != nil {
						return fmt.Errorf("error starting worker: %w", err)
					}
					defer w.Stop()
					<-cmd.Context.Done()
					return nil
				},
			},
		}...)
	}
	sort.Slice(commands, func(i, j int) bool {
		return commands[i].Name < commands[j].Name
	})
	return commands, nil
}

// UnmarshalCliFlagsToOptionalExample unmarshals a OptionalExample from command line flags
func UnmarshalCliFlagsToOptionalExample(cmd *v2.Context, options ...helpers.UnmarshalCliFlagsOptions) (*OptionalExample, error) {
	opts := helpers.FlattenUnmarshalCliFlagsOptions(options...)
	var result OptionalExample
	if opts.FromFile != "" && cmd.IsSet(opts.FromFile) {
		f, err := gohomedir.Expand(cmd.String(opts.FromFile))
		if err != nil {
			f = cmd.String(opts.FromFile)
		}
		b, err := os.ReadFile(f)
		if err != nil {
			return nil, fmt.Errorf("error reading %s: %w", opts.FromFile, err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing %s json: %w", opts.FromFile, err)
		}
	}
	if flag := opts.FlagName("name"); cmd.IsSet(flag) {
		value := cmd.String(flag)
		result.Name = &value
	}
	if flag := opts.FlagName("score"); cmd.IsSet(flag) {
		value := cmd.Float64(flag)
		result.Score = &value
	}
	if flag := opts.FlagName("scores"); cmd.IsSet(flag) {
		value := cmd.Float64Slice(flag)
		result.Scores = value
	}
	if flag := opts.FlagName("ratio"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[float64, float32](cmd.Float64(flag))
		if err != nil {
			return nil, err
		}
		result.Ratio = &value
	}
	if flag := opts.FlagName("ratios"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.Float64Slice(flag), func(v float64) (result float32, err error) {
			value, err := convert.SafeCast[float64, float32](v)
			if err != nil {
				return result, err
			}
			return value, nil
		})
		if err != nil {
			return nil, err
		}
		result.Ratios = value
	}
	if flag := opts.FlagName("age"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[int64, int32](cmd.Int64(flag))
		if err != nil {
			return nil, err
		}
		result.Age = &value
	}
	if flag := opts.FlagName("ages"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.Int64Slice(flag), func(v int64) (result int32, err error) {
			value, err := convert.SafeCast[int64, int32](v)
			if err != nil {
				return result, err
			}
			return value, nil
		})
		if err != nil {
			return nil, err
		}
		result.Ages = value
	}
	if flag := opts.FlagName("id"); cmd.IsSet(flag) {
		value := cmd.Int64(flag)
		result.Id = &value
	}
	if flag := opts.FlagName("ids"); cmd.IsSet(flag) {
		value := cmd.Int64Slice(flag)
		result.Ids = value
	}
	if flag := opts.FlagName("emails"); cmd.IsSet(flag) {
		value := cmd.StringSlice(flag)
		result.Emails = value
	}
	if flag := opts.FlagName("extra"); cmd.IsSet(flag) {
		var tmp OptionalExample
		if err := protojson.Unmarshal([]byte(fmt.Sprintf("{\"extra\":%s}", cmd.String(flag))), &tmp); err != nil {
			return nil, fmt.Errorf("error unmarshalling \"extra\" map flag: %w", err)
		}
		value := tmp.GetExtra()
		result.Extra = value
	}
	if flag := opts.FlagName("status"); cmd.IsSet(flag) {
		enumID, ok := Status_value[cmd.String(flag)]
		if !ok {
			return nil, fmt.Errorf("invalid value for enum field %s", "Status")
		}
		value := Status(enumID)
		result.Status = &value
	}
	if flag := opts.FlagName("statuses"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.StringSlice(flag), func(v string) (result Status, err error) {
			enumID, ok := Status_value[v]
			if !ok {
				return result, fmt.Errorf("invalid value for enum field %s", "Statuses")
			}
			return Status(enumID), nil
		})
		if err != nil {
			return nil, err
		}
		result.Statuses = value
	}
	if flag := opts.FlagName("size"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[uint64, uint32](cmd.Uint64(flag))
		if err != nil {
			return nil, err
		}
		result.Size = &value
	}
	if flag := opts.FlagName("sizes"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.Uint64Slice(flag), func(v uint64) (result uint32, err error) {
			value, err := convert.SafeCast[uint64, uint32](v)
			if err != nil {
				return result, err
			}
			return value, nil
		})
		if err != nil {
			return nil, err
		}
		result.Sizes = value
	}
	if flag := opts.FlagName("length"); cmd.IsSet(flag) {
		value := cmd.Uint64(flag)
		result.Length = &value
	}
	if flag := opts.FlagName("lengths"); cmd.IsSet(flag) {
		value := cmd.Uint64Slice(flag)
		result.Lengths = value
	}
	if flag := opts.FlagName("connection-id"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[int64, int32](cmd.Int64(flag))
		if err != nil {
			return nil, err
		}
		result.ConnectionId = &value
	}
	if flag := opts.FlagName("connection-ids"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.Int64Slice(flag), func(v int64) (result int32, err error) {
			value, err := convert.SafeCast[int64, int32](v)
			if err != nil {
				return result, err
			}
			return value, nil
		})
		if err != nil {
			return nil, err
		}
		result.ConnectionIds = value
	}
	if flag := opts.FlagName("session-id"); cmd.IsSet(flag) {
		value := cmd.Int64(flag)
		result.SessionId = &value
	}
	if flag := opts.FlagName("session-ids"); cmd.IsSet(flag) {
		value := cmd.Int64Slice(flag)
		result.SessionIds = value
	}
	if flag := opts.FlagName("fixed-size"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[uint64, uint32](cmd.Uint64(flag))
		if err != nil {
			return nil, err
		}
		result.FixedSize = &value
	}
	if flag := opts.FlagName("fixed-sizes"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.Uint64Slice(flag), func(v uint64) (result uint32, err error) {
			value, err := convert.SafeCast[uint64, uint32](v)
			if err != nil {
				return result, err
			}
			return value, nil
		})
		if err != nil {
			return nil, err
		}
		result.FixedSizes = value
	}
	if flag := opts.FlagName("fixed-length"); cmd.IsSet(flag) {
		value := cmd.Uint64(flag)
		result.FixedLength = &value
	}
	if flag := opts.FlagName("fixed-lengths"); cmd.IsSet(flag) {
		value := cmd.Uint64Slice(flag)
		result.FixedLengths = value
	}
	if flag := opts.FlagName("sfixed-size"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[int64, int32](cmd.Int64(flag))
		if err != nil {
			return nil, err
		}
		result.SfixedSize = &value
	}
	if flag := opts.FlagName("sfixed-sizes"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.Int64Slice(flag), func(v int64) (result int32, err error) {
			value, err := convert.SafeCast[int64, int32](v)
			if err != nil {
				return result, err
			}
			return value, nil
		})
		if err != nil {
			return nil, err
		}
		result.SfixedSizes = value
	}
	if flag := opts.FlagName("sfixed-length"); cmd.IsSet(flag) {
		value := cmd.Int64(flag)
		result.SfixedLength = &value
	}
	if flag := opts.FlagName("sfixed-lengths"); cmd.IsSet(flag) {
		value := cmd.Int64Slice(flag)
		result.SfixedLengths = value
	}
	if flag := opts.FlagName("is-active"); cmd.IsSet(flag) {
		value := cmd.Bool(flag)
		result.IsActive = &value
	}
	if flag := opts.FlagName("is-actives"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.StringSlice(flag), func(v string) (result bool, err error) {
			return strconv.ParseBool(v)
		})
		if err != nil {
			return nil, err
		}
		result.IsActives = value
	}
	if flag := opts.FlagName("data"); cmd.IsSet(flag) {
		value, err := base64.StdEncoding.DecodeString(cmd.String(flag))
		if err != nil {
			return nil, err
		}
		result.Data = value
	}
	if flag := opts.FlagName("datas"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.StringSlice(flag), func(v string) (result []byte, err error) {
			return base64.StdEncoding.DecodeString(v)
		})
		if err != nil {
			return nil, err
		}
		result.Datas = value
	}
	if flag := opts.FlagName("address"); cmd.IsSet(flag) {
		var tmp Address
		if err := protojson.Unmarshal([]byte(cmd.String(flag)), &tmp); err != nil {
			return nil, fmt.Errorf("error unmarshalling \"address\" flag: %w", err)
		}
		value := &tmp
		result.Address = value
	}
	if flag := opts.FlagName("previous-addresses"); cmd.IsSet(flag) {
		value, err := convert.MapSliceFunc(cmd.StringSlice(flag), func(v string) (*Address, error) {
			var tmp Address
			if err := protojson.Unmarshal([]byte(v), &tmp); err != nil {
				return nil, fmt.Errorf("error unmarshalling \"previous-addresses\" flag: %w", err)
			}
			return &tmp, nil
		})
		if err != nil {
			return nil, err
		}
		result.PreviousAddresses = value
	}
	if flag := opts.FlagName("oneof-name"); cmd.IsSet(flag) {
		value := cmd.String(flag)
		oneOfValue := &OptionalExample_OneofName{OneofName: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-score"); cmd.IsSet(flag) {
		value := cmd.Float64(flag)
		oneOfValue := &OptionalExample_OneofScore{OneofScore: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-ratio"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[float64, float32](cmd.Float64(flag))
		if err != nil {
			return nil, err
		}
		oneOfValue := &OptionalExample_OneofRatio{OneofRatio: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-age"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[int64, int32](cmd.Int64(flag))
		if err != nil {
			return nil, err
		}
		oneOfValue := &OptionalExample_OneofAge{OneofAge: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-id"); cmd.IsSet(flag) {
		value := cmd.Int64(flag)
		oneOfValue := &OptionalExample_OneofId{OneofId: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-status"); cmd.IsSet(flag) {
		enumID, ok := Status_value[cmd.String(flag)]
		if !ok {
			return nil, fmt.Errorf("invalid value for enum field %s", "OneofField")
		}
		value := Status(enumID)
		oneOfValue := &OptionalExample_OneofStatus{OneofStatus: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-size"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[uint64, uint32](cmd.Uint64(flag))
		if err != nil {
			return nil, err
		}
		oneOfValue := &OptionalExample_OneofSize{OneofSize: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-length"); cmd.IsSet(flag) {
		value := cmd.Uint64(flag)
		oneOfValue := &OptionalExample_OneofLength{OneofLength: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-connection-id"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[int64, int32](cmd.Int64(flag))
		if err != nil {
			return nil, err
		}
		oneOfValue := &OptionalExample_OneofConnectionId{OneofConnectionId: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-session-id"); cmd.IsSet(flag) {
		value := cmd.Int64(flag)
		oneOfValue := &OptionalExample_OneofSessionId{OneofSessionId: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-fixed-size"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[uint64, uint32](cmd.Uint64(flag))
		if err != nil {
			return nil, err
		}
		oneOfValue := &OptionalExample_OneofFixedSize{OneofFixedSize: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-fixed-length"); cmd.IsSet(flag) {
		value := cmd.Uint64(flag)
		oneOfValue := &OptionalExample_OneofFixedLength{OneofFixedLength: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-sfixed-size"); cmd.IsSet(flag) {
		value, err := convert.SafeCast[int64, int32](cmd.Int64(flag))
		if err != nil {
			return nil, err
		}
		oneOfValue := &OptionalExample_OneofSfixedSize{OneofSfixedSize: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-sfixed-length"); cmd.IsSet(flag) {
		value := cmd.Int64(flag)
		oneOfValue := &OptionalExample_OneofSfixedLength{OneofSfixedLength: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-is-active"); cmd.IsSet(flag) {
		value := cmd.Bool(flag)
		oneOfValue := &OptionalExample_OneofIsActive{OneofIsActive: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-data"); cmd.IsSet(flag) {
		value, err := base64.StdEncoding.DecodeString(cmd.String(flag))
		if err != nil {
			return nil, err
		}
		oneOfValue := &OptionalExample_OneofData{OneofData: value}
		result.OneofField = oneOfValue
	}
	if flag := opts.FlagName("oneof-address"); cmd.IsSet(flag) {
		var tmp Address
		if err := protojson.Unmarshal([]byte(cmd.String(flag)), &tmp); err != nil {
			return nil, fmt.Errorf("error unmarshalling \"oneof-address\" flag: %w", err)
		}
		value := &tmp
		oneOfValue := &OptionalExample_OneofAddress{OneofAddress: value}
		result.OneofField = oneOfValue
	}
	return &result, nil
}

// WithOptionalSchemeTypes registers all Optional protobuf types with the given scheme
func WithOptionalSchemeTypes() scheme.Option {
	return func(s *scheme.Scheme) {
		s.RegisterType(File_test_opaque_optional_proto.Messages().ByName("OptionalExample"))
		s.RegisterType(File_test_opaque_optional_proto.Messages().ByName("OptionalExample").Messages().ByName("ExtraEntry"))
	}
}
