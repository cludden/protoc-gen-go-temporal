// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: test/simple/v1/simple.proto

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH

package v1

import (
	_ "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	v1 "github.com/cludden/protoc-gen-go-temporal/gen/test/simple/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OtherEnum int32

const (
	OtherEnum_OTHER_UNSPECIFIED OtherEnum = 0
	OtherEnum_OTHER_FOO         OtherEnum = 1
	OtherEnum_OTHER_BAR         OtherEnum = 2
)

// Enum value maps for OtherEnum.
var (
	OtherEnum_name = map[int32]string{
		0: "OTHER_UNSPECIFIED",
		1: "OTHER_FOO",
		2: "OTHER_BAR",
	}
	OtherEnum_value = map[string]int32{
		"OTHER_UNSPECIFIED": 0,
		"OTHER_FOO":         1,
		"OTHER_BAR":         2,
	}
)

func (x OtherEnum) Enum() *OtherEnum {
	p := new(OtherEnum)
	*p = x
	return p
}

func (x OtherEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtherEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_simple_v1_simple_proto_enumTypes[0].Descriptor()
}

func (OtherEnum) Type() protoreflect.EnumType {
	return &file_test_simple_v1_simple_proto_enumTypes[0]
}

func (x OtherEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OtherEnum.Descriptor instead.
func (OtherEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{0}
}

type SomeWorkflow1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestVal    string                 `protobuf:"bytes,1,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeWorkflow1Request) Reset() {
	*x = SomeWorkflow1Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeWorkflow1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeWorkflow1Request) ProtoMessage() {}

func (x *SomeWorkflow1Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeWorkflow1Request.ProtoReflect.Descriptor instead.
func (*SomeWorkflow1Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{0}
}

func (x *SomeWorkflow1Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

func (x *SomeWorkflow1Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SomeWorkflow1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseVal   string                 `protobuf:"bytes,1,opt,name=response_val,json=responseVal,proto3" json:"response_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeWorkflow1Response) Reset() {
	*x = SomeWorkflow1Response{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeWorkflow1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeWorkflow1Response) ProtoMessage() {}

func (x *SomeWorkflow1Response) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeWorkflow1Response.ProtoReflect.Descriptor instead.
func (*SomeWorkflow1Response) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{1}
}

func (x *SomeWorkflow1Response) GetResponseVal() string {
	if x != nil {
		return x.ResponseVal
	}
	return ""
}

type SomeWorkflow3Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestVal    string                 `protobuf:"bytes,2,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeWorkflow3Request) Reset() {
	*x = SomeWorkflow3Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeWorkflow3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeWorkflow3Request) ProtoMessage() {}

func (x *SomeWorkflow3Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeWorkflow3Request.ProtoReflect.Descriptor instead.
func (*SomeWorkflow3Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{2}
}

func (x *SomeWorkflow3Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SomeWorkflow3Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

type SomeActivity2Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestVal    string                 `protobuf:"bytes,1,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeActivity2Request) Reset() {
	*x = SomeActivity2Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeActivity2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeActivity2Request) ProtoMessage() {}

func (x *SomeActivity2Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeActivity2Request.ProtoReflect.Descriptor instead.
func (*SomeActivity2Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{3}
}

func (x *SomeActivity2Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

type SomeActivity3Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestVal    string                 `protobuf:"bytes,1,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeActivity3Request) Reset() {
	*x = SomeActivity3Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeActivity3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeActivity3Request) ProtoMessage() {}

func (x *SomeActivity3Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeActivity3Request.ProtoReflect.Descriptor instead.
func (*SomeActivity3Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{4}
}

func (x *SomeActivity3Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

type SomeActivity3Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseVal   string                 `protobuf:"bytes,1,opt,name=response_val,json=responseVal,proto3" json:"response_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeActivity3Response) Reset() {
	*x = SomeActivity3Response{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeActivity3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeActivity3Response) ProtoMessage() {}

func (x *SomeActivity3Response) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeActivity3Response.ProtoReflect.Descriptor instead.
func (*SomeActivity3Response) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{5}
}

func (x *SomeActivity3Response) GetResponseVal() string {
	if x != nil {
		return x.ResponseVal
	}
	return ""
}

type SomeQuery1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseVal   string                 `protobuf:"bytes,1,opt,name=response_val,json=responseVal,proto3" json:"response_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeQuery1Response) Reset() {
	*x = SomeQuery1Response{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeQuery1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeQuery1Response) ProtoMessage() {}

func (x *SomeQuery1Response) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeQuery1Response.ProtoReflect.Descriptor instead.
func (*SomeQuery1Response) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{6}
}

func (x *SomeQuery1Response) GetResponseVal() string {
	if x != nil {
		return x.ResponseVal
	}
	return ""
}

type SomeQuery2Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestVal    string                 `protobuf:"bytes,1,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeQuery2Request) Reset() {
	*x = SomeQuery2Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeQuery2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeQuery2Request) ProtoMessage() {}

func (x *SomeQuery2Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeQuery2Request.ProtoReflect.Descriptor instead.
func (*SomeQuery2Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{7}
}

func (x *SomeQuery2Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

type SomeQuery2Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseVal   string                 `protobuf:"bytes,1,opt,name=response_val,json=responseVal,proto3" json:"response_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeQuery2Response) Reset() {
	*x = SomeQuery2Response{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeQuery2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeQuery2Response) ProtoMessage() {}

func (x *SomeQuery2Response) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeQuery2Response.ProtoReflect.Descriptor instead.
func (*SomeQuery2Response) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{8}
}

func (x *SomeQuery2Response) GetResponseVal() string {
	if x != nil {
		return x.ResponseVal
	}
	return ""
}

type SomeSignal2Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestVal    string                 `protobuf:"bytes,1,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeSignal2Request) Reset() {
	*x = SomeSignal2Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeSignal2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeSignal2Request) ProtoMessage() {}

func (x *SomeSignal2Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeSignal2Request.ProtoReflect.Descriptor instead.
func (*SomeSignal2Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{9}
}

func (x *SomeSignal2Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

type SomeSignal3Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestVal    string                 `protobuf:"bytes,1,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeSignal3Request) Reset() {
	*x = SomeSignal3Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeSignal3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeSignal3Request) ProtoMessage() {}

func (x *SomeSignal3Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeSignal3Request.ProtoReflect.Descriptor instead.
func (*SomeSignal3Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{10}
}

func (x *SomeSignal3Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

type SomeSignal3Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseVal   string                 `protobuf:"bytes,1,opt,name=response_val,json=responseVal,proto3" json:"response_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeSignal3Response) Reset() {
	*x = SomeSignal3Response{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeSignal3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeSignal3Response) ProtoMessage() {}

func (x *SomeSignal3Response) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeSignal3Response.ProtoReflect.Descriptor instead.
func (*SomeSignal3Response) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{11}
}

func (x *SomeSignal3Response) GetResponseVal() string {
	if x != nil {
		return x.ResponseVal
	}
	return ""
}

type SomeUpdate1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestVal    string                 `protobuf:"bytes,1,opt,name=request_val,json=requestVal,proto3" json:"request_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeUpdate1Request) Reset() {
	*x = SomeUpdate1Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeUpdate1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeUpdate1Request) ProtoMessage() {}

func (x *SomeUpdate1Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeUpdate1Request.ProtoReflect.Descriptor instead.
func (*SomeUpdate1Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{12}
}

func (x *SomeUpdate1Request) GetRequestVal() string {
	if x != nil {
		return x.RequestVal
	}
	return ""
}

type SomeUpdate1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseVal   string                 `protobuf:"bytes,1,opt,name=response_val,json=responseVal,proto3" json:"response_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeUpdate1Response) Reset() {
	*x = SomeUpdate1Response{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeUpdate1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeUpdate1Response) ProtoMessage() {}

func (x *SomeUpdate1Response) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeUpdate1Response.ProtoReflect.Descriptor instead.
func (*SomeUpdate1Response) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{13}
}

func (x *SomeUpdate1Response) GetResponseVal() string {
	if x != nil {
		return x.ResponseVal
	}
	return ""
}

type OtherWorkflowRequest struct {
	state   protoimpl.MessageState    `protogen:"open.v1"`
	SomeVal string                    `protobuf:"bytes,1,opt,name=some_val,json=someVal,proto3" json:"some_val,omitempty"`
	Baz     *OtherWorkflowRequest_Baz `protobuf:"bytes,2,opt,name=baz,proto3" json:"baz,omitempty"`
	Qux     *Qux                      `protobuf:"bytes,3,opt,name=qux,proto3" json:"qux,omitempty"`
	// Types that are valid to be assigned to ExampleOneof:
	//
	//	*OtherWorkflowRequest_Foo
	//	*OtherWorkflowRequest_Bar_
	//	*OtherWorkflowRequest_ExampleBytes
	//	*OtherWorkflowRequest_ExampleDouble
	//	*OtherWorkflowRequest_ExampleFloat
	//	*OtherWorkflowRequest_ExampleInt32
	//	*OtherWorkflowRequest_ExampleInt64
	//	*OtherWorkflowRequest_ExampleUint32
	//	*OtherWorkflowRequest_ExampleUint64
	//	*OtherWorkflowRequest_ExampleSint32
	//	*OtherWorkflowRequest_ExampleSint64
	//	*OtherWorkflowRequest_ExampleFixed32
	//	*OtherWorkflowRequest_ExampleFixed64
	//	*OtherWorkflowRequest_ExampleSfixed32
	//	*OtherWorkflowRequest_ExampleSfixed64
	//	*OtherWorkflowRequest_ExampleBool
	//	*OtherWorkflowRequest_Quux
	//	*OtherWorkflowRequest_ExampleDuration
	//	*OtherWorkflowRequest_ExampleEmpty
	//	*OtherWorkflowRequest_ExampleTimestamp
	//	*OtherWorkflowRequest_ExampleEnum
	//	*OtherWorkflowRequest_CommonEnum
	ExampleOneof  isOtherWorkflowRequest_ExampleOneof `protobuf_oneof:"example_oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherWorkflowRequest) Reset() {
	*x = OtherWorkflowRequest{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherWorkflowRequest) ProtoMessage() {}

func (x *OtherWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherWorkflowRequest.ProtoReflect.Descriptor instead.
func (*OtherWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{14}
}

func (x *OtherWorkflowRequest) GetSomeVal() string {
	if x != nil {
		return x.SomeVal
	}
	return ""
}

func (x *OtherWorkflowRequest) GetBaz() *OtherWorkflowRequest_Baz {
	if x != nil {
		return x.Baz
	}
	return nil
}

func (x *OtherWorkflowRequest) GetQux() *Qux {
	if x != nil {
		return x.Qux
	}
	return nil
}

func (x *OtherWorkflowRequest) GetExampleOneof() isOtherWorkflowRequest_ExampleOneof {
	if x != nil {
		return x.ExampleOneof
	}
	return nil
}

func (x *OtherWorkflowRequest) GetFoo() *Foo {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_Foo); ok {
			return x.Foo
		}
	}
	return nil
}

func (x *OtherWorkflowRequest) GetBar() *OtherWorkflowRequest_Bar {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_Bar_); ok {
			return x.Bar
		}
	}
	return nil
}

func (x *OtherWorkflowRequest) GetExampleBytes() []byte {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleBytes); ok {
			return x.ExampleBytes
		}
	}
	return nil
}

func (x *OtherWorkflowRequest) GetExampleDouble() float64 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleDouble); ok {
			return x.ExampleDouble
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleFloat() float32 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleFloat); ok {
			return x.ExampleFloat
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleInt32() int32 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleInt32); ok {
			return x.ExampleInt32
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleInt64() int64 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleInt64); ok {
			return x.ExampleInt64
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleUint32() uint32 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleUint32); ok {
			return x.ExampleUint32
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleUint64() uint64 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleUint64); ok {
			return x.ExampleUint64
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleSint32() int32 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleSint32); ok {
			return x.ExampleSint32
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleSint64() int64 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleSint64); ok {
			return x.ExampleSint64
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleFixed32() uint32 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleFixed32); ok {
			return x.ExampleFixed32
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleFixed64() uint64 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleFixed64); ok {
			return x.ExampleFixed64
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleSfixed32() int32 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleSfixed32); ok {
			return x.ExampleSfixed32
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleSfixed64() int64 {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleSfixed64); ok {
			return x.ExampleSfixed64
		}
	}
	return 0
}

func (x *OtherWorkflowRequest) GetExampleBool() bool {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleBool); ok {
			return x.ExampleBool
		}
	}
	return false
}

func (x *OtherWorkflowRequest) GetQuux() string {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_Quux); ok {
			return x.Quux
		}
	}
	return ""
}

func (x *OtherWorkflowRequest) GetExampleDuration() *durationpb.Duration {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleDuration); ok {
			return x.ExampleDuration
		}
	}
	return nil
}

func (x *OtherWorkflowRequest) GetExampleEmpty() *emptypb.Empty {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleEmpty); ok {
			return x.ExampleEmpty
		}
	}
	return nil
}

func (x *OtherWorkflowRequest) GetExampleTimestamp() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleTimestamp); ok {
			return x.ExampleTimestamp
		}
	}
	return nil
}

func (x *OtherWorkflowRequest) GetExampleEnum() OtherEnum {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_ExampleEnum); ok {
			return x.ExampleEnum
		}
	}
	return OtherEnum_OTHER_UNSPECIFIED
}

func (x *OtherWorkflowRequest) GetCommonEnum() v1.Example {
	if x != nil {
		if x, ok := x.ExampleOneof.(*OtherWorkflowRequest_CommonEnum); ok {
			return x.CommonEnum
		}
	}
	return v1.Example(0)
}

type isOtherWorkflowRequest_ExampleOneof interface {
	isOtherWorkflowRequest_ExampleOneof()
}

type OtherWorkflowRequest_Foo struct {
	Foo *Foo `protobuf:"bytes,4,opt,name=foo,proto3,oneof"`
}

type OtherWorkflowRequest_Bar_ struct {
	Bar *OtherWorkflowRequest_Bar `protobuf:"bytes,5,opt,name=bar,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleBytes struct {
	ExampleBytes []byte `protobuf:"bytes,6,opt,name=example_bytes,json=exampleBytes,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleDouble struct {
	ExampleDouble float64 `protobuf:"fixed64,7,opt,name=example_double,json=exampleDouble,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleFloat struct {
	ExampleFloat float32 `protobuf:"fixed32,8,opt,name=example_float,json=exampleFloat,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleInt32 struct {
	ExampleInt32 int32 `protobuf:"varint,9,opt,name=example_int32,json=exampleInt32,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleInt64 struct {
	ExampleInt64 int64 `protobuf:"varint,10,opt,name=example_int64,json=exampleInt64,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleUint32 struct {
	ExampleUint32 uint32 `protobuf:"varint,11,opt,name=example_uint32,json=exampleUint32,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleUint64 struct {
	ExampleUint64 uint64 `protobuf:"varint,12,opt,name=example_uint64,json=exampleUint64,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleSint32 struct {
	ExampleSint32 int32 `protobuf:"zigzag32,13,opt,name=example_sint32,json=exampleSint32,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleSint64 struct {
	ExampleSint64 int64 `protobuf:"zigzag64,14,opt,name=example_sint64,json=exampleSint64,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleFixed32 struct {
	ExampleFixed32 uint32 `protobuf:"fixed32,15,opt,name=example_fixed32,json=exampleFixed32,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleFixed64 struct {
	ExampleFixed64 uint64 `protobuf:"fixed64,16,opt,name=example_fixed64,json=exampleFixed64,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleSfixed32 struct {
	ExampleSfixed32 int32 `protobuf:"fixed32,17,opt,name=example_sfixed32,json=exampleSfixed32,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleSfixed64 struct {
	ExampleSfixed64 int64 `protobuf:"fixed64,18,opt,name=example_sfixed64,json=exampleSfixed64,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleBool struct {
	ExampleBool bool `protobuf:"varint,19,opt,name=example_bool,json=exampleBool,proto3,oneof"`
}

type OtherWorkflowRequest_Quux struct {
	Quux string `protobuf:"bytes,20,opt,name=quux,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleDuration struct {
	ExampleDuration *durationpb.Duration `protobuf:"bytes,21,opt,name=example_duration,json=exampleDuration,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleEmpty struct {
	ExampleEmpty *emptypb.Empty `protobuf:"bytes,22,opt,name=example_empty,json=exampleEmpty,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleTimestamp struct {
	ExampleTimestamp *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=example_timestamp,json=exampleTimestamp,proto3,oneof"`
}

type OtherWorkflowRequest_ExampleEnum struct {
	ExampleEnum OtherEnum `protobuf:"varint,24,opt,name=example_enum,json=exampleEnum,proto3,enum=mycompany.simple.OtherEnum,oneof"`
}

type OtherWorkflowRequest_CommonEnum struct {
	CommonEnum v1.Example `protobuf:"varint,25,opt,name=common_enum,json=commonEnum,proto3,enum=mycompany.simple.common.v1.Example,oneof"`
}

func (*OtherWorkflowRequest_Foo) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_Bar_) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleBytes) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleDouble) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleFloat) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleInt32) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleInt64) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleUint32) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleUint64) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleSint32) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleSint64) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleFixed32) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleFixed64) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleSfixed32) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleSfixed64) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleBool) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_Quux) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleDuration) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleEmpty) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleTimestamp) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_ExampleEnum) isOtherWorkflowRequest_ExampleOneof() {}

func (*OtherWorkflowRequest_CommonEnum) isOtherWorkflowRequest_ExampleOneof() {}

type OtherWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherWorkflowResponse) Reset() {
	*x = OtherWorkflowResponse{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherWorkflowResponse) ProtoMessage() {}

func (x *OtherWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherWorkflowResponse.ProtoReflect.Descriptor instead.
func (*OtherWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{15}
}

type OtherQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        string                 `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherQueryResponse) Reset() {
	*x = OtherQueryResponse{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherQueryResponse) ProtoMessage() {}

func (x *OtherQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherQueryResponse.ProtoReflect.Descriptor instead.
func (*OtherQueryResponse) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{16}
}

func (x *OtherQueryResponse) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type OtherSignalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherSignalRequest) Reset() {
	*x = OtherSignalRequest{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherSignalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherSignalRequest) ProtoMessage() {}

func (x *OtherSignalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherSignalRequest.ProtoReflect.Descriptor instead.
func (*OtherSignalRequest) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{17}
}

func (x *OtherSignalRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type OtherUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          string                 `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherUpdateRequest) Reset() {
	*x = OtherUpdateRequest{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherUpdateRequest) ProtoMessage() {}

func (x *OtherUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherUpdateRequest.ProtoReflect.Descriptor instead.
func (*OtherUpdateRequest) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{18}
}

func (x *OtherUpdateRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type OtherUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherUpdateResponse) Reset() {
	*x = OtherUpdateResponse{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherUpdateResponse) ProtoMessage() {}

func (x *OtherUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherUpdateResponse.ProtoReflect.Descriptor instead.
func (*OtherUpdateResponse) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{19}
}

type Foo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Foo           string                 `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Foo) Reset() {
	*x = Foo{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Foo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Foo) ProtoMessage() {}

func (x *Foo) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Foo.ProtoReflect.Descriptor instead.
func (*Foo) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{20}
}

func (x *Foo) GetFoo() string {
	if x != nil {
		return x.Foo
	}
	return ""
}

type Qux struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Qux           string                 `protobuf:"bytes,1,opt,name=qux,proto3" json:"qux,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Qux) Reset() {
	*x = Qux{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Qux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qux) ProtoMessage() {}

func (x *Qux) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qux.ProtoReflect.Descriptor instead.
func (*Qux) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{21}
}

func (x *Qux) GetQux() string {
	if x != nil {
		return x.Qux
	}
	return ""
}

type WhatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blah          string                 `protobuf:"bytes,1,opt,name=blah,proto3" json:"blah,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhatRequest) Reset() {
	*x = WhatRequest{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatRequest) ProtoMessage() {}

func (x *WhatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatRequest.ProtoReflect.Descriptor instead.
func (*WhatRequest) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{22}
}

func (x *WhatRequest) GetBlah() string {
	if x != nil {
		return x.Blah
	}
	return ""
}

type LonelyActivity1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LonelyActivity1Request) Reset() {
	*x = LonelyActivity1Request{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LonelyActivity1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LonelyActivity1Request) ProtoMessage() {}

func (x *LonelyActivity1Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LonelyActivity1Request.ProtoReflect.Descriptor instead.
func (*LonelyActivity1Request) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{23}
}

type LonelyActivity1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LonelyActivity1Response) Reset() {
	*x = LonelyActivity1Response{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LonelyActivity1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LonelyActivity1Response) ProtoMessage() {}

func (x *LonelyActivity1Response) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LonelyActivity1Response.ProtoReflect.Descriptor instead.
func (*LonelyActivity1Response) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{24}
}

type SomeDeprecatedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SomeDeprecatedMessage) Reset() {
	*x = SomeDeprecatedMessage{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SomeDeprecatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeDeprecatedMessage) ProtoMessage() {}

func (x *SomeDeprecatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeDeprecatedMessage.ProtoReflect.Descriptor instead.
func (*SomeDeprecatedMessage) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{25}
}

type OtherWorkflowRequest_Bar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bar           string                 `protobuf:"bytes,1,opt,name=bar,proto3" json:"bar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherWorkflowRequest_Bar) Reset() {
	*x = OtherWorkflowRequest_Bar{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherWorkflowRequest_Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherWorkflowRequest_Bar) ProtoMessage() {}

func (x *OtherWorkflowRequest_Bar) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherWorkflowRequest_Bar.ProtoReflect.Descriptor instead.
func (*OtherWorkflowRequest_Bar) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{14, 0}
}

func (x *OtherWorkflowRequest_Bar) GetBar() string {
	if x != nil {
		return x.Bar
	}
	return ""
}

type OtherWorkflowRequest_Baz struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Baz           string                 `protobuf:"bytes,1,opt,name=baz,proto3" json:"baz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OtherWorkflowRequest_Baz) Reset() {
	*x = OtherWorkflowRequest_Baz{}
	mi := &file_test_simple_v1_simple_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherWorkflowRequest_Baz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherWorkflowRequest_Baz) ProtoMessage() {}

func (x *OtherWorkflowRequest_Baz) ProtoReflect() protoreflect.Message {
	mi := &file_test_simple_v1_simple_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherWorkflowRequest_Baz.ProtoReflect.Descriptor instead.
func (*OtherWorkflowRequest_Baz) Descriptor() ([]byte, []int) {
	return file_test_simple_v1_simple_proto_rawDescGZIP(), []int{14, 1}
}

func (x *OtherWorkflowRequest_Baz) GetBaz() string {
	if x != nil {
		return x.Baz
	}
	return ""
}

var File_test_simple_v1_simple_proto protoreflect.FileDescriptor

var file_test_simple_v1_simple_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d,
	0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a,
	0x14, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x31, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x15, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x22, 0x47, 0x0a, 0x14, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x37, 0x0a, 0x14, 0x53,
	0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x22, 0x37, 0x0a, 0x14, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x3a, 0x0a,
	0x15, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x33, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x22, 0x37, 0x0a, 0x12, 0x53, 0x6f, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x22, 0x34, 0x0a, 0x11, 0x53, 0x6f, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x37, 0x0a, 0x12, 0x53, 0x6f, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x22, 0x35, 0x0a, 0x12, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x35, 0x0a, 0x12, 0x53, 0x6f, 0x6d, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x22,
	0x38, 0x0a, 0x13, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x33, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x22, 0x35, 0x0a, 0x12, 0x53, 0x6f, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x22, 0x38, 0x0a, 0x13, 0x53, 0x6f, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x22, 0xf6, 0x09, 0x0a, 0x14, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x3c,
	0x0a, 0x03, 0x62, 0x61, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x79,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x7a, 0x52, 0x03, 0x62, 0x61, 0x7a, 0x12, 0x27, 0x0a, 0x03,
	0x71, 0x75, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x79, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x78,
	0x52, 0x03, 0x71, 0x75, 0x78, 0x12, 0x29, 0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x48, 0x00, 0x52, 0x03, 0x66, 0x6f, 0x6f,
	0x12, 0x3e, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x48, 0x00, 0x52, 0x03, 0x62, 0x61, 0x72,
	0x12, 0x25, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x25,
	0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x27,
	0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x27, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x07, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52,
	0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x2b, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2b, 0x0a, 0x10,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0c, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x04, 0x71, 0x75, 0x75, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x71, 0x75, 0x75, 0x78, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d,
	0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d,
	0x1a, 0x17, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x61, 0x72, 0x1a, 0x17, 0x0a, 0x03, 0x42, 0x61, 0x7a,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62,
	0x61, 0x7a, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0x17, 0x0a, 0x15, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x12,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x12, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x6f, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x6f, 0x6f, 0x22, 0x17,
	0x0a, 0x03, 0x51, 0x75, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x75, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x71, 0x75, 0x78, 0x22, 0x21, 0x0a, 0x0b, 0x57, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x61, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6c, 0x61, 0x68, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x6f,
	0x6e, 0x65, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x65, 0x6c, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x40, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x02, 0x32, 0xf0, 0x0e, 0x0a, 0x06, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x86, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x31, 0x12, 0x26, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x8a, 0xc4, 0x03, 0x9e, 0x01,
	0x0a, 0x0c, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x31, 0x0a, 0x0c,
	0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x32, 0x12, 0x0d, 0x0a, 0x0b,
	0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x0d, 0x0a, 0x0b, 0x53,
	0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x32, 0x2a, 0x28, 0x73, 0x6f, 0x6d, 0x65,
	0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x31, 0x2f, 0x24, 0x7b, 0x21, 0x20,
	0x69, 0x64, 0x20, 0x7d, 0x2f, 0x24, 0x7b, 0x21, 0x20, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x34,
	0x28, 0x29, 0x20, 0x7d, 0x72, 0x1e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x31, 0x8a, 0x01, 0x17, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x31, 0x12, 0xad,
	0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x32,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x6c, 0x8a, 0xc4, 0x03, 0x68, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x31, 0x10, 0x01, 0x1a, 0x0d, 0x0a, 0x0b, 0x53, 0x6f, 0x6d, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x2a, 0x1f, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x32, 0x2f, 0x24, 0x7b, 0x21, 0x20, 0x75, 0x75, 0x69, 0x64,
	0x5f, 0x76, 0x34, 0x28, 0x29, 0x20, 0x7d, 0x72, 0x1e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x32, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x02, 0x12, 0xb7,
	0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x33,
	0x12, 0x26, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x66, 0x8a, 0xc4, 0x03, 0x5f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x32, 0x10, 0x01, 0x22, 0x03, 0x08, 0x90, 0x1c, 0x2a, 0x29, 0x73, 0x6f,
	0x6d, 0x65, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x33, 0x2f, 0x24, 0x7b,
	0x21, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x2f, 0x24, 0x7b, 0x21, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x20, 0x7d, 0x30, 0x01, 0x4a, 0x02, 0x20, 0x02, 0x5a, 0x0f, 0x6d,
	0x79, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x32, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x03, 0x88, 0x02, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x6d,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x34, 0x12, 0x2c, 0x2e, 0x6d, 0x79, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x8a, 0xc4, 0x03, 0x21, 0x2a, 0x1f, 0x73,
	0x6f, 0x6d, 0x65, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x34, 0x2f, 0x24,
	0x7b, 0x21, 0x20, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x34, 0x28, 0x29, 0x20, 0x7d, 0x12, 0x65,
	0x0a, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x31, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x24, 0x92, 0xc4, 0x03, 0x20, 0x3a, 0x1e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x31, 0x12, 0x61, 0x0a, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x32, 0x12, 0x26, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x92, 0xc4, 0x03, 0x0c, 0x22, 0x02, 0x08, 0x0a,
	0x32, 0x04, 0x1a, 0x02, 0x08, 0x1e, 0x40, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x6d,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x33, 0x12, 0x26, 0x2e, 0x6d, 0x79, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f,
	0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x92, 0xc4, 0x03,
	0x1f, 0x0a, 0x15, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x74, 0x61,
	0x73, 0x6b, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x02, 0x08, 0x0a, 0x32, 0x02, 0x20, 0x05,
	0x12, 0x73, 0x0a, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x34, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x32, 0x92, 0xc4, 0x03, 0x2e, 0x0a, 0x15, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x03,
	0x08, 0xac, 0x02, 0x1a, 0x02, 0x08, 0x05, 0x22, 0x02, 0x08, 0x3c, 0x2a, 0x02, 0x08, 0x1e, 0x32,
	0x02, 0x20, 0x05, 0x40, 0x01, 0x12, 0x50, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x31, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x6d, 0x79,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x04, 0x9a, 0xc4, 0x03, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x32, 0x12, 0x23, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x79, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x9a, 0xc4, 0x03, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0c, 0x92, 0xc4, 0x03, 0x04, 0x22, 0x02, 0x08, 0x0a, 0xa2,
	0xc4, 0x03, 0x00, 0x12, 0x59, 0x0a, 0x0b, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x32, 0x12, 0x24, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x0c, 0x92, 0xc4, 0x03, 0x04, 0x22, 0x02, 0x08, 0x0a, 0xa2, 0xc4, 0x03, 0x00, 0x12, 0x68,
	0x0a, 0x0b, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x33, 0x12, 0x24, 0x2e,
	0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x33, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0c, 0x92, 0xc4, 0x03, 0x04,
	0x22, 0x02, 0x08, 0x0a, 0xa2, 0xc4, 0x03, 0x00, 0x12, 0xbd, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x12, 0x24, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x92, 0xc4, 0x03, 0x13, 0x22, 0x02, 0x08, 0x0a, 0x32,
	0x0d, 0x20, 0x03, 0x2a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0xaa, 0xc4,
	0x03, 0x46, 0x0a, 0x40, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x24, 0x7b, 0x21, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x2e, 0x6e,
	0x6f, 0x74, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x2e, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x28, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x29, 0x2e, 0x73, 0x6c, 0x75, 0x67,
	0x28, 0x29, 0x20, 0x7d, 0x10, 0x01, 0x18, 0x03, 0x1a, 0x13, 0x8a, 0xc4, 0x03, 0x0f, 0x0a, 0x0d,
	0x6d, 0x79, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x32, 0xdd, 0x03,
	0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x2e, 0x6d, 0x79, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x8a, 0xc4, 0x03, 0x1e,
	0x2a, 0x1c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x24, 0x7b, 0x21, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x34, 0x28, 0x29, 0x7d, 0x92, 0xc4,
	0x03, 0x04, 0x22, 0x02, 0x08, 0x1e, 0x12, 0x50, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x6d,
	0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x04, 0x9a, 0xc4, 0x03, 0x00, 0x12, 0x57, 0x0a, 0x0b, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0a, 0xa2, 0xc4, 0x03, 0x00, 0xb2, 0xc4, 0x03, 0x02, 0x08,
	0x01, 0x12, 0x7c, 0x0a, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0xaa,
	0xc4, 0x03, 0x1c, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x24, 0x7b, 0x21, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x34, 0x28, 0x29, 0x7d, 0x1a,
	0x1c, 0x8a, 0xc4, 0x03, 0x18, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x74, 0x61, 0x73,
	0x6b, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x04, 0x08, 0x01, 0x10, 0x01, 0x32, 0x40, 0x0a,
	0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0x68, 0x0a, 0x07, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x57, 0x68,
	0x61, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x16, 0x8a, 0xc4, 0x03, 0x12, 0x2a,
	0x10, 0x77, 0x68, 0x61, 0x74, 0x2f, 0x24, 0x7b, 0x21, 0x6b, 0x73, 0x75, 0x69, 0x64, 0x28, 0x29,
	0x7d, 0x1a, 0x06, 0x92, 0xc4, 0x03, 0x02, 0x08, 0x01, 0x32, 0x82, 0x01, 0x0a, 0x0e, 0x4f, 0x6e,
	0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x0f,
	0x4c, 0x6f, 0x6e, 0x65, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x31, 0x12,
	0x28, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x6e, 0x65, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x79, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x6e,
	0x65, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x92, 0xc4, 0x03, 0x04, 0x22, 0x02, 0x08, 0x05, 0x32, 0x9a,
	0x0a, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0xc0, 0x01,
	0x0a, 0x17, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x31, 0x12, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d,
	0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x8a, 0xc4, 0x03,
	0x4c, 0x0a, 0x16, 0x0a, 0x14, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x6f, 0x6d,
	0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x31, 0x10, 0x01, 0x1a, 0x17, 0x0a, 0x15, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x88, 0x02, 0x01,
	0x12, 0xc0, 0x01, 0x0a, 0x17, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x32, 0x12, 0x27, 0x2e, 0x6d,
	0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53,
	0x8a, 0xc4, 0x03, 0x4c, 0x0a, 0x16, 0x0a, 0x14, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x32, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x32, 0x10, 0x01, 0x1a, 0x17, 0x0a, 0x15, 0x53, 0x6f, 0x6d, 0x65, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32,
	0x88, 0x02, 0x01, 0x12, 0x78, 0x0a, 0x17, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x31, 0x12, 0x27,
	0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x0b, 0x92, 0xc4, 0x03, 0x04, 0x22, 0x02, 0x08, 0x05, 0x88, 0x02, 0x01, 0x12, 0x78, 0x0a,
	0x17, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x32, 0x12, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0b, 0x92, 0xc4, 0x03, 0x04,
	0x22, 0x02, 0x08, 0x05, 0x88, 0x02, 0x01, 0x12, 0x71, 0x0a, 0x14, 0x53, 0x6f, 0x6d, 0x65, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x31, 0x12,
	0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x07, 0x9a, 0xc4, 0x03, 0x00, 0x88, 0x02, 0x01, 0x12, 0x71, 0x0a, 0x14, 0x53, 0x6f,
	0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x32, 0x12, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x07, 0x9a, 0xc4, 0x03, 0x00, 0x88, 0x02, 0x01, 0x12, 0x61, 0x0a,
	0x15, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x07, 0xa2, 0xc4, 0x03, 0x00, 0x88, 0x02, 0x01,
	0x12, 0x61, 0x0a, 0x15, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x32, 0x12, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d,
	0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x07, 0xa2, 0xc4, 0x03, 0x00,
	0x88, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x15, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x12, 0x27, 0x2e, 0x6d,
	0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x07,
	0xaa, 0xc4, 0x03, 0x00, 0x88, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x15, 0x53, 0x6f, 0x6d, 0x65, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32,
	0x12, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x79, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6d,
	0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x07, 0xaa, 0xc4, 0x03, 0x00, 0x88, 0x02, 0x01, 0x42, 0xc2, 0x01, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x42, 0x0b, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x75, 0x64, 0x64, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4d, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x4d, 0x79, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0xca, 0x02, 0x10, 0x4d, 0x79, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0xe2, 0x02, 0x1c,
	0x4d, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x4d,
	0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x3a, 0x3a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_simple_v1_simple_proto_rawDescOnce sync.Once
	file_test_simple_v1_simple_proto_rawDescData = file_test_simple_v1_simple_proto_rawDesc
)

func file_test_simple_v1_simple_proto_rawDescGZIP() []byte {
	file_test_simple_v1_simple_proto_rawDescOnce.Do(func() {
		file_test_simple_v1_simple_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_simple_v1_simple_proto_rawDescData)
	})
	return file_test_simple_v1_simple_proto_rawDescData
}

var file_test_simple_v1_simple_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_simple_v1_simple_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_test_simple_v1_simple_proto_goTypes = []any{
	(OtherEnum)(0),                   // 0: mycompany.simple.OtherEnum
	(*SomeWorkflow1Request)(nil),     // 1: mycompany.simple.SomeWorkflow1Request
	(*SomeWorkflow1Response)(nil),    // 2: mycompany.simple.SomeWorkflow1Response
	(*SomeWorkflow3Request)(nil),     // 3: mycompany.simple.SomeWorkflow3Request
	(*SomeActivity2Request)(nil),     // 4: mycompany.simple.SomeActivity2Request
	(*SomeActivity3Request)(nil),     // 5: mycompany.simple.SomeActivity3Request
	(*SomeActivity3Response)(nil),    // 6: mycompany.simple.SomeActivity3Response
	(*SomeQuery1Response)(nil),       // 7: mycompany.simple.SomeQuery1Response
	(*SomeQuery2Request)(nil),        // 8: mycompany.simple.SomeQuery2Request
	(*SomeQuery2Response)(nil),       // 9: mycompany.simple.SomeQuery2Response
	(*SomeSignal2Request)(nil),       // 10: mycompany.simple.SomeSignal2Request
	(*SomeSignal3Request)(nil),       // 11: mycompany.simple.SomeSignal3Request
	(*SomeSignal3Response)(nil),      // 12: mycompany.simple.SomeSignal3Response
	(*SomeUpdate1Request)(nil),       // 13: mycompany.simple.SomeUpdate1Request
	(*SomeUpdate1Response)(nil),      // 14: mycompany.simple.SomeUpdate1Response
	(*OtherWorkflowRequest)(nil),     // 15: mycompany.simple.OtherWorkflowRequest
	(*OtherWorkflowResponse)(nil),    // 16: mycompany.simple.OtherWorkflowResponse
	(*OtherQueryResponse)(nil),       // 17: mycompany.simple.OtherQueryResponse
	(*OtherSignalRequest)(nil),       // 18: mycompany.simple.OtherSignalRequest
	(*OtherUpdateRequest)(nil),       // 19: mycompany.simple.OtherUpdateRequest
	(*OtherUpdateResponse)(nil),      // 20: mycompany.simple.OtherUpdateResponse
	(*Foo)(nil),                      // 21: mycompany.simple.Foo
	(*Qux)(nil),                      // 22: mycompany.simple.Qux
	(*WhatRequest)(nil),              // 23: mycompany.simple.WhatRequest
	(*LonelyActivity1Request)(nil),   // 24: mycompany.simple.LonelyActivity1Request
	(*LonelyActivity1Response)(nil),  // 25: mycompany.simple.LonelyActivity1Response
	(*SomeDeprecatedMessage)(nil),    // 26: mycompany.simple.SomeDeprecatedMessage
	(*OtherWorkflowRequest_Bar)(nil), // 27: mycompany.simple.OtherWorkflowRequest.Bar
	(*OtherWorkflowRequest_Baz)(nil), // 28: mycompany.simple.OtherWorkflowRequest.Baz
	(*durationpb.Duration)(nil),      // 29: google.protobuf.Duration
	(*emptypb.Empty)(nil),            // 30: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),    // 31: google.protobuf.Timestamp
	(v1.Example)(0),                  // 32: mycompany.simple.common.v1.Example
	(*v1.PaginatedRequest)(nil),      // 33: mycompany.simple.common.v1.PaginatedRequest
	(*v1.PaginatedResponse)(nil),     // 34: mycompany.simple.common.v1.PaginatedResponse
}
var file_test_simple_v1_simple_proto_depIdxs = []int32{
	28, // 0: mycompany.simple.OtherWorkflowRequest.baz:type_name -> mycompany.simple.OtherWorkflowRequest.Baz
	22, // 1: mycompany.simple.OtherWorkflowRequest.qux:type_name -> mycompany.simple.Qux
	21, // 2: mycompany.simple.OtherWorkflowRequest.foo:type_name -> mycompany.simple.Foo
	27, // 3: mycompany.simple.OtherWorkflowRequest.bar:type_name -> mycompany.simple.OtherWorkflowRequest.Bar
	29, // 4: mycompany.simple.OtherWorkflowRequest.example_duration:type_name -> google.protobuf.Duration
	30, // 5: mycompany.simple.OtherWorkflowRequest.example_empty:type_name -> google.protobuf.Empty
	31, // 6: mycompany.simple.OtherWorkflowRequest.example_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 7: mycompany.simple.OtherWorkflowRequest.example_enum:type_name -> mycompany.simple.OtherEnum
	32, // 8: mycompany.simple.OtherWorkflowRequest.common_enum:type_name -> mycompany.simple.common.v1.Example
	1,  // 9: mycompany.simple.Simple.SomeWorkflow1:input_type -> mycompany.simple.SomeWorkflow1Request
	30, // 10: mycompany.simple.Simple.SomeWorkflow2:input_type -> google.protobuf.Empty
	3,  // 11: mycompany.simple.Simple.SomeWorkflow3:input_type -> mycompany.simple.SomeWorkflow3Request
	33, // 12: mycompany.simple.Simple.SomeWorkflow4:input_type -> mycompany.simple.common.v1.PaginatedRequest
	30, // 13: mycompany.simple.Simple.SomeActivity1:input_type -> google.protobuf.Empty
	4,  // 14: mycompany.simple.Simple.SomeActivity2:input_type -> mycompany.simple.SomeActivity2Request
	5,  // 15: mycompany.simple.Simple.SomeActivity3:input_type -> mycompany.simple.SomeActivity3Request
	30, // 16: mycompany.simple.Simple.SomeActivity4:input_type -> google.protobuf.Empty
	30, // 17: mycompany.simple.Simple.SomeQuery1:input_type -> google.protobuf.Empty
	8,  // 18: mycompany.simple.Simple.SomeQuery2:input_type -> mycompany.simple.SomeQuery2Request
	30, // 19: mycompany.simple.Simple.SomeSignal1:input_type -> google.protobuf.Empty
	10, // 20: mycompany.simple.Simple.SomeSignal2:input_type -> mycompany.simple.SomeSignal2Request
	11, // 21: mycompany.simple.Simple.SomeSignal3:input_type -> mycompany.simple.SomeSignal3Request
	13, // 22: mycompany.simple.Simple.SomeUpdate1:input_type -> mycompany.simple.SomeUpdate1Request
	15, // 23: mycompany.simple.Other.OtherWorkflow:input_type -> mycompany.simple.OtherWorkflowRequest
	30, // 24: mycompany.simple.Other.OtherQuery:input_type -> google.protobuf.Empty
	18, // 25: mycompany.simple.Other.OtherSignal:input_type -> mycompany.simple.OtherSignalRequest
	19, // 26: mycompany.simple.Other.OtherUpdate:input_type -> mycompany.simple.OtherUpdateRequest
	30, // 27: mycompany.simple.Nothing.Foo:input_type -> google.protobuf.Empty
	23, // 28: mycompany.simple.Ignored.What:input_type -> mycompany.simple.WhatRequest
	24, // 29: mycompany.simple.OnlyActivities.LonelyActivity1:input_type -> mycompany.simple.LonelyActivity1Request
	26, // 30: mycompany.simple.Deprecated.SomeDeprecatedWorkflow1:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 31: mycompany.simple.Deprecated.SomeDeprecatedWorkflow2:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 32: mycompany.simple.Deprecated.SomeDeprecatedActivity1:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 33: mycompany.simple.Deprecated.SomeDeprecatedActivity2:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 34: mycompany.simple.Deprecated.SomeDeprecatedQuery1:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 35: mycompany.simple.Deprecated.SomeDeprecatedQuery2:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 36: mycompany.simple.Deprecated.SomeDeprecatedSignal1:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 37: mycompany.simple.Deprecated.SomeDeprecatedSignal2:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 38: mycompany.simple.Deprecated.SomeDeprecatedUpdate1:input_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 39: mycompany.simple.Deprecated.SomeDeprecatedUpdate2:input_type -> mycompany.simple.SomeDeprecatedMessage
	2,  // 40: mycompany.simple.Simple.SomeWorkflow1:output_type -> mycompany.simple.SomeWorkflow1Response
	30, // 41: mycompany.simple.Simple.SomeWorkflow2:output_type -> google.protobuf.Empty
	30, // 42: mycompany.simple.Simple.SomeWorkflow3:output_type -> google.protobuf.Empty
	34, // 43: mycompany.simple.Simple.SomeWorkflow4:output_type -> mycompany.simple.common.v1.PaginatedResponse
	30, // 44: mycompany.simple.Simple.SomeActivity1:output_type -> google.protobuf.Empty
	30, // 45: mycompany.simple.Simple.SomeActivity2:output_type -> google.protobuf.Empty
	6,  // 46: mycompany.simple.Simple.SomeActivity3:output_type -> mycompany.simple.SomeActivity3Response
	30, // 47: mycompany.simple.Simple.SomeActivity4:output_type -> google.protobuf.Empty
	7,  // 48: mycompany.simple.Simple.SomeQuery1:output_type -> mycompany.simple.SomeQuery1Response
	9,  // 49: mycompany.simple.Simple.SomeQuery2:output_type -> mycompany.simple.SomeQuery2Response
	30, // 50: mycompany.simple.Simple.SomeSignal1:output_type -> google.protobuf.Empty
	30, // 51: mycompany.simple.Simple.SomeSignal2:output_type -> google.protobuf.Empty
	12, // 52: mycompany.simple.Simple.SomeSignal3:output_type -> mycompany.simple.SomeSignal3Response
	14, // 53: mycompany.simple.Simple.SomeUpdate1:output_type -> mycompany.simple.SomeUpdate1Response
	16, // 54: mycompany.simple.Other.OtherWorkflow:output_type -> mycompany.simple.OtherWorkflowResponse
	17, // 55: mycompany.simple.Other.OtherQuery:output_type -> mycompany.simple.OtherQueryResponse
	30, // 56: mycompany.simple.Other.OtherSignal:output_type -> google.protobuf.Empty
	20, // 57: mycompany.simple.Other.OtherUpdate:output_type -> mycompany.simple.OtherUpdateResponse
	30, // 58: mycompany.simple.Nothing.Foo:output_type -> google.protobuf.Empty
	30, // 59: mycompany.simple.Ignored.What:output_type -> google.protobuf.Empty
	25, // 60: mycompany.simple.OnlyActivities.LonelyActivity1:output_type -> mycompany.simple.LonelyActivity1Response
	26, // 61: mycompany.simple.Deprecated.SomeDeprecatedWorkflow1:output_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 62: mycompany.simple.Deprecated.SomeDeprecatedWorkflow2:output_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 63: mycompany.simple.Deprecated.SomeDeprecatedActivity1:output_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 64: mycompany.simple.Deprecated.SomeDeprecatedActivity2:output_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 65: mycompany.simple.Deprecated.SomeDeprecatedQuery1:output_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 66: mycompany.simple.Deprecated.SomeDeprecatedQuery2:output_type -> mycompany.simple.SomeDeprecatedMessage
	30, // 67: mycompany.simple.Deprecated.SomeDeprecatedSignal1:output_type -> google.protobuf.Empty
	30, // 68: mycompany.simple.Deprecated.SomeDeprecatedSignal2:output_type -> google.protobuf.Empty
	26, // 69: mycompany.simple.Deprecated.SomeDeprecatedUpdate1:output_type -> mycompany.simple.SomeDeprecatedMessage
	26, // 70: mycompany.simple.Deprecated.SomeDeprecatedUpdate2:output_type -> mycompany.simple.SomeDeprecatedMessage
	40, // [40:71] is the sub-list for method output_type
	9,  // [9:40] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_test_simple_v1_simple_proto_init() }
func file_test_simple_v1_simple_proto_init() {
	if File_test_simple_v1_simple_proto != nil {
		return
	}
	file_test_simple_v1_simple_proto_msgTypes[14].OneofWrappers = []any{
		(*OtherWorkflowRequest_Foo)(nil),
		(*OtherWorkflowRequest_Bar_)(nil),
		(*OtherWorkflowRequest_ExampleBytes)(nil),
		(*OtherWorkflowRequest_ExampleDouble)(nil),
		(*OtherWorkflowRequest_ExampleFloat)(nil),
		(*OtherWorkflowRequest_ExampleInt32)(nil),
		(*OtherWorkflowRequest_ExampleInt64)(nil),
		(*OtherWorkflowRequest_ExampleUint32)(nil),
		(*OtherWorkflowRequest_ExampleUint64)(nil),
		(*OtherWorkflowRequest_ExampleSint32)(nil),
		(*OtherWorkflowRequest_ExampleSint64)(nil),
		(*OtherWorkflowRequest_ExampleFixed32)(nil),
		(*OtherWorkflowRequest_ExampleFixed64)(nil),
		(*OtherWorkflowRequest_ExampleSfixed32)(nil),
		(*OtherWorkflowRequest_ExampleSfixed64)(nil),
		(*OtherWorkflowRequest_ExampleBool)(nil),
		(*OtherWorkflowRequest_Quux)(nil),
		(*OtherWorkflowRequest_ExampleDuration)(nil),
		(*OtherWorkflowRequest_ExampleEmpty)(nil),
		(*OtherWorkflowRequest_ExampleTimestamp)(nil),
		(*OtherWorkflowRequest_ExampleEnum)(nil),
		(*OtherWorkflowRequest_CommonEnum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_simple_v1_simple_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_test_simple_v1_simple_proto_goTypes,
		DependencyIndexes: file_test_simple_v1_simple_proto_depIdxs,
		EnumInfos:         file_test_simple_v1_simple_proto_enumTypes,
		MessageInfos:      file_test_simple_v1_simple_proto_msgTypes,
	}.Build()
	File_test_simple_v1_simple_proto = out.File
	file_test_simple_v1_simple_proto_rawDesc = nil
	file_test_simple_v1_simple_proto_goTypes = nil
	file_test_simple_v1_simple_proto_depIdxs = nil
}
