syntax="proto3";

package example.v1;

import "google/protobuf/empty.proto";
import "patch/go.proto";
import "temporal/v1/temporal.proto";

service Example {
  option (temporal.v1.service) = {
    task_queue: "example-v1"
  };

  // CreateFoo creates a new foo operation
  rpc CreateFoo(CreateFooRequest) returns (CreateFooResponse) {
    option (temporal.v1.workflow) = {
      execution_timeout: { seconds: 3600 }
      id_reuse_policy: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
      id: 'create-foo/${! name.slug() }'
      xns: {
        heartbeat_interval: { seconds: 10 }
        heartbeat_timeout: { seconds: 20 }
        start_to_close_timeout: { seconds: 3630 }
      }
      search_attributes: 
        'foo = name\n'
        'created_at = now().ts_tz("UTC")\n'
      query: { ref: 'GetFooProgress' }
      signal: { ref: 'SetFooProgress', start: true }
      update: { ref: 'UpdateFooProgress' }
    };
  }

  // GetFooProgress returns the status of a CreateFoo operation
  rpc GetFooProgress(google.protobuf.Empty) returns (GetFooProgressResponse) {
    option (temporal.v1.query) = {
      xns: {
        heartbeat_interval: { seconds: 10 }
        heartbeat_timeout: { seconds: 20 }
        start_to_close_timeout: { seconds: 60 }
      }
    };
  }

  // Notify sends a notification
  rpc Notify(NotifyRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: { seconds: 30 }
      retry_policy: {
        max_attempts: 3
      }
    };
  }

  // SetFooProgress sets the current status of a CreateFoo operation
  rpc SetFooProgress(SetFooProgressRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {
      xns: {
        heartbeat_interval: { seconds: 10 }
        heartbeat_timeout: { seconds: 20 }
        start_to_close_timeout: { seconds: 60 }
      }
    };
  }

  // UpdateFooProgress sets the current status of a CreateFoo operation
  rpc UpdateFooProgress(SetFooProgressRequest) returns (GetFooProgressResponse) {
    option (temporal.v1.update) = {
      id: 'update-progress/${! progress.string() }',
      xns: {
        heartbeat_interval: { seconds: 10 }
        heartbeat_timeout: { seconds: 20 }
        start_to_close_timeout: { seconds: 60 }
      }
    };
  }
}

service External {
  option (temporal.v1.service) = {
    task_queue: "external-v1"
  };

  rpc ProvisionFoo(ProvisionFooRequest) returns (ProvisionFooResponse) {
    option (temporal.v1.workflow) = {
      id: 'provision-foo/${! name.slug() }'
      signal: { ref: 'example.v1.Example.SetFooProgress' }
      signal: { ref: 'mycompany.simple.Simple.SomeSignal3' }
    };
  }
}

// CreateFooRequest describes the input to a CreateFoo workflow
message CreateFooRequest {
  option (go.message).name = 'CreateFooInput';

  // unique foo name
  string name = 1 [
    (go.field).name = 'RequestName'
  ];
}

// SampleWorkflowWithMutexResponse describes the output from a CreateFoo workflow
message CreateFooResponse {
  Foo foo = 1; 
}

// Foo describes an illustrative foo resource
message Foo {
  string name = 1;
  Status status = 2;

  enum Status {
    FOO_STATUS_UNSPECIFIED = 0;
    FOO_STATUS_READY = 1;
    FOO_STATUS_CREATING = 2;
  }
}

// GetFooProgressResponse describes the output from a GetFooProgress query
message GetFooProgressResponse {
  float progress = 1;
  Foo.Status status = 2;
}

// NotifyRequest describes the input to a Notify activity
message NotifyRequest {
  string message = 1;
}

// ProvisionFooRequest describes the input to a ProvisionFoo workflow
message ProvisionFooRequest {
  option (go.message).name = 'ProvisionFooInput';

  // unique foo name
  string name = 1 [
    (go.field).name = 'RequestName'
  ];
}

// SampleWorkflowWithMutexResponse describes the output from a ProvisionFoo workflow
message ProvisionFooResponse {
  Foo foo = 1; 
}

// SetFooProgressRequest describes the input to a SetFooProgress signal
message SetFooProgressRequest {
  // value of current workflow progress
  float progress = 1;
}
